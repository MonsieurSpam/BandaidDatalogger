
DataloggerSDCard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b90  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  08007d60  08007d60  00017d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008318  08008318  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008318  08008318  00018318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008320  08008320  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008320  08008320  00018320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008324  08008324  00018324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028c8  20000074  0800839c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000293c  0800839c  0002293c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e23d  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002510  00000000  00000000  0002e324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  00030838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a3  00000000  00000000  000314c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022161  00000000  00000000  00031e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013095  00000000  00000000  00053fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb9f4  00000000  00000000  00067061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038c0  00000000  00000000  00132a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00136318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007d48 	.word	0x08007d48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007d48 	.word	0x08007d48

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008e0:	f000 b970 	b.w	8000bc4 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9e08      	ldr	r6, [sp, #32]
 8000902:	460d      	mov	r5, r1
 8000904:	4604      	mov	r4, r0
 8000906:	460f      	mov	r7, r1
 8000908:	2b00      	cmp	r3, #0
 800090a:	d14a      	bne.n	80009a2 <__udivmoddi4+0xa6>
 800090c:	428a      	cmp	r2, r1
 800090e:	4694      	mov	ip, r2
 8000910:	d965      	bls.n	80009de <__udivmoddi4+0xe2>
 8000912:	fab2 f382 	clz	r3, r2
 8000916:	b143      	cbz	r3, 800092a <__udivmoddi4+0x2e>
 8000918:	fa02 fc03 	lsl.w	ip, r2, r3
 800091c:	f1c3 0220 	rsb	r2, r3, #32
 8000920:	409f      	lsls	r7, r3
 8000922:	fa20 f202 	lsr.w	r2, r0, r2
 8000926:	4317      	orrs	r7, r2
 8000928:	409c      	lsls	r4, r3
 800092a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800092e:	fa1f f58c 	uxth.w	r5, ip
 8000932:	fbb7 f1fe 	udiv	r1, r7, lr
 8000936:	0c22      	lsrs	r2, r4, #16
 8000938:	fb0e 7711 	mls	r7, lr, r1, r7
 800093c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000940:	fb01 f005 	mul.w	r0, r1, r5
 8000944:	4290      	cmp	r0, r2
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x62>
 8000948:	eb1c 0202 	adds.w	r2, ip, r2
 800094c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000950:	f080 811c 	bcs.w	8000b8c <__udivmoddi4+0x290>
 8000954:	4290      	cmp	r0, r2
 8000956:	f240 8119 	bls.w	8000b8c <__udivmoddi4+0x290>
 800095a:	3902      	subs	r1, #2
 800095c:	4462      	add	r2, ip
 800095e:	1a12      	subs	r2, r2, r0
 8000960:	b2a4      	uxth	r4, r4
 8000962:	fbb2 f0fe 	udiv	r0, r2, lr
 8000966:	fb0e 2210 	mls	r2, lr, r0, r2
 800096a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800096e:	fb00 f505 	mul.w	r5, r0, r5
 8000972:	42a5      	cmp	r5, r4
 8000974:	d90a      	bls.n	800098c <__udivmoddi4+0x90>
 8000976:	eb1c 0404 	adds.w	r4, ip, r4
 800097a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800097e:	f080 8107 	bcs.w	8000b90 <__udivmoddi4+0x294>
 8000982:	42a5      	cmp	r5, r4
 8000984:	f240 8104 	bls.w	8000b90 <__udivmoddi4+0x294>
 8000988:	4464      	add	r4, ip
 800098a:	3802      	subs	r0, #2
 800098c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000990:	1b64      	subs	r4, r4, r5
 8000992:	2100      	movs	r1, #0
 8000994:	b11e      	cbz	r6, 800099e <__udivmoddi4+0xa2>
 8000996:	40dc      	lsrs	r4, r3
 8000998:	2300      	movs	r3, #0
 800099a:	e9c6 4300 	strd	r4, r3, [r6]
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d908      	bls.n	80009b8 <__udivmoddi4+0xbc>
 80009a6:	2e00      	cmp	r6, #0
 80009a8:	f000 80ed 	beq.w	8000b86 <__udivmoddi4+0x28a>
 80009ac:	2100      	movs	r1, #0
 80009ae:	e9c6 0500 	strd	r0, r5, [r6]
 80009b2:	4608      	mov	r0, r1
 80009b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b8:	fab3 f183 	clz	r1, r3
 80009bc:	2900      	cmp	r1, #0
 80009be:	d149      	bne.n	8000a54 <__udivmoddi4+0x158>
 80009c0:	42ab      	cmp	r3, r5
 80009c2:	d302      	bcc.n	80009ca <__udivmoddi4+0xce>
 80009c4:	4282      	cmp	r2, r0
 80009c6:	f200 80f8 	bhi.w	8000bba <__udivmoddi4+0x2be>
 80009ca:	1a84      	subs	r4, r0, r2
 80009cc:	eb65 0203 	sbc.w	r2, r5, r3
 80009d0:	2001      	movs	r0, #1
 80009d2:	4617      	mov	r7, r2
 80009d4:	2e00      	cmp	r6, #0
 80009d6:	d0e2      	beq.n	800099e <__udivmoddi4+0xa2>
 80009d8:	e9c6 4700 	strd	r4, r7, [r6]
 80009dc:	e7df      	b.n	800099e <__udivmoddi4+0xa2>
 80009de:	b902      	cbnz	r2, 80009e2 <__udivmoddi4+0xe6>
 80009e0:	deff      	udf	#255	; 0xff
 80009e2:	fab2 f382 	clz	r3, r2
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8090 	bne.w	8000b0c <__udivmoddi4+0x210>
 80009ec:	1a8a      	subs	r2, r1, r2
 80009ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f2:	fa1f fe8c 	uxth.w	lr, ip
 80009f6:	2101      	movs	r1, #1
 80009f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000a00:	0c22      	lsrs	r2, r4, #16
 8000a02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a06:	fb0e f005 	mul.w	r0, lr, r5
 8000a0a:	4290      	cmp	r0, r2
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x124>
 8000a0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a12:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a16:	d202      	bcs.n	8000a1e <__udivmoddi4+0x122>
 8000a18:	4290      	cmp	r0, r2
 8000a1a:	f200 80cb 	bhi.w	8000bb4 <__udivmoddi4+0x2b8>
 8000a1e:	4645      	mov	r5, r8
 8000a20:	1a12      	subs	r2, r2, r0
 8000a22:	b2a4      	uxth	r4, r4
 8000a24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a28:	fb07 2210 	mls	r2, r7, r0, r2
 8000a2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a30:	fb0e fe00 	mul.w	lr, lr, r0
 8000a34:	45a6      	cmp	lr, r4
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x14e>
 8000a38:	eb1c 0404 	adds.w	r4, ip, r4
 8000a3c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a40:	d202      	bcs.n	8000a48 <__udivmoddi4+0x14c>
 8000a42:	45a6      	cmp	lr, r4
 8000a44:	f200 80bb 	bhi.w	8000bbe <__udivmoddi4+0x2c2>
 8000a48:	4610      	mov	r0, r2
 8000a4a:	eba4 040e 	sub.w	r4, r4, lr
 8000a4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a52:	e79f      	b.n	8000994 <__udivmoddi4+0x98>
 8000a54:	f1c1 0720 	rsb	r7, r1, #32
 8000a58:	408b      	lsls	r3, r1
 8000a5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a62:	fa05 f401 	lsl.w	r4, r5, r1
 8000a66:	fa20 f307 	lsr.w	r3, r0, r7
 8000a6a:	40fd      	lsrs	r5, r7
 8000a6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a70:	4323      	orrs	r3, r4
 8000a72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a76:	fa1f fe8c 	uxth.w	lr, ip
 8000a7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a7e:	0c1c      	lsrs	r4, r3, #16
 8000a80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a84:	fb08 f50e 	mul.w	r5, r8, lr
 8000a88:	42a5      	cmp	r5, r4
 8000a8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a92:	d90b      	bls.n	8000aac <__udivmoddi4+0x1b0>
 8000a94:	eb1c 0404 	adds.w	r4, ip, r4
 8000a98:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a9c:	f080 8088 	bcs.w	8000bb0 <__udivmoddi4+0x2b4>
 8000aa0:	42a5      	cmp	r5, r4
 8000aa2:	f240 8085 	bls.w	8000bb0 <__udivmoddi4+0x2b4>
 8000aa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aaa:	4464      	add	r4, ip
 8000aac:	1b64      	subs	r4, r4, r5
 8000aae:	b29d      	uxth	r5, r3
 8000ab0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ab4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ab8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000abc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ac0:	45a6      	cmp	lr, r4
 8000ac2:	d908      	bls.n	8000ad6 <__udivmoddi4+0x1da>
 8000ac4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000acc:	d26c      	bcs.n	8000ba8 <__udivmoddi4+0x2ac>
 8000ace:	45a6      	cmp	lr, r4
 8000ad0:	d96a      	bls.n	8000ba8 <__udivmoddi4+0x2ac>
 8000ad2:	3b02      	subs	r3, #2
 8000ad4:	4464      	add	r4, ip
 8000ad6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ada:	fba3 9502 	umull	r9, r5, r3, r2
 8000ade:	eba4 040e 	sub.w	r4, r4, lr
 8000ae2:	42ac      	cmp	r4, r5
 8000ae4:	46c8      	mov	r8, r9
 8000ae6:	46ae      	mov	lr, r5
 8000ae8:	d356      	bcc.n	8000b98 <__udivmoddi4+0x29c>
 8000aea:	d053      	beq.n	8000b94 <__udivmoddi4+0x298>
 8000aec:	b156      	cbz	r6, 8000b04 <__udivmoddi4+0x208>
 8000aee:	ebb0 0208 	subs.w	r2, r0, r8
 8000af2:	eb64 040e 	sbc.w	r4, r4, lr
 8000af6:	fa04 f707 	lsl.w	r7, r4, r7
 8000afa:	40ca      	lsrs	r2, r1
 8000afc:	40cc      	lsrs	r4, r1
 8000afe:	4317      	orrs	r7, r2
 8000b00:	e9c6 7400 	strd	r7, r4, [r6]
 8000b04:	4618      	mov	r0, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0c:	f1c3 0120 	rsb	r1, r3, #32
 8000b10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b14:	fa20 f201 	lsr.w	r2, r0, r1
 8000b18:	fa25 f101 	lsr.w	r1, r5, r1
 8000b1c:	409d      	lsls	r5, r3
 8000b1e:	432a      	orrs	r2, r5
 8000b20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b24:	fa1f fe8c 	uxth.w	lr, ip
 8000b28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b30:	0c11      	lsrs	r1, r2, #16
 8000b32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b36:	fb00 f50e 	mul.w	r5, r0, lr
 8000b3a:	428d      	cmp	r5, r1
 8000b3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b40:	d908      	bls.n	8000b54 <__udivmoddi4+0x258>
 8000b42:	eb1c 0101 	adds.w	r1, ip, r1
 8000b46:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b4a:	d22f      	bcs.n	8000bac <__udivmoddi4+0x2b0>
 8000b4c:	428d      	cmp	r5, r1
 8000b4e:	d92d      	bls.n	8000bac <__udivmoddi4+0x2b0>
 8000b50:	3802      	subs	r0, #2
 8000b52:	4461      	add	r1, ip
 8000b54:	1b49      	subs	r1, r1, r5
 8000b56:	b292      	uxth	r2, r2
 8000b58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b64:	fb05 f10e 	mul.w	r1, r5, lr
 8000b68:	4291      	cmp	r1, r2
 8000b6a:	d908      	bls.n	8000b7e <__udivmoddi4+0x282>
 8000b6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b70:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b74:	d216      	bcs.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b76:	4291      	cmp	r1, r2
 8000b78:	d914      	bls.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b7a:	3d02      	subs	r5, #2
 8000b7c:	4462      	add	r2, ip
 8000b7e:	1a52      	subs	r2, r2, r1
 8000b80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b84:	e738      	b.n	80009f8 <__udivmoddi4+0xfc>
 8000b86:	4631      	mov	r1, r6
 8000b88:	4630      	mov	r0, r6
 8000b8a:	e708      	b.n	800099e <__udivmoddi4+0xa2>
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e6e6      	b.n	800095e <__udivmoddi4+0x62>
 8000b90:	4610      	mov	r0, r2
 8000b92:	e6fb      	b.n	800098c <__udivmoddi4+0x90>
 8000b94:	4548      	cmp	r0, r9
 8000b96:	d2a9      	bcs.n	8000aec <__udivmoddi4+0x1f0>
 8000b98:	ebb9 0802 	subs.w	r8, r9, r2
 8000b9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	e7a3      	b.n	8000aec <__udivmoddi4+0x1f0>
 8000ba4:	4645      	mov	r5, r8
 8000ba6:	e7ea      	b.n	8000b7e <__udivmoddi4+0x282>
 8000ba8:	462b      	mov	r3, r5
 8000baa:	e794      	b.n	8000ad6 <__udivmoddi4+0x1da>
 8000bac:	4640      	mov	r0, r8
 8000bae:	e7d1      	b.n	8000b54 <__udivmoddi4+0x258>
 8000bb0:	46d0      	mov	r8, sl
 8000bb2:	e77b      	b.n	8000aac <__udivmoddi4+0x1b0>
 8000bb4:	3d02      	subs	r5, #2
 8000bb6:	4462      	add	r2, ip
 8000bb8:	e732      	b.n	8000a20 <__udivmoddi4+0x124>
 8000bba:	4608      	mov	r0, r1
 8000bbc:	e70a      	b.n	80009d4 <__udivmoddi4+0xd8>
 8000bbe:	4464      	add	r4, ip
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	e742      	b.n	8000a4a <__udivmoddi4+0x14e>

08000bc4 <__aeabi_idiv0>:
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2110      	movs	r1, #16
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <SELECT+0x18>)
 8000bd2:	f001 fb7b 	bl	80022cc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f001 f8da 	bl	8001d90 <HAL_Delay>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40020800 	.word	0x40020800

08000be4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2110      	movs	r1, #16
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <DESELECT+0x18>)
 8000bee:	f001 fb6d 	bl	80022cc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f001 f8cc 	bl	8001d90 <HAL_Delay>
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40020800 	.word	0x40020800

08000c00 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c0a:	bf00      	nop
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <SPI_TxByte+0x30>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d1f8      	bne.n	8000c0c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000c1a:	1df9      	adds	r1, r7, #7
 8000c1c:	2364      	movs	r3, #100	; 0x64
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <SPI_TxByte+0x30>)
 8000c22:	f002 f9de 	bl	8002fe2 <HAL_SPI_Transmit>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000098 	.word	0x20000098

08000c34 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c40:	bf00      	nop
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <SPI_TxBuffer+0x30>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f003 0302 	and.w	r3, r3, #2
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d1f8      	bne.n	8000c42 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c50:	887a      	ldrh	r2, [r7, #2]
 8000c52:	2364      	movs	r3, #100	; 0x64
 8000c54:	6879      	ldr	r1, [r7, #4]
 8000c56:	4803      	ldr	r0, [pc, #12]	; (8000c64 <SPI_TxBuffer+0x30>)
 8000c58:	f002 f9c3 	bl	8002fe2 <HAL_SPI_Transmit>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000098 	.word	0x20000098

08000c68 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000c6e:	23ff      	movs	r3, #255	; 0xff
 8000c70:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c72:	bf00      	nop
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <SPI_RxByte+0x34>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d1f8      	bne.n	8000c74 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c82:	1dba      	adds	r2, r7, #6
 8000c84:	1df9      	adds	r1, r7, #7
 8000c86:	2364      	movs	r3, #100	; 0x64
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	4803      	ldr	r0, [pc, #12]	; (8000c9c <SPI_RxByte+0x34>)
 8000c8e:	f002 fae4 	bl	800325a <HAL_SPI_TransmitReceive>

	return data;
 8000c92:	79bb      	ldrb	r3, [r7, #6]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000098 	.word	0x20000098

08000ca0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000ca8:	f7ff ffde 	bl	8000c68 <SPI_RxByte>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	701a      	strb	r2, [r3, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <SD_ReadyWait+0x30>)
 8000cc4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cc8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000cca:	f7ff ffcd 	bl	8000c68 <SPI_RxByte>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2bff      	cmp	r3, #255	; 0xff
 8000cd6:	d003      	beq.n	8000ce0 <SD_ReadyWait+0x24>
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <SD_ReadyWait+0x30>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f4      	bne.n	8000cca <SD_ReadyWait+0xe>

	return res;
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000092 	.word	0x20000092

08000cf0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000cf6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000cfa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000cfc:	f7ff ff72 	bl	8000be4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	e005      	b.n	8000d12 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000d06:	20ff      	movs	r0, #255	; 0xff
 8000d08:	f7ff ff7a 	bl	8000c00 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	2b09      	cmp	r3, #9
 8000d16:	ddf6      	ble.n	8000d06 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000d18:	f7ff ff56 	bl	8000bc8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000d1c:	2340      	movs	r3, #64	; 0x40
 8000d1e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000d30:	2395      	movs	r3, #149	; 0x95
 8000d32:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000d34:	463b      	mov	r3, r7
 8000d36:	2106      	movs	r1, #6
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff7b 	bl	8000c34 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d3e:	e002      	b.n	8000d46 <SD_PowerOn+0x56>
	{
		cnt--;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d46:	f7ff ff8f 	bl	8000c68 <SPI_RxByte>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d002      	beq.n	8000d56 <SD_PowerOn+0x66>
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f4      	bne.n	8000d40 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000d56:	f7ff ff45 	bl	8000be4 <DESELECT>
	SPI_TxByte(0XFF);
 8000d5a:	20ff      	movs	r0, #255	; 0xff
 8000d5c:	f7ff ff50 	bl	8000c00 <SPI_TxByte>

	PowerFlag = 1;
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <SD_PowerOn+0x80>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000095 	.word	0x20000095

08000d74 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <SD_PowerOff+0x14>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	20000095 	.word	0x20000095

08000d8c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <SD_CheckPower+0x14>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000095 	.word	0x20000095

08000da4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <SD_RxDataBlock+0x58>)
 8000db0:	22c8      	movs	r2, #200	; 0xc8
 8000db2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000db4:	f7ff ff58 	bl	8000c68 <SPI_RxByte>
 8000db8:	4603      	mov	r3, r0
 8000dba:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	2bff      	cmp	r3, #255	; 0xff
 8000dc0:	d103      	bne.n	8000dca <SD_RxDataBlock+0x26>
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <SD_RxDataBlock+0x58>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f4      	bne.n	8000db4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	2bfe      	cmp	r3, #254	; 0xfe
 8000dce:	d001      	beq.n	8000dd4 <SD_RxDataBlock+0x30>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e00f      	b.n	8000df4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	1c5a      	adds	r2, r3, #1
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff60 	bl	8000ca0 <SPI_RxBytePtr>
	} while(len--);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	1e5a      	subs	r2, r3, #1
 8000de4:	603a      	str	r2, [r7, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f4      	bne.n	8000dd4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000dea:	f7ff ff3d 	bl	8000c68 <SPI_RxByte>
	SPI_RxByte();
 8000dee:	f7ff ff3b 	bl	8000c68 <SPI_RxByte>

	return TRUE;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000090 	.word	0x20000090

08000e00 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000e10:	f7ff ff54 	bl	8000cbc <SD_ReadyWait>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2bff      	cmp	r3, #255	; 0xff
 8000e18:	d001      	beq.n	8000e1e <SD_TxDataBlock+0x1e>
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e02f      	b.n	8000e7e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff feed 	bl	8000c00 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000e26:	78fb      	ldrb	r3, [r7, #3]
 8000e28:	2bfd      	cmp	r3, #253	; 0xfd
 8000e2a:	d020      	beq.n	8000e6e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000e2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff feff 	bl	8000c34 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000e36:	f7ff ff17 	bl	8000c68 <SPI_RxByte>
		SPI_RxByte();
 8000e3a:	f7ff ff15 	bl	8000c68 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000e3e:	e00b      	b.n	8000e58 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000e40:	f7ff ff12 	bl	8000c68 <SPI_RxByte>
 8000e44:	4603      	mov	r3, r0
 8000e46:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	f003 031f 	and.w	r3, r3, #31
 8000e4e:	2b05      	cmp	r3, #5
 8000e50:	d006      	beq.n	8000e60 <SD_TxDataBlock+0x60>
			i++;
 8000e52:	7bbb      	ldrb	r3, [r7, #14]
 8000e54:	3301      	adds	r3, #1
 8000e56:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000e58:	7bbb      	ldrb	r3, [r7, #14]
 8000e5a:	2b40      	cmp	r3, #64	; 0x40
 8000e5c:	d9f0      	bls.n	8000e40 <SD_TxDataBlock+0x40>
 8000e5e:	e000      	b.n	8000e62 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000e60:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000e62:	bf00      	nop
 8000e64:	f7ff ff00 	bl	8000c68 <SPI_RxByte>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0fa      	beq.n	8000e64 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	f003 031f 	and.w	r3, r3, #31
 8000e74:	2b05      	cmp	r3, #5
 8000e76:	d101      	bne.n	8000e7c <SD_TxDataBlock+0x7c>
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e000      	b.n	8000e7e <SD_TxDataBlock+0x7e>

	return FALSE;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b084      	sub	sp, #16
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	6039      	str	r1, [r7, #0]
 8000e90:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e92:	f7ff ff13 	bl	8000cbc <SD_ReadyWait>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2bff      	cmp	r3, #255	; 0xff
 8000e9a:	d001      	beq.n	8000ea0 <SD_SendCmd+0x1a>
 8000e9c:	23ff      	movs	r3, #255	; 0xff
 8000e9e:	e042      	b.n	8000f26 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff feac 	bl	8000c00 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	0e1b      	lsrs	r3, r3, #24
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fea6 	bl	8000c00 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	0c1b      	lsrs	r3, r3, #16
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fea0 	bl	8000c00 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	0a1b      	lsrs	r3, r3, #8
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fe9a 	bl	8000c00 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fe95 	bl	8000c00 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b40      	cmp	r3, #64	; 0x40
 8000eda:	d102      	bne.n	8000ee2 <SD_SendCmd+0x5c>
 8000edc:	2395      	movs	r3, #149	; 0x95
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e007      	b.n	8000ef2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b48      	cmp	r3, #72	; 0x48
 8000ee6:	d102      	bne.n	8000eee <SD_SendCmd+0x68>
 8000ee8:	2387      	movs	r3, #135	; 0x87
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e001      	b.n	8000ef2 <SD_SendCmd+0x6c>
	else crc = 1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fe83 	bl	8000c00 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b4c      	cmp	r3, #76	; 0x4c
 8000efe:	d101      	bne.n	8000f04 <SD_SendCmd+0x7e>
 8000f00:	f7ff feb2 	bl	8000c68 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000f04:	230a      	movs	r3, #10
 8000f06:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000f08:	f7ff feae 	bl	8000c68 <SPI_RxByte>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000f10:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	da05      	bge.n	8000f24 <SD_SendCmd+0x9e>
 8000f18:	7bbb      	ldrb	r3, [r7, #14]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	73bb      	strb	r3, [r7, #14]
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1f1      	bne.n	8000f08 <SD_SendCmd+0x82>

	return res;
 8000f24:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <SD_disk_initialize+0x14>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e0d1      	b.n	80010e8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000f44:	4b6a      	ldr	r3, [pc, #424]	; (80010f0 <SD_disk_initialize+0x1c0>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <SD_disk_initialize+0x2a>
 8000f52:	4b67      	ldr	r3, [pc, #412]	; (80010f0 <SD_disk_initialize+0x1c0>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	e0c6      	b.n	80010e8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000f5a:	f7ff fec9 	bl	8000cf0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000f5e:	f7ff fe33 	bl	8000bc8 <SELECT>

	/* check disk type */
	type = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000f66:	2100      	movs	r1, #0
 8000f68:	2040      	movs	r0, #64	; 0x40
 8000f6a:	f7ff ff8c 	bl	8000e86 <SD_SendCmd>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	f040 80a1 	bne.w	80010b8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000f76:	4b5f      	ldr	r3, [pc, #380]	; (80010f4 <SD_disk_initialize+0x1c4>)
 8000f78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f7c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f7e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f82:	2048      	movs	r0, #72	; 0x48
 8000f84:	f7ff ff7f 	bl	8000e86 <SD_SendCmd>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d155      	bne.n	800103a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e00c      	b.n	8000fae <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000f94:	7bfc      	ldrb	r4, [r7, #15]
 8000f96:	f7ff fe67 	bl	8000c68 <SPI_RxByte>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	f104 0310 	add.w	r3, r4, #16
 8000fa2:	443b      	add	r3, r7
 8000fa4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	3301      	adds	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d9ef      	bls.n	8000f94 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000fb4:	7abb      	ldrb	r3, [r7, #10]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d17e      	bne.n	80010b8 <SD_disk_initialize+0x188>
 8000fba:	7afb      	ldrb	r3, [r7, #11]
 8000fbc:	2baa      	cmp	r3, #170	; 0xaa
 8000fbe:	d17b      	bne.n	80010b8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2077      	movs	r0, #119	; 0x77
 8000fc4:	f7ff ff5f 	bl	8000e86 <SD_SendCmd>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d807      	bhi.n	8000fde <SD_disk_initialize+0xae>
 8000fce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000fd2:	2069      	movs	r0, #105	; 0x69
 8000fd4:	f7ff ff57 	bl	8000e86 <SD_SendCmd>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d004      	beq.n	8000fe8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000fde:	4b45      	ldr	r3, [pc, #276]	; (80010f4 <SD_disk_initialize+0x1c4>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1ec      	bne.n	8000fc0 <SD_disk_initialize+0x90>
 8000fe6:	e000      	b.n	8000fea <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fe8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fea:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <SD_disk_initialize+0x1c4>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d062      	beq.n	80010b8 <SD_disk_initialize+0x188>
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	207a      	movs	r0, #122	; 0x7a
 8000ff6:	f7ff ff46 	bl	8000e86 <SD_SendCmd>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d15b      	bne.n	80010b8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	e00c      	b.n	8001020 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001006:	7bfc      	ldrb	r4, [r7, #15]
 8001008:	f7ff fe2e 	bl	8000c68 <SPI_RxByte>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	f104 0310 	add.w	r3, r4, #16
 8001014:	443b      	add	r3, r7
 8001016:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	3301      	adds	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	2b03      	cmp	r3, #3
 8001024:	d9ef      	bls.n	8001006 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001026:	7a3b      	ldrb	r3, [r7, #8]
 8001028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SD_disk_initialize+0x104>
 8001030:	230c      	movs	r3, #12
 8001032:	e000      	b.n	8001036 <SD_disk_initialize+0x106>
 8001034:	2304      	movs	r3, #4
 8001036:	73bb      	strb	r3, [r7, #14]
 8001038:	e03e      	b.n	80010b8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800103a:	2100      	movs	r1, #0
 800103c:	2077      	movs	r0, #119	; 0x77
 800103e:	f7ff ff22 	bl	8000e86 <SD_SendCmd>
 8001042:	4603      	mov	r3, r0
 8001044:	2b01      	cmp	r3, #1
 8001046:	d808      	bhi.n	800105a <SD_disk_initialize+0x12a>
 8001048:	2100      	movs	r1, #0
 800104a:	2069      	movs	r0, #105	; 0x69
 800104c:	f7ff ff1b 	bl	8000e86 <SD_SendCmd>
 8001050:	4603      	mov	r3, r0
 8001052:	2b01      	cmp	r3, #1
 8001054:	d801      	bhi.n	800105a <SD_disk_initialize+0x12a>
 8001056:	2302      	movs	r3, #2
 8001058:	e000      	b.n	800105c <SD_disk_initialize+0x12c>
 800105a:	2301      	movs	r3, #1
 800105c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800105e:	7bbb      	ldrb	r3, [r7, #14]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d10e      	bne.n	8001082 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001064:	2100      	movs	r1, #0
 8001066:	2077      	movs	r0, #119	; 0x77
 8001068:	f7ff ff0d 	bl	8000e86 <SD_SendCmd>
 800106c:	4603      	mov	r3, r0
 800106e:	2b01      	cmp	r3, #1
 8001070:	d80e      	bhi.n	8001090 <SD_disk_initialize+0x160>
 8001072:	2100      	movs	r1, #0
 8001074:	2069      	movs	r0, #105	; 0x69
 8001076:	f7ff ff06 	bl	8000e86 <SD_SendCmd>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d107      	bne.n	8001090 <SD_disk_initialize+0x160>
 8001080:	e00c      	b.n	800109c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001082:	2100      	movs	r1, #0
 8001084:	2041      	movs	r0, #65	; 0x41
 8001086:	f7ff fefe 	bl	8000e86 <SD_SendCmd>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d004      	beq.n	800109a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <SD_disk_initialize+0x1c4>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1e2      	bne.n	800105e <SD_disk_initialize+0x12e>
 8001098:	e000      	b.n	800109c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800109a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <SD_disk_initialize+0x1c4>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d007      	beq.n	80010b4 <SD_disk_initialize+0x184>
 80010a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a8:	2050      	movs	r0, #80	; 0x50
 80010aa:	f7ff feec 	bl	8000e86 <SD_SendCmd>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SD_disk_initialize+0x188>
 80010b4:	2300      	movs	r3, #0
 80010b6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80010b8:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <SD_disk_initialize+0x1c8>)
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80010be:	f7ff fd91 	bl	8000be4 <DESELECT>
	SPI_RxByte();
 80010c2:	f7ff fdd1 	bl	8000c68 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d008      	beq.n	80010de <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <SD_disk_initialize+0x1c0>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f023 0301 	bic.w	r3, r3, #1
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SD_disk_initialize+0x1c0>)
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e001      	b.n	80010e2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80010de:	f7ff fe49 	bl	8000d74 <SD_PowerOff>
	}

	return Stat;
 80010e2:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <SD_disk_initialize+0x1c0>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000090 	.word	0x20000090
 80010f8:	20000094 	.word	0x20000094

080010fc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SD_disk_status+0x14>
 800110c:	2301      	movs	r3, #1
 800110e:	e002      	b.n	8001116 <SD_disk_status+0x1a>
	return Stat;
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SD_disk_status+0x28>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b2db      	uxtb	r3, r3
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000000 	.word	0x20000000

08001128 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	4603      	mov	r3, r0
 8001136:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <SD_disk_read+0x1c>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <SD_disk_read+0x20>
 8001144:	2304      	movs	r3, #4
 8001146:	e051      	b.n	80011ec <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <SD_disk_read+0xcc>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SD_disk_read+0x32>
 8001156:	2303      	movs	r3, #3
 8001158:	e048      	b.n	80011ec <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800115a:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <SD_disk_read+0xd0>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	2b00      	cmp	r3, #0
 8001164:	d102      	bne.n	800116c <SD_disk_read+0x44>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	025b      	lsls	r3, r3, #9
 800116a:	607b      	str	r3, [r7, #4]

	SELECT();
 800116c:	f7ff fd2c 	bl	8000bc8 <SELECT>

	if (count == 1)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d111      	bne.n	800119a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	2051      	movs	r0, #81	; 0x51
 800117a:	f7ff fe84 	bl	8000e86 <SD_SendCmd>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d129      	bne.n	80011d8 <SD_disk_read+0xb0>
 8001184:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001188:	68b8      	ldr	r0, [r7, #8]
 800118a:	f7ff fe0b 	bl	8000da4 <SD_RxDataBlock>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d021      	beq.n	80011d8 <SD_disk_read+0xb0>
 8001194:	2300      	movs	r3, #0
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	e01e      	b.n	80011d8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	2052      	movs	r0, #82	; 0x52
 800119e:	f7ff fe72 	bl	8000e86 <SD_SendCmd>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d117      	bne.n	80011d8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80011a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ac:	68b8      	ldr	r0, [r7, #8]
 80011ae:	f7ff fdf9 	bl	8000da4 <SD_RxDataBlock>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00a      	beq.n	80011ce <SD_disk_read+0xa6>
				buff += 512;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011be:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1ed      	bne.n	80011a8 <SD_disk_read+0x80>
 80011cc:	e000      	b.n	80011d0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80011ce:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80011d0:	2100      	movs	r1, #0
 80011d2:	204c      	movs	r0, #76	; 0x4c
 80011d4:	f7ff fe57 	bl	8000e86 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80011d8:	f7ff fd04 	bl	8000be4 <DESELECT>
	SPI_RxByte();
 80011dc:	f7ff fd44 	bl	8000c68 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bf14      	ite	ne
 80011e6:	2301      	movne	r3, #1
 80011e8:	2300      	moveq	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000094 	.word	0x20000094

080011fc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <SD_disk_write+0x1c>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <SD_disk_write+0x20>
 8001218:	2304      	movs	r3, #4
 800121a:	e06b      	b.n	80012f4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800121c:	4b37      	ldr	r3, [pc, #220]	; (80012fc <SD_disk_write+0x100>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SD_disk_write+0x32>
 800122a:	2303      	movs	r3, #3
 800122c:	e062      	b.n	80012f4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <SD_disk_write+0x100>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SD_disk_write+0x44>
 800123c:	2302      	movs	r3, #2
 800123e:	e059      	b.n	80012f4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <SD_disk_write+0x104>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <SD_disk_write+0x56>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	025b      	lsls	r3, r3, #9
 8001250:	607b      	str	r3, [r7, #4]

	SELECT();
 8001252:	f7ff fcb9 	bl	8000bc8 <SELECT>

	if (count == 1)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d110      	bne.n	800127e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	2058      	movs	r0, #88	; 0x58
 8001260:	f7ff fe11 	bl	8000e86 <SD_SendCmd>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d13a      	bne.n	80012e0 <SD_disk_write+0xe4>
 800126a:	21fe      	movs	r1, #254	; 0xfe
 800126c:	68b8      	ldr	r0, [r7, #8]
 800126e:	f7ff fdc7 	bl	8000e00 <SD_TxDataBlock>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d033      	beq.n	80012e0 <SD_disk_write+0xe4>
			count = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	e030      	b.n	80012e0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <SD_disk_write+0x104>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d007      	beq.n	800129a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800128a:	2100      	movs	r1, #0
 800128c:	2077      	movs	r0, #119	; 0x77
 800128e:	f7ff fdfa 	bl	8000e86 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001292:	6839      	ldr	r1, [r7, #0]
 8001294:	2057      	movs	r0, #87	; 0x57
 8001296:	f7ff fdf6 	bl	8000e86 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	2059      	movs	r0, #89	; 0x59
 800129e:	f7ff fdf2 	bl	8000e86 <SD_SendCmd>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d11b      	bne.n	80012e0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012a8:	21fc      	movs	r1, #252	; 0xfc
 80012aa:	68b8      	ldr	r0, [r7, #8]
 80012ac:	f7ff fda8 	bl	8000e00 <SD_TxDataBlock>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00a      	beq.n	80012cc <SD_disk_write+0xd0>
				buff += 512;
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012bc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1ee      	bne.n	80012a8 <SD_disk_write+0xac>
 80012ca:	e000      	b.n	80012ce <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012cc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80012ce:	21fd      	movs	r1, #253	; 0xfd
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff fd95 	bl	8000e00 <SD_TxDataBlock>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <SD_disk_write+0xe4>
			{
				count = 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80012e0:	f7ff fc80 	bl	8000be4 <DESELECT>
	SPI_RxByte();
 80012e4:	f7ff fcc0 	bl	8000c68 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bf14      	ite	ne
 80012ee:	2301      	movne	r3, #1
 80012f0:	2300      	moveq	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000094 	.word	0x20000094

08001304 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b08b      	sub	sp, #44	; 0x2c
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	603a      	str	r2, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
 8001310:	460b      	mov	r3, r1
 8001312:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SD_disk_ioctl+0x1e>
 800131e:	2304      	movs	r3, #4
 8001320:	e115      	b.n	800154e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001328:	79bb      	ldrb	r3, [r7, #6]
 800132a:	2b05      	cmp	r3, #5
 800132c:	d124      	bne.n	8001378 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d012      	beq.n	800135c <SD_disk_ioctl+0x58>
 8001336:	2b02      	cmp	r3, #2
 8001338:	dc1a      	bgt.n	8001370 <SD_disk_ioctl+0x6c>
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <SD_disk_ioctl+0x40>
 800133e:	2b01      	cmp	r3, #1
 8001340:	d006      	beq.n	8001350 <SD_disk_ioctl+0x4c>
 8001342:	e015      	b.n	8001370 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001344:	f7ff fd16 	bl	8000d74 <SD_PowerOff>
			res = RES_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800134e:	e0fc      	b.n	800154a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001350:	f7ff fcce 	bl	8000cf0 <SD_PowerOn>
			res = RES_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800135a:	e0f6      	b.n	800154a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	1c5c      	adds	r4, r3, #1
 8001360:	f7ff fd14 	bl	8000d8c <SD_CheckPower>
 8001364:	4603      	mov	r3, r0
 8001366:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800136e:	e0ec      	b.n	800154a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001370:	2304      	movs	r3, #4
 8001372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001376:	e0e8      	b.n	800154a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001378:	4b77      	ldr	r3, [pc, #476]	; (8001558 <SD_disk_ioctl+0x254>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SD_disk_ioctl+0x86>
 8001386:	2303      	movs	r3, #3
 8001388:	e0e1      	b.n	800154e <SD_disk_ioctl+0x24a>

		SELECT();
 800138a:	f7ff fc1d 	bl	8000bc8 <SELECT>

		switch (ctrl)
 800138e:	79bb      	ldrb	r3, [r7, #6]
 8001390:	2b0d      	cmp	r3, #13
 8001392:	f200 80cb 	bhi.w	800152c <SD_disk_ioctl+0x228>
 8001396:	a201      	add	r2, pc, #4	; (adr r2, 800139c <SD_disk_ioctl+0x98>)
 8001398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139c:	08001497 	.word	0x08001497
 80013a0:	080013d5 	.word	0x080013d5
 80013a4:	08001487 	.word	0x08001487
 80013a8:	0800152d 	.word	0x0800152d
 80013ac:	0800152d 	.word	0x0800152d
 80013b0:	0800152d 	.word	0x0800152d
 80013b4:	0800152d 	.word	0x0800152d
 80013b8:	0800152d 	.word	0x0800152d
 80013bc:	0800152d 	.word	0x0800152d
 80013c0:	0800152d 	.word	0x0800152d
 80013c4:	0800152d 	.word	0x0800152d
 80013c8:	080014a9 	.word	0x080014a9
 80013cc:	080014cd 	.word	0x080014cd
 80013d0:	080014f1 	.word	0x080014f1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013d4:	2100      	movs	r1, #0
 80013d6:	2049      	movs	r0, #73	; 0x49
 80013d8:	f7ff fd55 	bl	8000e86 <SD_SendCmd>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 80a8 	bne.w	8001534 <SD_disk_ioctl+0x230>
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2110      	movs	r1, #16
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fcda 	bl	8000da4 <SD_RxDataBlock>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 809e 	beq.w	8001534 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80013f8:	7b3b      	ldrb	r3, [r7, #12]
 80013fa:	099b      	lsrs	r3, r3, #6
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d10e      	bne.n	8001420 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001402:	7d7b      	ldrb	r3, [r7, #21]
 8001404:	b29a      	uxth	r2, r3
 8001406:	7d3b      	ldrb	r3, [r7, #20]
 8001408:	b29b      	uxth	r3, r3
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	b29b      	uxth	r3, r3
 800140e:	4413      	add	r3, r2
 8001410:	b29b      	uxth	r3, r3
 8001412:	3301      	adds	r3, #1
 8001414:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001416:	8bfb      	ldrh	r3, [r7, #30]
 8001418:	029a      	lsls	r2, r3, #10
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e02e      	b.n	800147e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001420:	7c7b      	ldrb	r3, [r7, #17]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	b2da      	uxtb	r2, r3
 8001428:	7dbb      	ldrb	r3, [r7, #22]
 800142a:	09db      	lsrs	r3, r3, #7
 800142c:	b2db      	uxtb	r3, r3
 800142e:	4413      	add	r3, r2
 8001430:	b2da      	uxtb	r2, r3
 8001432:	7d7b      	ldrb	r3, [r7, #21]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	f003 0306 	and.w	r3, r3, #6
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4413      	add	r3, r2
 8001440:	b2db      	uxtb	r3, r3
 8001442:	3302      	adds	r3, #2
 8001444:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001448:	7d3b      	ldrb	r3, [r7, #20]
 800144a:	099b      	lsrs	r3, r3, #6
 800144c:	b2db      	uxtb	r3, r3
 800144e:	b29a      	uxth	r2, r3
 8001450:	7cfb      	ldrb	r3, [r7, #19]
 8001452:	b29b      	uxth	r3, r3
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	b29b      	uxth	r3, r3
 8001458:	4413      	add	r3, r2
 800145a:	b29a      	uxth	r2, r3
 800145c:	7cbb      	ldrb	r3, [r7, #18]
 800145e:	029b      	lsls	r3, r3, #10
 8001460:	b29b      	uxth	r3, r3
 8001462:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001466:	b29b      	uxth	r3, r3
 8001468:	4413      	add	r3, r2
 800146a:	b29b      	uxth	r3, r3
 800146c:	3301      	adds	r3, #1
 800146e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001470:	8bfa      	ldrh	r2, [r7, #30]
 8001472:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001476:	3b09      	subs	r3, #9
 8001478:	409a      	lsls	r2, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001484:	e056      	b.n	8001534 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001494:	e055      	b.n	8001542 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001496:	f7ff fc11 	bl	8000cbc <SD_ReadyWait>
 800149a:	4603      	mov	r3, r0
 800149c:	2bff      	cmp	r3, #255	; 0xff
 800149e:	d14b      	bne.n	8001538 <SD_disk_ioctl+0x234>
 80014a0:	2300      	movs	r3, #0
 80014a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014a6:	e047      	b.n	8001538 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014a8:	2100      	movs	r1, #0
 80014aa:	2049      	movs	r0, #73	; 0x49
 80014ac:	f7ff fceb 	bl	8000e86 <SD_SendCmd>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d142      	bne.n	800153c <SD_disk_ioctl+0x238>
 80014b6:	2110      	movs	r1, #16
 80014b8:	6a38      	ldr	r0, [r7, #32]
 80014ba:	f7ff fc73 	bl	8000da4 <SD_RxDataBlock>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d03b      	beq.n	800153c <SD_disk_ioctl+0x238>
 80014c4:	2300      	movs	r3, #0
 80014c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014ca:	e037      	b.n	800153c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014cc:	2100      	movs	r1, #0
 80014ce:	204a      	movs	r0, #74	; 0x4a
 80014d0:	f7ff fcd9 	bl	8000e86 <SD_SendCmd>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d132      	bne.n	8001540 <SD_disk_ioctl+0x23c>
 80014da:	2110      	movs	r1, #16
 80014dc:	6a38      	ldr	r0, [r7, #32]
 80014de:	f7ff fc61 	bl	8000da4 <SD_RxDataBlock>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d02b      	beq.n	8001540 <SD_disk_ioctl+0x23c>
 80014e8:	2300      	movs	r3, #0
 80014ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014ee:	e027      	b.n	8001540 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80014f0:	2100      	movs	r1, #0
 80014f2:	207a      	movs	r0, #122	; 0x7a
 80014f4:	f7ff fcc7 	bl	8000e86 <SD_SendCmd>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d116      	bne.n	800152c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80014fe:	2300      	movs	r3, #0
 8001500:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001504:	e00b      	b.n	800151e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001506:	6a3c      	ldr	r4, [r7, #32]
 8001508:	1c63      	adds	r3, r4, #1
 800150a:	623b      	str	r3, [r7, #32]
 800150c:	f7ff fbac 	bl	8000c68 <SPI_RxByte>
 8001510:	4603      	mov	r3, r0
 8001512:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001514:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001518:	3301      	adds	r3, #1
 800151a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800151e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001522:	2b03      	cmp	r3, #3
 8001524:	d9ef      	bls.n	8001506 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800152c:	2304      	movs	r3, #4
 800152e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001532:	e006      	b.n	8001542 <SD_disk_ioctl+0x23e>
			break;
 8001534:	bf00      	nop
 8001536:	e004      	b.n	8001542 <SD_disk_ioctl+0x23e>
			break;
 8001538:	bf00      	nop
 800153a:	e002      	b.n	8001542 <SD_disk_ioctl+0x23e>
			break;
 800153c:	bf00      	nop
 800153e:	e000      	b.n	8001542 <SD_disk_ioctl+0x23e>
			break;
 8001540:	bf00      	nop
		}

		DESELECT();
 8001542:	f7ff fb4f 	bl	8000be4 <DESELECT>
		SPI_RxByte();
 8001546:	f7ff fb8f 	bl	8000c68 <SPI_RxByte>
	}

	return res;
 800154a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800154e:	4618      	mov	r0, r3
 8001550:	372c      	adds	r7, #44	; 0x2c
 8001552:	46bd      	mov	sp, r7
 8001554:	bd90      	pop	{r4, r7, pc}
 8001556:	bf00      	nop
 8001558:	20000000 	.word	0x20000000

0800155c <send_uart>:
FATFS *pfs;
DWORD fre_clust;
uint32_t totalSpace, freeSpace;


void send_uart(char *string){
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7fe fe53 	bl	8000210 <strlen>
 800156a:	4603      	mov	r3, r0
 800156c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *)string, len, 2000);
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	b29a      	uxth	r2, r3
 8001572:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <send_uart+0x2c>)
 800157a:	f002 f928 	bl	80037ce <HAL_UART_Transmit>
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200000f0 	.word	0x200000f0

0800158c <bufclear>:
int bufsize(char *buf){
	int i = 0;
	while (*buf++ != '\0') i++;
	return i;
}
void bufclear(void){
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
	for(int i = 0; i<1024; i++ ){
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	e007      	b.n	80015a8 <bufclear+0x1c>
		buffer[i] = '\0';
 8001598:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <bufclear+0x34>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<1024; i++ ){
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3301      	adds	r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ae:	dbf3      	blt.n	8001598 <bufclear+0xc>
	}
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	200021a0 	.word	0x200021a0

080015c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ca:	f000 fb6f 	bl	8001cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ce:	f000 f8d9 	bl	8001784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d2:	f000 f9a5 	bl	8001920 <MX_GPIO_Init>
  MX_SPI1_Init();
 80015d6:	f000 f943 	bl	8001860 <MX_SPI1_Init>
  MX_FATFS_Init();
 80015da:	f002 fc6d 	bl	8003eb8 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 80015de:	f000 f975 	bl	80018cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  fres = f_mount(&fs, "", 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	4954      	ldr	r1, [pc, #336]	; (8001738 <main+0x174>)
 80015e6:	4855      	ldr	r0, [pc, #340]	; (800173c <main+0x178>)
 80015e8:	f004 feae 	bl	8006348 <f_mount>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b53      	ldr	r3, [pc, #332]	; (8001740 <main+0x17c>)
 80015f2:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) send_uart ("error in mounting SD Card...\n");
 80015f4:	4b52      	ldr	r3, [pc, #328]	; (8001740 <main+0x17c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <main+0x40>
 80015fc:	4851      	ldr	r0, [pc, #324]	; (8001744 <main+0x180>)
 80015fe:	f7ff ffad 	bl	800155c <send_uart>
 8001602:	e002      	b.n	800160a <main+0x46>
  else send_uart("SD Card mounted successfully...");
 8001604:	4850      	ldr	r0, [pc, #320]	; (8001748 <main+0x184>)
 8001606:	f7ff ffa9 	bl	800155c <send_uart>

  f_getfree("", &fre_clust, &pfs);
 800160a:	4a50      	ldr	r2, [pc, #320]	; (800174c <main+0x188>)
 800160c:	4950      	ldr	r1, [pc, #320]	; (8001750 <main+0x18c>)
 800160e:	484a      	ldr	r0, [pc, #296]	; (8001738 <main+0x174>)
 8001610:	f005 fc47 	bl	8006ea2 <f_getfree>

  totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001614:	4b4d      	ldr	r3, [pc, #308]	; (800174c <main+0x188>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	3b02      	subs	r3, #2
 800161c:	4a4b      	ldr	r2, [pc, #300]	; (800174c <main+0x188>)
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	8952      	ldrh	r2, [r2, #10]
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff f8b6 	bl	8000798 <__aeabi_ui2d>
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	4b48      	ldr	r3, [pc, #288]	; (8001754 <main+0x190>)
 8001632:	f7fe fe45 	bl	80002c0 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff f925 	bl	800088c <__aeabi_d2uiz>
 8001642:	4603      	mov	r3, r0
 8001644:	4a44      	ldr	r2, [pc, #272]	; (8001758 <main+0x194>)
 8001646:	6013      	str	r3, [r2, #0]
  sprintf (buffer, "SD CARD Total Size: \t%lu\n", totalSpace);
 8001648:	4b43      	ldr	r3, [pc, #268]	; (8001758 <main+0x194>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4943      	ldr	r1, [pc, #268]	; (800175c <main+0x198>)
 8001650:	4843      	ldr	r0, [pc, #268]	; (8001760 <main+0x19c>)
 8001652:	f005 ff81 	bl	8007558 <siprintf>
  send_uart(buffer);
 8001656:	4842      	ldr	r0, [pc, #264]	; (8001760 <main+0x19c>)
 8001658:	f7ff ff80 	bl	800155c <send_uart>
  bufclear();
 800165c:	f7ff ff96 	bl	800158c <bufclear>
  freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001660:	4b3a      	ldr	r3, [pc, #232]	; (800174c <main+0x188>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	895b      	ldrh	r3, [r3, #10]
 8001666:	461a      	mov	r2, r3
 8001668:	4b39      	ldr	r3, [pc, #228]	; (8001750 <main+0x18c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	fb02 f303 	mul.w	r3, r2, r3
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff f891 	bl	8000798 <__aeabi_ui2d>
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	4b36      	ldr	r3, [pc, #216]	; (8001754 <main+0x190>)
 800167c:	f7fe fe20 	bl	80002c0 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff f900 	bl	800088c <__aeabi_d2uiz>
 800168c:	4603      	mov	r3, r0
 800168e:	4a35      	ldr	r2, [pc, #212]	; (8001764 <main+0x1a0>)
 8001690:	6013      	str	r3, [r2, #0]
  sprintf (buffer, "SD CARD Free Space: \t%lu\n",freeSpace);
 8001692:	4b34      	ldr	r3, [pc, #208]	; (8001764 <main+0x1a0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	4933      	ldr	r1, [pc, #204]	; (8001768 <main+0x1a4>)
 800169a:	4831      	ldr	r0, [pc, #196]	; (8001760 <main+0x19c>)
 800169c:	f005 ff5c 	bl	8007558 <siprintf>
  send_uart(buffer);
 80016a0:	482f      	ldr	r0, [pc, #188]	; (8001760 <main+0x19c>)
 80016a2:	f7ff ff5b 	bl	800155c <send_uart>

  //Open file to write/create a file it doesn't exist
  fres = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80016a6:	2213      	movs	r2, #19
 80016a8:	4930      	ldr	r1, [pc, #192]	; (800176c <main+0x1a8>)
 80016aa:	4831      	ldr	r0, [pc, #196]	; (8001770 <main+0x1ac>)
 80016ac:	f004 fe92 	bl	80063d4 <f_open>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <main+0x17c>)
 80016b6:	701a      	strb	r2, [r3, #0]

  // Writing text
  fres = f_puts("This data is from the First FILE\n\n", &fil);
 80016b8:	492d      	ldr	r1, [pc, #180]	; (8001770 <main+0x1ac>)
 80016ba:	482e      	ldr	r0, [pc, #184]	; (8001774 <main+0x1b0>)
 80016bc:	f005 fd5a 	bl	8007174 <f_puts>
 80016c0:	4603      	mov	r3, r0
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <main+0x17c>)
 80016c6:	701a      	strb	r2, [r3, #0]

  send_uart ("File1.txt created and the data is written \n");
 80016c8:	482b      	ldr	r0, [pc, #172]	; (8001778 <main+0x1b4>)
 80016ca:	f7ff ff47 	bl	800155c <send_uart>

  //Close file
  fres = f_close(&fil);
 80016ce:	4828      	ldr	r0, [pc, #160]	; (8001770 <main+0x1ac>)
 80016d0:	f005 fbbd 	bl	8006e4e <f_close>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <main+0x17c>)
 80016da:	701a      	strb	r2, [r3, #0]

 //Open file to read
  fres = f_open(&fil, "file1.txt", FA_READ);
 80016dc:	2201      	movs	r2, #1
 80016de:	4923      	ldr	r1, [pc, #140]	; (800176c <main+0x1a8>)
 80016e0:	4823      	ldr	r0, [pc, #140]	; (8001770 <main+0x1ac>)
 80016e2:	f004 fe77 	bl	80063d4 <f_open>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <main+0x17c>)
 80016ec:	701a      	strb	r2, [r3, #0]

  //Read string from the file
  f_gets(buffer, sizeof(buffer), &fil);
 80016ee:	4a20      	ldr	r2, [pc, #128]	; (8001770 <main+0x1ac>)
 80016f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016f4:	481a      	ldr	r0, [pc, #104]	; (8001760 <main+0x19c>)
 80016f6:	f005 fc89 	bl	800700c <f_gets>

  send_uart(buffer);
 80016fa:	4819      	ldr	r0, [pc, #100]	; (8001760 <main+0x19c>)
 80016fc:	f7ff ff2e 	bl	800155c <send_uart>

  //Close file
  f_close(&fil);
 8001700:	481b      	ldr	r0, [pc, #108]	; (8001770 <main+0x1ac>)
 8001702:	f005 fba4 	bl	8006e4e <f_close>

  bufclear();
 8001706:	f7ff ff41 	bl	800158c <bufclear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  strcpy((char*)data,"Hello!\r\n");
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	4a1b      	ldr	r2, [pc, #108]	; (800177c <main+0x1b8>)
 800170e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001710:	c303      	stmia	r3!, {r0, r1}
 8001712:	701a      	strb	r2, [r3, #0]

	  HAL_UART_Transmit(&huart2, data, strlen((char*)data), HAL_MAX_DELAY);
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fd7a 	bl	8000210 <strlen>
 800171c:	4603      	mov	r3, r0
 800171e:	b29a      	uxth	r2, r3
 8001720:	1d39      	adds	r1, r7, #4
 8001722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001726:	4816      	ldr	r0, [pc, #88]	; (8001780 <main+0x1bc>)
 8001728:	f002 f851 	bl	80037ce <HAL_UART_Transmit>
	  HAL_Delay(300);
 800172c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001730:	f000 fb2e 	bl	8001d90 <HAL_Delay>
	  strcpy((char*)data,"Hello!\r\n");
 8001734:	e7e9      	b.n	800170a <main+0x146>
 8001736:	bf00      	nop
 8001738:	08007d60 	.word	0x08007d60
 800173c:	20000134 	.word	0x20000134
 8001740:	2000219c 	.word	0x2000219c
 8001744:	08007d64 	.word	0x08007d64
 8001748:	08007d84 	.word	0x08007d84
 800174c:	200025a0 	.word	0x200025a0
 8001750:	200025a4 	.word	0x200025a4
 8001754:	3fe00000 	.word	0x3fe00000
 8001758:	200025a8 	.word	0x200025a8
 800175c:	08007da4 	.word	0x08007da4
 8001760:	200021a0 	.word	0x200021a0
 8001764:	200025ac 	.word	0x200025ac
 8001768:	08007dc0 	.word	0x08007dc0
 800176c:	08007ddc 	.word	0x08007ddc
 8001770:	2000116c 	.word	0x2000116c
 8001774:	08007de8 	.word	0x08007de8
 8001778:	08007e0c 	.word	0x08007e0c
 800177c:	08007e38 	.word	0x08007e38
 8001780:	200000f0 	.word	0x200000f0

08001784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b094      	sub	sp, #80	; 0x50
 8001788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	2234      	movs	r2, #52	; 0x34
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f005 ff00 	bl	8007598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <SystemClock_Config+0xd4>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	4a29      	ldr	r2, [pc, #164]	; (8001858 <SystemClock_Config+0xd4>)
 80017b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b6:	6413      	str	r3, [r2, #64]	; 0x40
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <SystemClock_Config+0xd4>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017c4:	2300      	movs	r3, #0
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <SystemClock_Config+0xd8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017d0:	4a22      	ldr	r2, [pc, #136]	; (800185c <SystemClock_Config+0xd8>)
 80017d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b20      	ldr	r3, [pc, #128]	; (800185c <SystemClock_Config+0xd8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e4:	2301      	movs	r3, #1
 80017e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ee:	2302      	movs	r3, #2
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017f8:	2304      	movs	r3, #4
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80017fc:	2350      	movs	r3, #80	; 0x50
 80017fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001800:	2302      	movs	r3, #2
 8001802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001804:	2302      	movs	r3, #2
 8001806:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001808:	2302      	movs	r3, #2
 800180a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4618      	mov	r0, r3
 8001812:	f001 f8bf 	bl	8002994 <HAL_RCC_OscConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800181c:	f000 f8d0 	bl	80019c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001820:	230f      	movs	r3, #15
 8001822:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001824:	2302      	movs	r3, #2
 8001826:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800182c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001830:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001836:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001838:	f107 0308 	add.w	r3, r7, #8
 800183c:	2102      	movs	r1, #2
 800183e:	4618      	mov	r0, r3
 8001840:	f000 fd5e 	bl	8002300 <HAL_RCC_ClockConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800184a:	f000 f8b9 	bl	80019c0 <Error_Handler>
  }
}
 800184e:	bf00      	nop
 8001850:	3750      	adds	r7, #80	; 0x50
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800
 800185c:	40007000 	.word	0x40007000

08001860 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001866:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <MX_SPI1_Init+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <MX_SPI1_Init+0x64>)
 800186c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001872:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_SPI1_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_SPI1_Init+0x64>)
 800188c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001890:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_SPI1_Init+0x64>)
 8001894:	2210      	movs	r2, #16
 8001896:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <MX_SPI1_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_SPI1_Init+0x64>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <MX_SPI1_Init+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_SPI1_Init+0x64>)
 80018ac:	220a      	movs	r2, #10
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_SPI1_Init+0x64>)
 80018b2:	f001 fb0d 	bl	8002ed0 <HAL_SPI_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018bc:	f000 f880 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000098 	.word	0x20000098
 80018c8:	40013000 	.word	0x40013000

080018cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <MX_USART2_UART_Init+0x50>)
 80018d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 80018d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 80018f2:	220c      	movs	r2, #12
 80018f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <MX_USART2_UART_Init+0x4c>)
 8001904:	f001 ff16 	bl	8003734 <HAL_UART_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800190e:	f000 f857 	bl	80019c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200000f0 	.word	0x200000f0
 800191c:	40004400 	.word	0x40004400

08001920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <MX_GPIO_Init+0x98>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a1e      	ldr	r2, [pc, #120]	; (80019b8 <MX_GPIO_Init+0x98>)
 8001940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <MX_GPIO_Init+0x98>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <MX_GPIO_Init+0x98>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <MX_GPIO_Init+0x98>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <MX_GPIO_Init+0x98>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_GPIO_Init+0x98>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <MX_GPIO_Init+0x98>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_GPIO_Init+0x98>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800198a:	2201      	movs	r2, #1
 800198c:	2110      	movs	r1, #16
 800198e:	480b      	ldr	r0, [pc, #44]	; (80019bc <MX_GPIO_Init+0x9c>)
 8001990:	f000 fc9c 	bl	80022cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001994:	2310      	movs	r3, #16
 8001996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80019a0:	2301      	movs	r3, #1
 80019a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	4619      	mov	r1, r3
 80019aa:	4804      	ldr	r0, [pc, #16]	; (80019bc <MX_GPIO_Init+0x9c>)
 80019ac:	f000 fafa 	bl	8001fa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019b0:	bf00      	nop
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020800 	.word	0x40020800

080019c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c4:	b672      	cpsid	i
}
 80019c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <Error_Handler+0x8>
	...

080019cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_MspInit+0x4c>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <HAL_MspInit+0x4c>)
 80019dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e0:	6453      	str	r3, [r2, #68]	; 0x44
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_MspInit+0x4c>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_MspInit+0x4c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_MspInit+0x4c>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_MspInit+0x4c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800

08001a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <HAL_SPI_MspInit+0x84>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d12b      	bne.n	8001a96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_SPI_MspInit+0x88>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a76:	23e0      	movs	r3, #224	; 0xe0
 8001a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a86:	2305      	movs	r3, #5
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <HAL_SPI_MspInit+0x8c>)
 8001a92:	f000 fa87 	bl	8001fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	; 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40013000 	.word	0x40013000
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000

08001aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a19      	ldr	r2, [pc, #100]	; (8001b30 <HAL_UART_MspInit+0x84>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d12b      	bne.n	8001b26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a17      	ldr	r2, [pc, #92]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_UART_MspInit+0x88>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b06:	230c      	movs	r3, #12
 8001b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b16:	2307      	movs	r3, #7
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <HAL_UART_MspInit+0x8c>)
 8001b22:	f000 fa3f 	bl	8001fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3728      	adds	r7, #40	; 0x28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40004400 	.word	0x40004400
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020000 	.word	0x40020000

08001b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <HardFault_Handler+0x4>

08001b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b54:	e7fe      	b.n	8001b54 <MemManage_Handler+0x4>

08001b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <BusFault_Handler+0x4>

08001b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <UsageFault_Handler+0x4>

08001b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <SysTick_Handler+0x34>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <SysTick_Handler+0x18>
		Timer1--;
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <SysTick_Handler+0x34>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <SysTick_Handler+0x34>)
 8001ba2:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <SysTick_Handler+0x38>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <SysTick_Handler+0x2c>
		Timer2--;
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <SysTick_Handler+0x38>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <SysTick_Handler+0x38>)
 8001bb6:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb8:	f000 f8ca 	bl	8001d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000090 	.word	0x20000090
 8001bc4:	20000092 	.word	0x20000092

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <_sbrk+0x5c>)
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <_sbrk+0x60>)
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <_sbrk+0x64>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <_sbrk+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d207      	bcs.n	8001c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf8:	f005 fce6 	bl	80075c8 <__errno>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	220c      	movs	r2, #12
 8001c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c06:	e009      	b.n	8001c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <_sbrk+0x64>)
 8001c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20020000 	.word	0x20020000
 8001c28:	00000400 	.word	0x00000400
 8001c2c:	200025b0 	.word	0x200025b0
 8001c30:	20002940 	.word	0x20002940

08001c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <SystemInit+0x20>)
 8001c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <SystemInit+0x20>)
 8001c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c5c:	480d      	ldr	r0, [pc, #52]	; (8001c94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c5e:	490e      	ldr	r1, [pc, #56]	; (8001c98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c60:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c64:	e002      	b.n	8001c6c <LoopCopyDataInit>

08001c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6a:	3304      	adds	r3, #4

08001c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c70:	d3f9      	bcc.n	8001c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c72:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c74:	4c0b      	ldr	r4, [pc, #44]	; (8001ca4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c78:	e001      	b.n	8001c7e <LoopFillZerobss>

08001c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c7c:	3204      	adds	r2, #4

08001c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c80:	d3fb      	bcc.n	8001c7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c82:	f7ff ffd7 	bl	8001c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c86:	f005 fca5 	bl	80075d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8a:	f7ff fc9b 	bl	80015c4 <main>
  bx  lr    
 8001c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c98:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c9c:	08008328 	.word	0x08008328
  ldr r2, =_sbss
 8001ca0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ca4:	2000293c 	.word	0x2000293c

08001ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca8:	e7fe      	b.n	8001ca8 <ADC_IRQHandler>
	...

08001cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_Init+0x40>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <HAL_Init+0x40>)
 8001cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <HAL_Init+0x40>)
 8001cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a07      	ldr	r2, [pc, #28]	; (8001cec <HAL_Init+0x40>)
 8001cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd4:	2003      	movs	r0, #3
 8001cd6:	f000 f931 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cda:	200f      	movs	r0, #15
 8001cdc:	f000 f808 	bl	8001cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce0:	f7ff fe74 	bl	80019cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023c00 	.word	0x40023c00

08001cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_InitTick+0x54>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_InitTick+0x58>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4619      	mov	r1, r3
 8001d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f93b 	bl	8001f8a <HAL_SYSTICK_Config>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00e      	b.n	8001d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b0f      	cmp	r3, #15
 8001d22:	d80a      	bhi.n	8001d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d24:	2200      	movs	r2, #0
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d2c:	f000 f911 	bl	8001f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d30:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <HAL_InitTick+0x5c>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e000      	b.n	8001d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000004 	.word	0x20000004
 8001d48:	2000000c 	.word	0x2000000c
 8001d4c:	20000008 	.word	0x20000008

08001d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_IncTick+0x20>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_IncTick+0x24>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <HAL_IncTick+0x24>)
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	2000000c 	.word	0x2000000c
 8001d74:	200025b4 	.word	0x200025b4

08001d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_GetTick+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	200025b4 	.word	0x200025b4

08001d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d98:	f7ff ffee 	bl	8001d78 <HAL_GetTick>
 8001d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da8:	d005      	beq.n	8001db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_Delay+0x44>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4413      	add	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001db6:	bf00      	nop
 8001db8:	f7ff ffde 	bl	8001d78 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d8f7      	bhi.n	8001db8 <HAL_Delay+0x28>
  {
  }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2000000c 	.word	0x2000000c

08001dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df4:	4013      	ands	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0a:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	60d3      	str	r3, [r2, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <__NVIC_GetPriorityGrouping+0x18>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	f003 0307 	and.w	r3, r3, #7
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	; (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	; (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f08:	d301      	bcc.n	8001f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00f      	b.n	8001f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <SysTick_Config+0x40>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f16:	210f      	movs	r1, #15
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f1c:	f7ff ff8e 	bl	8001e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <SysTick_Config+0x40>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SysTick_Config+0x40>)
 8001f28:	2207      	movs	r2, #7
 8001f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff47 	bl	8001dd8 <__NVIC_SetPriorityGrouping>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f64:	f7ff ff5c 	bl	8001e20 <__NVIC_GetPriorityGrouping>
 8001f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f7ff ff8e 	bl	8001e90 <NVIC_EncodePriority>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff5d 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f82:	bf00      	nop
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffb0 	bl	8001ef8 <SysTick_Config>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	e165      	b.n	800228c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	f040 8154 	bne.w	8002286 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d005      	beq.n	8001ff6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d130      	bne.n	8002058 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2203      	movs	r2, #3
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800202c:	2201      	movs	r2, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 0201 	and.w	r2, r3, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b03      	cmp	r3, #3
 8002062:	d017      	beq.n	8002094 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2203      	movs	r2, #3
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d123      	bne.n	80020e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	08da      	lsrs	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3208      	adds	r2, #8
 80020a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	08da      	lsrs	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3208      	adds	r2, #8
 80020e2:	69b9      	ldr	r1, [r7, #24]
 80020e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0203 	and.w	r2, r3, #3
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80ae 	beq.w	8002286 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b5d      	ldr	r3, [pc, #372]	; (80022a4 <HAL_GPIO_Init+0x300>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a5c      	ldr	r2, [pc, #368]	; (80022a4 <HAL_GPIO_Init+0x300>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b5a      	ldr	r3, [pc, #360]	; (80022a4 <HAL_GPIO_Init+0x300>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002146:	4a58      	ldr	r2, [pc, #352]	; (80022a8 <HAL_GPIO_Init+0x304>)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	220f      	movs	r2, #15
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4f      	ldr	r2, [pc, #316]	; (80022ac <HAL_GPIO_Init+0x308>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d025      	beq.n	80021be <HAL_GPIO_Init+0x21a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4e      	ldr	r2, [pc, #312]	; (80022b0 <HAL_GPIO_Init+0x30c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <HAL_GPIO_Init+0x216>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4d      	ldr	r2, [pc, #308]	; (80022b4 <HAL_GPIO_Init+0x310>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d019      	beq.n	80021b6 <HAL_GPIO_Init+0x212>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4c      	ldr	r2, [pc, #304]	; (80022b8 <HAL_GPIO_Init+0x314>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x20e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4b      	ldr	r2, [pc, #300]	; (80022bc <HAL_GPIO_Init+0x318>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_GPIO_Init+0x20a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4a      	ldr	r2, [pc, #296]	; (80022c0 <HAL_GPIO_Init+0x31c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x206>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a49      	ldr	r2, [pc, #292]	; (80022c4 <HAL_GPIO_Init+0x320>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_GPIO_Init+0x202>
 80021a2:	2306      	movs	r3, #6
 80021a4:	e00c      	b.n	80021c0 <HAL_GPIO_Init+0x21c>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00a      	b.n	80021c0 <HAL_GPIO_Init+0x21c>
 80021aa:	2305      	movs	r3, #5
 80021ac:	e008      	b.n	80021c0 <HAL_GPIO_Init+0x21c>
 80021ae:	2304      	movs	r3, #4
 80021b0:	e006      	b.n	80021c0 <HAL_GPIO_Init+0x21c>
 80021b2:	2303      	movs	r3, #3
 80021b4:	e004      	b.n	80021c0 <HAL_GPIO_Init+0x21c>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e002      	b.n	80021c0 <HAL_GPIO_Init+0x21c>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_GPIO_Init+0x21c>
 80021be:	2300      	movs	r3, #0
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	f002 0203 	and.w	r2, r2, #3
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	4093      	lsls	r3, r2
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d0:	4935      	ldr	r1, [pc, #212]	; (80022a8 <HAL_GPIO_Init+0x304>)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021de:	4b3a      	ldr	r3, [pc, #232]	; (80022c8 <HAL_GPIO_Init+0x324>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002202:	4a31      	ldr	r2, [pc, #196]	; (80022c8 <HAL_GPIO_Init+0x324>)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002208:	4b2f      	ldr	r3, [pc, #188]	; (80022c8 <HAL_GPIO_Init+0x324>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800222c:	4a26      	ldr	r2, [pc, #152]	; (80022c8 <HAL_GPIO_Init+0x324>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002232:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <HAL_GPIO_Init+0x324>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002256:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <HAL_GPIO_Init+0x324>)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_GPIO_Init+0x324>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002280:	4a11      	ldr	r2, [pc, #68]	; (80022c8 <HAL_GPIO_Init+0x324>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3301      	adds	r3, #1
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	2b0f      	cmp	r3, #15
 8002290:	f67f ae96 	bls.w	8001fc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3724      	adds	r7, #36	; 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40013800 	.word	0x40013800
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40020400 	.word	0x40020400
 80022b4:	40020800 	.word	0x40020800
 80022b8:	40020c00 	.word	0x40020c00
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40021400 	.word	0x40021400
 80022c4:	40021800 	.word	0x40021800
 80022c8:	40013c00 	.word	0x40013c00

080022cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
 80022d8:	4613      	mov	r3, r2
 80022da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022dc:	787b      	ldrb	r3, [r7, #1]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022e8:	e003      	b.n	80022f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ea:	887b      	ldrh	r3, [r7, #2]
 80022ec:	041a      	lsls	r2, r3, #16
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	619a      	str	r2, [r3, #24]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0cc      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b68      	ldr	r3, [pc, #416]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d90c      	bls.n	800233c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b65      	ldr	r3, [pc, #404]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0b8      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002354:	4b59      	ldr	r3, [pc, #356]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a58      	ldr	r2, [pc, #352]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800235e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800236c:	4b53      	ldr	r3, [pc, #332]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a52      	ldr	r2, [pc, #328]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	494d      	ldr	r1, [pc, #308]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d044      	beq.n	8002420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d119      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e07f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d003      	beq.n	80023be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	4b3f      	ldr	r3, [pc, #252]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e06f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e067      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023de:	4b37      	ldr	r3, [pc, #220]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f023 0203 	bic.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4934      	ldr	r1, [pc, #208]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7ff fcc2 	bl	8001d78 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7ff fcbe 	bl	8001d78 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e04f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 020c 	and.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1eb      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d20c      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e032      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4916      	ldr	r1, [pc, #88]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	490e      	ldr	r1, [pc, #56]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002486:	f000 f855 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 800248a:	4602      	mov	r2, r0
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	490a      	ldr	r1, [pc, #40]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	5ccb      	ldrb	r3, [r1, r3]
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fc22 	bl	8001cf0 <HAL_InitTick>

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023c00 	.word	0x40023c00
 80024bc:	40023800 	.word	0x40023800
 80024c0:	08007e8c 	.word	0x08007e8c
 80024c4:	20000004 	.word	0x20000004
 80024c8:	20000008 	.word	0x20000008

080024cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000004 	.word	0x20000004

080024e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024e8:	f7ff fff0 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	0a9b      	lsrs	r3, r3, #10
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	4903      	ldr	r1, [pc, #12]	; (8002508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40023800 	.word	0x40023800
 8002508:	08007e9c 	.word	0x08007e9c

0800250c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002510:	f7ff ffdc 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0b5b      	lsrs	r3, r3, #13
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4903      	ldr	r1, [pc, #12]	; (8002530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40023800 	.word	0x40023800
 8002530:	08007e9c 	.word	0x08007e9c

08002534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002538:	b0ae      	sub	sp, #184	; 0xb8
 800253a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800255a:	4bcb      	ldr	r3, [pc, #812]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b0c      	cmp	r3, #12
 8002564:	f200 8206 	bhi.w	8002974 <HAL_RCC_GetSysClockFreq+0x440>
 8002568:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <HAL_RCC_GetSysClockFreq+0x3c>)
 800256a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256e:	bf00      	nop
 8002570:	080025a5 	.word	0x080025a5
 8002574:	08002975 	.word	0x08002975
 8002578:	08002975 	.word	0x08002975
 800257c:	08002975 	.word	0x08002975
 8002580:	080025ad 	.word	0x080025ad
 8002584:	08002975 	.word	0x08002975
 8002588:	08002975 	.word	0x08002975
 800258c:	08002975 	.word	0x08002975
 8002590:	080025b5 	.word	0x080025b5
 8002594:	08002975 	.word	0x08002975
 8002598:	08002975 	.word	0x08002975
 800259c:	08002975 	.word	0x08002975
 80025a0:	080027a5 	.word	0x080027a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a4:	4bb9      	ldr	r3, [pc, #740]	; (800288c <HAL_RCC_GetSysClockFreq+0x358>)
 80025a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80025aa:	e1e7      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ac:	4bb8      	ldr	r3, [pc, #736]	; (8002890 <HAL_RCC_GetSysClockFreq+0x35c>)
 80025ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025b2:	e1e3      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b4:	4bb4      	ldr	r3, [pc, #720]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025c0:	4bb1      	ldr	r3, [pc, #708]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d071      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025cc:	4bae      	ldr	r3, [pc, #696]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	099b      	lsrs	r3, r3, #6
 80025d2:	2200      	movs	r2, #0
 80025d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025d8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80025dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025f2:	4622      	mov	r2, r4
 80025f4:	462b      	mov	r3, r5
 80025f6:	f04f 0000 	mov.w	r0, #0
 80025fa:	f04f 0100 	mov.w	r1, #0
 80025fe:	0159      	lsls	r1, r3, #5
 8002600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002604:	0150      	lsls	r0, r2, #5
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4621      	mov	r1, r4
 800260c:	1a51      	subs	r1, r2, r1
 800260e:	6439      	str	r1, [r7, #64]	; 0x40
 8002610:	4629      	mov	r1, r5
 8002612:	eb63 0301 	sbc.w	r3, r3, r1
 8002616:	647b      	str	r3, [r7, #68]	; 0x44
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002624:	4649      	mov	r1, r9
 8002626:	018b      	lsls	r3, r1, #6
 8002628:	4641      	mov	r1, r8
 800262a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800262e:	4641      	mov	r1, r8
 8002630:	018a      	lsls	r2, r1, #6
 8002632:	4641      	mov	r1, r8
 8002634:	1a51      	subs	r1, r2, r1
 8002636:	63b9      	str	r1, [r7, #56]	; 0x38
 8002638:	4649      	mov	r1, r9
 800263a:	eb63 0301 	sbc.w	r3, r3, r1
 800263e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800264c:	4649      	mov	r1, r9
 800264e:	00cb      	lsls	r3, r1, #3
 8002650:	4641      	mov	r1, r8
 8002652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002656:	4641      	mov	r1, r8
 8002658:	00ca      	lsls	r2, r1, #3
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	4603      	mov	r3, r0
 8002660:	4622      	mov	r2, r4
 8002662:	189b      	adds	r3, r3, r2
 8002664:	633b      	str	r3, [r7, #48]	; 0x30
 8002666:	462b      	mov	r3, r5
 8002668:	460a      	mov	r2, r1
 800266a:	eb42 0303 	adc.w	r3, r2, r3
 800266e:	637b      	str	r3, [r7, #52]	; 0x34
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800267c:	4629      	mov	r1, r5
 800267e:	024b      	lsls	r3, r1, #9
 8002680:	4621      	mov	r1, r4
 8002682:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002686:	4621      	mov	r1, r4
 8002688:	024a      	lsls	r2, r1, #9
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002692:	2200      	movs	r2, #0
 8002694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002698:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800269c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80026a0:	f7fe f914 	bl	80008cc <__aeabi_uldivmod>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4613      	mov	r3, r2
 80026aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026ae:	e067      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b0:	4b75      	ldr	r3, [pc, #468]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	099b      	lsrs	r3, r3, #6
 80026b6:	2200      	movs	r2, #0
 80026b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026bc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80026c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80026ca:	2300      	movs	r3, #0
 80026cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80026d2:	4622      	mov	r2, r4
 80026d4:	462b      	mov	r3, r5
 80026d6:	f04f 0000 	mov.w	r0, #0
 80026da:	f04f 0100 	mov.w	r1, #0
 80026de:	0159      	lsls	r1, r3, #5
 80026e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026e4:	0150      	lsls	r0, r2, #5
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4621      	mov	r1, r4
 80026ec:	1a51      	subs	r1, r2, r1
 80026ee:	62b9      	str	r1, [r7, #40]	; 0x28
 80026f0:	4629      	mov	r1, r5
 80026f2:	eb63 0301 	sbc.w	r3, r3, r1
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002704:	4649      	mov	r1, r9
 8002706:	018b      	lsls	r3, r1, #6
 8002708:	4641      	mov	r1, r8
 800270a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800270e:	4641      	mov	r1, r8
 8002710:	018a      	lsls	r2, r1, #6
 8002712:	4641      	mov	r1, r8
 8002714:	ebb2 0a01 	subs.w	sl, r2, r1
 8002718:	4649      	mov	r1, r9
 800271a:	eb63 0b01 	sbc.w	fp, r3, r1
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800272a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800272e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002732:	4692      	mov	sl, r2
 8002734:	469b      	mov	fp, r3
 8002736:	4623      	mov	r3, r4
 8002738:	eb1a 0303 	adds.w	r3, sl, r3
 800273c:	623b      	str	r3, [r7, #32]
 800273e:	462b      	mov	r3, r5
 8002740:	eb4b 0303 	adc.w	r3, fp, r3
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002752:	4629      	mov	r1, r5
 8002754:	028b      	lsls	r3, r1, #10
 8002756:	4621      	mov	r1, r4
 8002758:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800275c:	4621      	mov	r1, r4
 800275e:	028a      	lsls	r2, r1, #10
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002768:	2200      	movs	r2, #0
 800276a:	673b      	str	r3, [r7, #112]	; 0x70
 800276c:	677a      	str	r2, [r7, #116]	; 0x74
 800276e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002772:	f7fe f8ab 	bl	80008cc <__aeabi_uldivmod>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4613      	mov	r3, r2
 800277c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002780:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	0c1b      	lsrs	r3, r3, #16
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	3301      	adds	r3, #1
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002792:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002796:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800279a:	fbb2 f3f3 	udiv	r3, r2, r3
 800279e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027a2:	e0eb      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a4:	4b38      	ldr	r3, [pc, #224]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027b0:	4b35      	ldr	r3, [pc, #212]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d06b      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027bc:	4b32      	ldr	r3, [pc, #200]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	099b      	lsrs	r3, r3, #6
 80027c2:	2200      	movs	r2, #0
 80027c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80027c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80027c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ce:	663b      	str	r3, [r7, #96]	; 0x60
 80027d0:	2300      	movs	r3, #0
 80027d2:	667b      	str	r3, [r7, #100]	; 0x64
 80027d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80027d8:	4622      	mov	r2, r4
 80027da:	462b      	mov	r3, r5
 80027dc:	f04f 0000 	mov.w	r0, #0
 80027e0:	f04f 0100 	mov.w	r1, #0
 80027e4:	0159      	lsls	r1, r3, #5
 80027e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ea:	0150      	lsls	r0, r2, #5
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4621      	mov	r1, r4
 80027f2:	1a51      	subs	r1, r2, r1
 80027f4:	61b9      	str	r1, [r7, #24]
 80027f6:	4629      	mov	r1, r5
 80027f8:	eb63 0301 	sbc.w	r3, r3, r1
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800280a:	4659      	mov	r1, fp
 800280c:	018b      	lsls	r3, r1, #6
 800280e:	4651      	mov	r1, sl
 8002810:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002814:	4651      	mov	r1, sl
 8002816:	018a      	lsls	r2, r1, #6
 8002818:	4651      	mov	r1, sl
 800281a:	ebb2 0801 	subs.w	r8, r2, r1
 800281e:	4659      	mov	r1, fp
 8002820:	eb63 0901 	sbc.w	r9, r3, r1
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002830:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002834:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002838:	4690      	mov	r8, r2
 800283a:	4699      	mov	r9, r3
 800283c:	4623      	mov	r3, r4
 800283e:	eb18 0303 	adds.w	r3, r8, r3
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	462b      	mov	r3, r5
 8002846:	eb49 0303 	adc.w	r3, r9, r3
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002858:	4629      	mov	r1, r5
 800285a:	024b      	lsls	r3, r1, #9
 800285c:	4621      	mov	r1, r4
 800285e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002862:	4621      	mov	r1, r4
 8002864:	024a      	lsls	r2, r1, #9
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800286e:	2200      	movs	r2, #0
 8002870:	65bb      	str	r3, [r7, #88]	; 0x58
 8002872:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002874:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002878:	f7fe f828 	bl	80008cc <__aeabi_uldivmod>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4613      	mov	r3, r2
 8002882:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002886:	e065      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x420>
 8002888:	40023800 	.word	0x40023800
 800288c:	00f42400 	.word	0x00f42400
 8002890:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002894:	4b3d      	ldr	r3, [pc, #244]	; (800298c <HAL_RCC_GetSysClockFreq+0x458>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	099b      	lsrs	r3, r3, #6
 800289a:	2200      	movs	r2, #0
 800289c:	4618      	mov	r0, r3
 800289e:	4611      	mov	r1, r2
 80028a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028a4:	653b      	str	r3, [r7, #80]	; 0x50
 80028a6:	2300      	movs	r3, #0
 80028a8:	657b      	str	r3, [r7, #84]	; 0x54
 80028aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80028ae:	4642      	mov	r2, r8
 80028b0:	464b      	mov	r3, r9
 80028b2:	f04f 0000 	mov.w	r0, #0
 80028b6:	f04f 0100 	mov.w	r1, #0
 80028ba:	0159      	lsls	r1, r3, #5
 80028bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c0:	0150      	lsls	r0, r2, #5
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4641      	mov	r1, r8
 80028c8:	1a51      	subs	r1, r2, r1
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	4649      	mov	r1, r9
 80028ce:	eb63 0301 	sbc.w	r3, r3, r1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028e0:	4659      	mov	r1, fp
 80028e2:	018b      	lsls	r3, r1, #6
 80028e4:	4651      	mov	r1, sl
 80028e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ea:	4651      	mov	r1, sl
 80028ec:	018a      	lsls	r2, r1, #6
 80028ee:	4651      	mov	r1, sl
 80028f0:	1a54      	subs	r4, r2, r1
 80028f2:	4659      	mov	r1, fp
 80028f4:	eb63 0501 	sbc.w	r5, r3, r1
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	00eb      	lsls	r3, r5, #3
 8002902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002906:	00e2      	lsls	r2, r4, #3
 8002908:	4614      	mov	r4, r2
 800290a:	461d      	mov	r5, r3
 800290c:	4643      	mov	r3, r8
 800290e:	18e3      	adds	r3, r4, r3
 8002910:	603b      	str	r3, [r7, #0]
 8002912:	464b      	mov	r3, r9
 8002914:	eb45 0303 	adc.w	r3, r5, r3
 8002918:	607b      	str	r3, [r7, #4]
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002926:	4629      	mov	r1, r5
 8002928:	028b      	lsls	r3, r1, #10
 800292a:	4621      	mov	r1, r4
 800292c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002930:	4621      	mov	r1, r4
 8002932:	028a      	lsls	r2, r1, #10
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800293c:	2200      	movs	r2, #0
 800293e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002940:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002942:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002946:	f7fd ffc1 	bl	80008cc <__aeabi_uldivmod>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4613      	mov	r3, r2
 8002950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002954:	4b0d      	ldr	r3, [pc, #52]	; (800298c <HAL_RCC_GetSysClockFreq+0x458>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	0f1b      	lsrs	r3, r3, #28
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002962:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002966:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800296a:	fbb2 f3f3 	udiv	r3, r2, r3
 800296e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002972:	e003      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800297a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800297c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002980:	4618      	mov	r0, r3
 8002982:	37b8      	adds	r7, #184	; 0xb8
 8002984:	46bd      	mov	sp, r7
 8002986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800
 8002990:	00f42400 	.word	0x00f42400

08002994 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e28d      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8083 	beq.w	8002aba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029b4:	4b94      	ldr	r3, [pc, #592]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d019      	beq.n	80029f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029c0:	4b91      	ldr	r3, [pc, #580]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d106      	bne.n	80029da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029cc:	4b8e      	ldr	r3, [pc, #568]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d8:	d00c      	beq.n	80029f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029da:	4b8b      	ldr	r3, [pc, #556]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029e2:	2b0c      	cmp	r3, #12
 80029e4:	d112      	bne.n	8002a0c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e6:	4b88      	ldr	r3, [pc, #544]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f2:	d10b      	bne.n	8002a0c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f4:	4b84      	ldr	r3, [pc, #528]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d05b      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x124>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d157      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e25a      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a14:	d106      	bne.n	8002a24 <HAL_RCC_OscConfig+0x90>
 8002a16:	4b7c      	ldr	r3, [pc, #496]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a7b      	ldr	r2, [pc, #492]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e01d      	b.n	8002a60 <HAL_RCC_OscConfig+0xcc>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0xb4>
 8002a2e:	4b76      	ldr	r3, [pc, #472]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a75      	ldr	r2, [pc, #468]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b73      	ldr	r3, [pc, #460]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a72      	ldr	r2, [pc, #456]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e00b      	b.n	8002a60 <HAL_RCC_OscConfig+0xcc>
 8002a48:	4b6f      	ldr	r3, [pc, #444]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a6e      	ldr	r2, [pc, #440]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	4b6c      	ldr	r3, [pc, #432]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a6b      	ldr	r2, [pc, #428]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d013      	beq.n	8002a90 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7ff f986 	bl	8001d78 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a70:	f7ff f982 	bl	8001d78 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e21f      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	4b61      	ldr	r3, [pc, #388]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0xdc>
 8002a8e:	e014      	b.n	8002aba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7ff f972 	bl	8001d78 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a98:	f7ff f96e 	bl	8001d78 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	; 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e20b      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aaa:	4b57      	ldr	r3, [pc, #348]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x104>
 8002ab6:	e000      	b.n	8002aba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d06f      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ac6:	4b50      	ldr	r3, [pc, #320]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d017      	beq.n	8002b02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ad2:	4b4d      	ldr	r3, [pc, #308]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d105      	bne.n	8002aea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ade:	4b4a      	ldr	r3, [pc, #296]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aea:	4b47      	ldr	r3, [pc, #284]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d11c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af6:	4b44      	ldr	r3, [pc, #272]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d116      	bne.n	8002b30 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b02:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_RCC_OscConfig+0x186>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e1d3      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1a:	4b3b      	ldr	r3, [pc, #236]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4937      	ldr	r1, [pc, #220]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2e:	e03a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b38:	4b34      	ldr	r3, [pc, #208]	; (8002c0c <HAL_RCC_OscConfig+0x278>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7ff f91b 	bl	8001d78 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b46:	f7ff f917 	bl	8001d78 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e1b4      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b58:	4b2b      	ldr	r3, [pc, #172]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4925      	ldr	r1, [pc, #148]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]
 8002b78:	e015      	b.n	8002ba6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7a:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_RCC_OscConfig+0x278>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7ff f8fa 	bl	8001d78 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b88:	f7ff f8f6 	bl	8001d78 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e193      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d036      	beq.n	8002c20 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d016      	beq.n	8002be8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <HAL_RCC_OscConfig+0x27c>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7ff f8da 	bl	8001d78 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc8:	f7ff f8d6 	bl	8001d78 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e173      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x234>
 8002be6:	e01b      	b.n	8002c20 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <HAL_RCC_OscConfig+0x27c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bee:	f7ff f8c3 	bl	8001d78 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf4:	e00e      	b.n	8002c14 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf6:	f7ff f8bf 	bl	8001d78 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d907      	bls.n	8002c14 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e15c      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	42470000 	.word	0x42470000
 8002c10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c14:	4b8a      	ldr	r3, [pc, #552]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ea      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8097 	beq.w	8002d5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c32:	4b83      	ldr	r3, [pc, #524]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10f      	bne.n	8002c5e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	4b7f      	ldr	r3, [pc, #508]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4a7e      	ldr	r2, [pc, #504]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4e:	4b7c      	ldr	r3, [pc, #496]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5e:	4b79      	ldr	r3, [pc, #484]	; (8002e44 <HAL_RCC_OscConfig+0x4b0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d118      	bne.n	8002c9c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6a:	4b76      	ldr	r3, [pc, #472]	; (8002e44 <HAL_RCC_OscConfig+0x4b0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a75      	ldr	r2, [pc, #468]	; (8002e44 <HAL_RCC_OscConfig+0x4b0>)
 8002c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c76:	f7ff f87f 	bl	8001d78 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7e:	f7ff f87b 	bl	8001d78 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e118      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c90:	4b6c      	ldr	r3, [pc, #432]	; (8002e44 <HAL_RCC_OscConfig+0x4b0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d106      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x31e>
 8002ca4:	4b66      	ldr	r3, [pc, #408]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca8:	4a65      	ldr	r2, [pc, #404]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb0:	e01c      	b.n	8002cec <HAL_RCC_OscConfig+0x358>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b05      	cmp	r3, #5
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x340>
 8002cba:	4b61      	ldr	r3, [pc, #388]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	4a60      	ldr	r2, [pc, #384]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc6:	4b5e      	ldr	r3, [pc, #376]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	4a5d      	ldr	r2, [pc, #372]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0x358>
 8002cd4:	4b5a      	ldr	r3, [pc, #360]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	4a59      	ldr	r2, [pc, #356]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce0:	4b57      	ldr	r3, [pc, #348]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	4a56      	ldr	r2, [pc, #344]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002ce6:	f023 0304 	bic.w	r3, r3, #4
 8002cea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d015      	beq.n	8002d20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf4:	f7ff f840 	bl	8001d78 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cfc:	f7ff f83c 	bl	8001d78 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e0d7      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d12:	4b4b      	ldr	r3, [pc, #300]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0ee      	beq.n	8002cfc <HAL_RCC_OscConfig+0x368>
 8002d1e:	e014      	b.n	8002d4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d20:	f7ff f82a 	bl	8001d78 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d28:	f7ff f826 	bl	8001d78 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e0c1      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3e:	4b40      	ldr	r3, [pc, #256]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1ee      	bne.n	8002d28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d4a:	7dfb      	ldrb	r3, [r7, #23]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d105      	bne.n	8002d5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d50:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	4a3a      	ldr	r2, [pc, #232]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80ad 	beq.w	8002ec0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d66:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d060      	beq.n	8002e34 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d145      	bne.n	8002e06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7a:	4b33      	ldr	r3, [pc, #204]	; (8002e48 <HAL_RCC_OscConfig+0x4b4>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe fffa 	bl	8001d78 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fe fff6 	bl	8001d78 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e093      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9a:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69da      	ldr	r2, [r3, #28]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	019b      	lsls	r3, r3, #6
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	085b      	lsrs	r3, r3, #1
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	041b      	lsls	r3, r3, #16
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	061b      	lsls	r3, r3, #24
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	071b      	lsls	r3, r3, #28
 8002dd2:	491b      	ldr	r1, [pc, #108]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_RCC_OscConfig+0x4b4>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7fe ffcb 	bl	8001d78 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de6:	f7fe ffc7 	bl	8001d78 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e064      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x452>
 8002e04:	e05c      	b.n	8002ec0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <HAL_RCC_OscConfig+0x4b4>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7fe ffb4 	bl	8001d78 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e14:	f7fe ffb0 	bl	8001d78 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e04d      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x480>
 8002e32:	e045      	b.n	8002ec0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d107      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e040      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40007000 	.word	0x40007000
 8002e48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <HAL_RCC_OscConfig+0x538>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d030      	beq.n	8002ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d129      	bne.n	8002ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d122      	bne.n	8002ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d119      	bne.n	8002ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	085b      	lsrs	r3, r3, #1
 8002e94:	3b01      	subs	r3, #1
 8002e96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d10f      	bne.n	8002ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d107      	bne.n	8002ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800

08002ed0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e07b      	b.n	8002fda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d108      	bne.n	8002efc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ef2:	d009      	beq.n	8002f08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	61da      	str	r2, [r3, #28]
 8002efa:	e005      	b.n	8002f08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fe fd7a 	bl	8001a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8c:	ea42 0103 	orr.w	r1, r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	0c1b      	lsrs	r3, r3, #16
 8002fa6:	f003 0104 	and.w	r1, r3, #4
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	f003 0210 	and.w	r2, r3, #16
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69da      	ldr	r2, [r3, #28]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b088      	sub	sp, #32
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_SPI_Transmit+0x22>
 8003000:	2302      	movs	r3, #2
 8003002:	e126      	b.n	8003252 <HAL_SPI_Transmit+0x270>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800300c:	f7fe feb4 	bl	8001d78 <HAL_GetTick>
 8003010:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003012:	88fb      	ldrh	r3, [r7, #6]
 8003014:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d002      	beq.n	8003028 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003022:	2302      	movs	r3, #2
 8003024:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003026:	e10b      	b.n	8003240 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_SPI_Transmit+0x52>
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003038:	e102      	b.n	8003240 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2203      	movs	r2, #3
 800303e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	88fa      	ldrh	r2, [r7, #6]
 8003052:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	88fa      	ldrh	r2, [r7, #6]
 8003058:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003080:	d10f      	bne.n	80030a2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003090:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b40      	cmp	r3, #64	; 0x40
 80030ae:	d007      	beq.n	80030c0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c8:	d14b      	bne.n	8003162 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_SPI_Transmit+0xf6>
 80030d2:	8afb      	ldrh	r3, [r7, #22]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d13e      	bne.n	8003156 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	881a      	ldrh	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	1c9a      	adds	r2, r3, #2
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030fc:	e02b      	b.n	8003156 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b02      	cmp	r3, #2
 800310a:	d112      	bne.n	8003132 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	881a      	ldrh	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	1c9a      	adds	r2, r3, #2
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003130:	e011      	b.n	8003156 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003132:	f7fe fe21 	bl	8001d78 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d803      	bhi.n	800314a <HAL_SPI_Transmit+0x168>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003148:	d102      	bne.n	8003150 <HAL_SPI_Transmit+0x16e>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d102      	bne.n	8003156 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003154:	e074      	b.n	8003240 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1ce      	bne.n	80030fe <HAL_SPI_Transmit+0x11c>
 8003160:	e04c      	b.n	80031fc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <HAL_SPI_Transmit+0x18e>
 800316a:	8afb      	ldrh	r3, [r7, #22]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d140      	bne.n	80031f2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	330c      	adds	r3, #12
 800317a:	7812      	ldrb	r2, [r2, #0]
 800317c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003196:	e02c      	b.n	80031f2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d113      	bne.n	80031ce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	330c      	adds	r3, #12
 80031b0:	7812      	ldrb	r2, [r2, #0]
 80031b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80031cc:	e011      	b.n	80031f2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031ce:	f7fe fdd3 	bl	8001d78 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d803      	bhi.n	80031e6 <HAL_SPI_Transmit+0x204>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031e4:	d102      	bne.n	80031ec <HAL_SPI_Transmit+0x20a>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031f0:	e026      	b.n	8003240 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1cd      	bne.n	8003198 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	6839      	ldr	r1, [r7, #0]
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 fa55 	bl	80036b0 <SPI_EndRxTxTransaction>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10a      	bne.n	8003230 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800321a:	2300      	movs	r3, #0
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e000      	b.n	8003240 <HAL_SPI_Transmit+0x25e>
  }

error:
 800323e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003250:	7ffb      	ldrb	r3, [r7, #31]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b08c      	sub	sp, #48	; 0x30
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
 8003266:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003268:	2301      	movs	r3, #1
 800326a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_SPI_TransmitReceive+0x26>
 800327c:	2302      	movs	r3, #2
 800327e:	e18a      	b.n	8003596 <HAL_SPI_TransmitReceive+0x33c>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003288:	f7fe fd76 	bl	8001d78 <HAL_GetTick>
 800328c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800329e:	887b      	ldrh	r3, [r7, #2]
 80032a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d00f      	beq.n	80032ca <HAL_SPI_TransmitReceive+0x70>
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032b0:	d107      	bne.n	80032c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d103      	bne.n	80032c2 <HAL_SPI_TransmitReceive+0x68>
 80032ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d003      	beq.n	80032ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
 80032c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032c8:	e15b      	b.n	8003582 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_SPI_TransmitReceive+0x82>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_SPI_TransmitReceive+0x82>
 80032d6:	887b      	ldrh	r3, [r7, #2]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d103      	bne.n	80032e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032e2:	e14e      	b.n	8003582 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d003      	beq.n	80032f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2205      	movs	r2, #5
 80032f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	887a      	ldrh	r2, [r7, #2]
 800330e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	887a      	ldrh	r2, [r7, #2]
 800331a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	887a      	ldrh	r2, [r7, #2]
 8003320:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d007      	beq.n	800334c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800334a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003354:	d178      	bne.n	8003448 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_SPI_TransmitReceive+0x10a>
 800335e:	8b7b      	ldrh	r3, [r7, #26]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d166      	bne.n	8003432 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	881a      	ldrh	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	1c9a      	adds	r2, r3, #2
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003388:	e053      	b.n	8003432 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b02      	cmp	r3, #2
 8003396:	d11b      	bne.n	80033d0 <HAL_SPI_TransmitReceive+0x176>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d016      	beq.n	80033d0 <HAL_SPI_TransmitReceive+0x176>
 80033a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d113      	bne.n	80033d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	881a      	ldrh	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	1c9a      	adds	r2, r3, #2
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d119      	bne.n	8003412 <HAL_SPI_TransmitReceive+0x1b8>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d014      	beq.n	8003412 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f2:	b292      	uxth	r2, r2
 80033f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	1c9a      	adds	r2, r3, #2
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800340e:	2301      	movs	r3, #1
 8003410:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003412:	f7fe fcb1 	bl	8001d78 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800341e:	429a      	cmp	r2, r3
 8003420:	d807      	bhi.n	8003432 <HAL_SPI_TransmitReceive+0x1d8>
 8003422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003428:	d003      	beq.n	8003432 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003430:	e0a7      	b.n	8003582 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1a6      	bne.n	800338a <HAL_SPI_TransmitReceive+0x130>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1a1      	bne.n	800338a <HAL_SPI_TransmitReceive+0x130>
 8003446:	e07c      	b.n	8003542 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <HAL_SPI_TransmitReceive+0x1fc>
 8003450:	8b7b      	ldrh	r3, [r7, #26]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d16b      	bne.n	800352e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	7812      	ldrb	r2, [r2, #0]
 8003462:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800347c:	e057      	b.n	800352e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b02      	cmp	r3, #2
 800348a:	d11c      	bne.n	80034c6 <HAL_SPI_TransmitReceive+0x26c>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d017      	beq.n	80034c6 <HAL_SPI_TransmitReceive+0x26c>
 8003496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003498:	2b01      	cmp	r3, #1
 800349a:	d114      	bne.n	80034c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	330c      	adds	r3, #12
 80034a6:	7812      	ldrb	r2, [r2, #0]
 80034a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d119      	bne.n	8003508 <HAL_SPI_TransmitReceive+0x2ae>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d014      	beq.n	8003508 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003504:	2301      	movs	r3, #1
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003508:	f7fe fc36 	bl	8001d78 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003514:	429a      	cmp	r2, r3
 8003516:	d803      	bhi.n	8003520 <HAL_SPI_TransmitReceive+0x2c6>
 8003518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800351e:	d102      	bne.n	8003526 <HAL_SPI_TransmitReceive+0x2cc>
 8003520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003522:	2b00      	cmp	r3, #0
 8003524:	d103      	bne.n	800352e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800352c:	e029      	b.n	8003582 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1a2      	bne.n	800347e <HAL_SPI_TransmitReceive+0x224>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d19d      	bne.n	800347e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003544:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f8b2 	bl	80036b0 <SPI_EndRxTxTransaction>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d006      	beq.n	8003560 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800355e:	e010      	b.n	8003582 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10b      	bne.n	8003580 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	e000      	b.n	8003582 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003580:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003592:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003596:	4618      	mov	r0, r3
 8003598:	3730      	adds	r7, #48	; 0x30
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	4613      	mov	r3, r2
 80035ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035b0:	f7fe fbe2 	bl	8001d78 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	4413      	add	r3, r2
 80035be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035c0:	f7fe fbda 	bl	8001d78 <HAL_GetTick>
 80035c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035c6:	4b39      	ldr	r3, [pc, #228]	; (80036ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	015b      	lsls	r3, r3, #5
 80035cc:	0d1b      	lsrs	r3, r3, #20
 80035ce:	69fa      	ldr	r2, [r7, #28]
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035d6:	e054      	b.n	8003682 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035de:	d050      	beq.n	8003682 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035e0:	f7fe fbca 	bl	8001d78 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d902      	bls.n	80035f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d13d      	bne.n	8003672 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003604:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800360e:	d111      	bne.n	8003634 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003618:	d004      	beq.n	8003624 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003622:	d107      	bne.n	8003634 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003632:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363c:	d10f      	bne.n	800365e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800365c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e017      	b.n	80036a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	3b01      	subs	r3, #1
 8003680:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4013      	ands	r3, r2
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	429a      	cmp	r2, r3
 8003690:	bf0c      	ite	eq
 8003692:	2301      	moveq	r3, #1
 8003694:	2300      	movne	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	429a      	cmp	r2, r3
 800369e:	d19b      	bne.n	80035d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3720      	adds	r7, #32
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000004 	.word	0x20000004

080036b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <SPI_EndRxTxTransaction+0x7c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1b      	ldr	r2, [pc, #108]	; (8003730 <SPI_EndRxTxTransaction+0x80>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	0d5b      	lsrs	r3, r3, #21
 80036c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036cc:	fb02 f303 	mul.w	r3, r2, r3
 80036d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036da:	d112      	bne.n	8003702 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2200      	movs	r2, #0
 80036e4:	2180      	movs	r1, #128	; 0x80
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f7ff ff5a 	bl	80035a0 <SPI_WaitFlagStateUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d016      	beq.n	8003720 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e00f      	b.n	8003722 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	3b01      	subs	r3, #1
 800370c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003718:	2b80      	cmp	r3, #128	; 0x80
 800371a:	d0f2      	beq.n	8003702 <SPI_EndRxTxTransaction+0x52>
 800371c:	e000      	b.n	8003720 <SPI_EndRxTxTransaction+0x70>
        break;
 800371e:	bf00      	nop
  }

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000004 	.word	0x20000004
 8003730:	165e9f81 	.word	0x165e9f81

08003734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e03f      	b.n	80037c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fe f9a6 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2224      	movs	r2, #36	; 0x24
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f929 	bl	80039d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800378c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800379c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b08a      	sub	sp, #40	; 0x28
 80037d2:	af02      	add	r7, sp, #8
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	4613      	mov	r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d17c      	bne.n	80038e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_UART_Transmit+0x2c>
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e075      	b.n	80038ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_UART_Transmit+0x3e>
 8003808:	2302      	movs	r3, #2
 800380a:	e06e      	b.n	80038ea <HAL_UART_Transmit+0x11c>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2221      	movs	r2, #33	; 0x21
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003822:	f7fe faa9 	bl	8001d78 <HAL_GetTick>
 8003826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	88fa      	ldrh	r2, [r7, #6]
 800382c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	88fa      	ldrh	r2, [r7, #6]
 8003832:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383c:	d108      	bne.n	8003850 <HAL_UART_Transmit+0x82>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d104      	bne.n	8003850 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e003      	b.n	8003858 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003854:	2300      	movs	r3, #0
 8003856:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003860:	e02a      	b.n	80038b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2200      	movs	r2, #0
 800386a:	2180      	movs	r1, #128	; 0x80
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f840 	bl	80038f2 <UART_WaitOnFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e036      	b.n	80038ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10b      	bne.n	800389a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003890:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	3302      	adds	r3, #2
 8003896:	61bb      	str	r3, [r7, #24]
 8003898:	e007      	b.n	80038aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	781a      	ldrb	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	3301      	adds	r3, #1
 80038a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1cf      	bne.n	8003862 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	2140      	movs	r1, #64	; 0x40
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f810 	bl	80038f2 <UART_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e006      	b.n	80038ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e000      	b.n	80038ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b090      	sub	sp, #64	; 0x40
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	4613      	mov	r3, r2
 8003900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003902:	e050      	b.n	80039a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800390a:	d04c      	beq.n	80039a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800390c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <UART_WaitOnFlagUntilTimeout+0x30>
 8003912:	f7fe fa31 	bl	8001d78 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800391e:	429a      	cmp	r2, r3
 8003920:	d241      	bcs.n	80039a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	330c      	adds	r3, #12
 8003940:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003942:	637a      	str	r2, [r7, #52]	; 0x34
 8003944:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003948:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e5      	bne.n	8003922 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3314      	adds	r3, #20
 800395c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	e853 3f00 	ldrex	r3, [r3]
 8003964:	613b      	str	r3, [r7, #16]
   return(result);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	63bb      	str	r3, [r7, #56]	; 0x38
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3314      	adds	r3, #20
 8003974:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003976:	623a      	str	r2, [r7, #32]
 8003978:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	69f9      	ldr	r1, [r7, #28]
 800397c:	6a3a      	ldr	r2, [r7, #32]
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	61bb      	str	r3, [r7, #24]
   return(result);
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e5      	bne.n	8003956 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e00f      	b.n	80039c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4013      	ands	r3, r2
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	bf0c      	ite	eq
 80039b6:	2301      	moveq	r3, #1
 80039b8:	2300      	movne	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d09f      	beq.n	8003904 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3740      	adds	r7, #64	; 0x40
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d4:	b0c0      	sub	sp, #256	; 0x100
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ec:	68d9      	ldr	r1, [r3, #12]
 80039ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	ea40 0301 	orr.w	r3, r0, r1
 80039f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a28:	f021 010c 	bic.w	r1, r1, #12
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a36:	430b      	orrs	r3, r1
 8003a38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4a:	6999      	ldr	r1, [r3, #24]
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	ea40 0301 	orr.w	r3, r0, r1
 8003a56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b8f      	ldr	r3, [pc, #572]	; (8003c9c <UART_SetConfig+0x2cc>)
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d005      	beq.n	8003a70 <UART_SetConfig+0xa0>
 8003a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4b8d      	ldr	r3, [pc, #564]	; (8003ca0 <UART_SetConfig+0x2d0>)
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d104      	bne.n	8003a7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a70:	f7fe fd4c 	bl	800250c <HAL_RCC_GetPCLK2Freq>
 8003a74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a78:	e003      	b.n	8003a82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a7a:	f7fe fd33 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 8003a7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a8c:	f040 810c 	bne.w	8003ca8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a94:	2200      	movs	r2, #0
 8003a96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	462b      	mov	r3, r5
 8003aa6:	1891      	adds	r1, r2, r2
 8003aa8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003aaa:	415b      	adcs	r3, r3
 8003aac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	eb12 0801 	adds.w	r8, r2, r1
 8003ab8:	4629      	mov	r1, r5
 8003aba:	eb43 0901 	adc.w	r9, r3, r1
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ad2:	4690      	mov	r8, r2
 8003ad4:	4699      	mov	r9, r3
 8003ad6:	4623      	mov	r3, r4
 8003ad8:	eb18 0303 	adds.w	r3, r8, r3
 8003adc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ae0:	462b      	mov	r3, r5
 8003ae2:	eb49 0303 	adc.w	r3, r9, r3
 8003ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003af6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003afa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003afe:	460b      	mov	r3, r1
 8003b00:	18db      	adds	r3, r3, r3
 8003b02:	653b      	str	r3, [r7, #80]	; 0x50
 8003b04:	4613      	mov	r3, r2
 8003b06:	eb42 0303 	adc.w	r3, r2, r3
 8003b0a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b14:	f7fc feda 	bl	80008cc <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4b61      	ldr	r3, [pc, #388]	; (8003ca4 <UART_SetConfig+0x2d4>)
 8003b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	011c      	lsls	r4, r3, #4
 8003b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b38:	4642      	mov	r2, r8
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	1891      	adds	r1, r2, r2
 8003b3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b40:	415b      	adcs	r3, r3
 8003b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b48:	4641      	mov	r1, r8
 8003b4a:	eb12 0a01 	adds.w	sl, r2, r1
 8003b4e:	4649      	mov	r1, r9
 8003b50:	eb43 0b01 	adc.w	fp, r3, r1
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b68:	4692      	mov	sl, r2
 8003b6a:	469b      	mov	fp, r3
 8003b6c:	4643      	mov	r3, r8
 8003b6e:	eb1a 0303 	adds.w	r3, sl, r3
 8003b72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b76:	464b      	mov	r3, r9
 8003b78:	eb4b 0303 	adc.w	r3, fp, r3
 8003b7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b94:	460b      	mov	r3, r1
 8003b96:	18db      	adds	r3, r3, r3
 8003b98:	643b      	str	r3, [r7, #64]	; 0x40
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ba0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ba6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003baa:	f7fc fe8f 	bl	80008cc <__aeabi_uldivmod>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4b3b      	ldr	r3, [pc, #236]	; (8003ca4 <UART_SetConfig+0x2d4>)
 8003bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	2264      	movs	r2, #100	; 0x64
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	1acb      	subs	r3, r1, r3
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bca:	4b36      	ldr	r3, [pc, #216]	; (8003ca4 <UART_SetConfig+0x2d4>)
 8003bcc:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bd8:	441c      	add	r4, r3
 8003bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003be4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003be8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003bec:	4642      	mov	r2, r8
 8003bee:	464b      	mov	r3, r9
 8003bf0:	1891      	adds	r1, r2, r2
 8003bf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bf4:	415b      	adcs	r3, r3
 8003bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bfc:	4641      	mov	r1, r8
 8003bfe:	1851      	adds	r1, r2, r1
 8003c00:	6339      	str	r1, [r7, #48]	; 0x30
 8003c02:	4649      	mov	r1, r9
 8003c04:	414b      	adcs	r3, r1
 8003c06:	637b      	str	r3, [r7, #52]	; 0x34
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c14:	4659      	mov	r1, fp
 8003c16:	00cb      	lsls	r3, r1, #3
 8003c18:	4651      	mov	r1, sl
 8003c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c1e:	4651      	mov	r1, sl
 8003c20:	00ca      	lsls	r2, r1, #3
 8003c22:	4610      	mov	r0, r2
 8003c24:	4619      	mov	r1, r3
 8003c26:	4603      	mov	r3, r0
 8003c28:	4642      	mov	r2, r8
 8003c2a:	189b      	adds	r3, r3, r2
 8003c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c30:	464b      	mov	r3, r9
 8003c32:	460a      	mov	r2, r1
 8003c34:	eb42 0303 	adc.w	r3, r2, r3
 8003c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c50:	460b      	mov	r3, r1
 8003c52:	18db      	adds	r3, r3, r3
 8003c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c56:	4613      	mov	r3, r2
 8003c58:	eb42 0303 	adc.w	r3, r2, r3
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c66:	f7fc fe31 	bl	80008cc <__aeabi_uldivmod>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <UART_SetConfig+0x2d4>)
 8003c70:	fba3 1302 	umull	r1, r3, r3, r2
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	2164      	movs	r1, #100	; 0x64
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	3332      	adds	r3, #50	; 0x32
 8003c82:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <UART_SetConfig+0x2d4>)
 8003c84:	fba2 2303 	umull	r2, r3, r2, r3
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	f003 0207 	and.w	r2, r3, #7
 8003c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4422      	add	r2, r4
 8003c96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c98:	e106      	b.n	8003ea8 <UART_SetConfig+0x4d8>
 8003c9a:	bf00      	nop
 8003c9c:	40011000 	.word	0x40011000
 8003ca0:	40011400 	.word	0x40011400
 8003ca4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cac:	2200      	movs	r2, #0
 8003cae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003cb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003cba:	4642      	mov	r2, r8
 8003cbc:	464b      	mov	r3, r9
 8003cbe:	1891      	adds	r1, r2, r2
 8003cc0:	6239      	str	r1, [r7, #32]
 8003cc2:	415b      	adcs	r3, r3
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cca:	4641      	mov	r1, r8
 8003ccc:	1854      	adds	r4, r2, r1
 8003cce:	4649      	mov	r1, r9
 8003cd0:	eb43 0501 	adc.w	r5, r3, r1
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	00eb      	lsls	r3, r5, #3
 8003cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ce2:	00e2      	lsls	r2, r4, #3
 8003ce4:	4614      	mov	r4, r2
 8003ce6:	461d      	mov	r5, r3
 8003ce8:	4643      	mov	r3, r8
 8003cea:	18e3      	adds	r3, r4, r3
 8003cec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cf0:	464b      	mov	r3, r9
 8003cf2:	eb45 0303 	adc.w	r3, r5, r3
 8003cf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d16:	4629      	mov	r1, r5
 8003d18:	008b      	lsls	r3, r1, #2
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d20:	4621      	mov	r1, r4
 8003d22:	008a      	lsls	r2, r1, #2
 8003d24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d28:	f7fc fdd0 	bl	80008cc <__aeabi_uldivmod>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4b60      	ldr	r3, [pc, #384]	; (8003eb4 <UART_SetConfig+0x4e4>)
 8003d32:	fba3 2302 	umull	r2, r3, r3, r2
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	011c      	lsls	r4, r3, #4
 8003d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	464b      	mov	r3, r9
 8003d50:	1891      	adds	r1, r2, r2
 8003d52:	61b9      	str	r1, [r7, #24]
 8003d54:	415b      	adcs	r3, r3
 8003d56:	61fb      	str	r3, [r7, #28]
 8003d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d5c:	4641      	mov	r1, r8
 8003d5e:	1851      	adds	r1, r2, r1
 8003d60:	6139      	str	r1, [r7, #16]
 8003d62:	4649      	mov	r1, r9
 8003d64:	414b      	adcs	r3, r1
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d74:	4659      	mov	r1, fp
 8003d76:	00cb      	lsls	r3, r1, #3
 8003d78:	4651      	mov	r1, sl
 8003d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d7e:	4651      	mov	r1, sl
 8003d80:	00ca      	lsls	r2, r1, #3
 8003d82:	4610      	mov	r0, r2
 8003d84:	4619      	mov	r1, r3
 8003d86:	4603      	mov	r3, r0
 8003d88:	4642      	mov	r2, r8
 8003d8a:	189b      	adds	r3, r3, r2
 8003d8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d90:	464b      	mov	r3, r9
 8003d92:	460a      	mov	r2, r1
 8003d94:	eb42 0303 	adc.w	r3, r2, r3
 8003d98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003da6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003db4:	4649      	mov	r1, r9
 8003db6:	008b      	lsls	r3, r1, #2
 8003db8:	4641      	mov	r1, r8
 8003dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dbe:	4641      	mov	r1, r8
 8003dc0:	008a      	lsls	r2, r1, #2
 8003dc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003dc6:	f7fc fd81 	bl	80008cc <__aeabi_uldivmod>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4b38      	ldr	r3, [pc, #224]	; (8003eb4 <UART_SetConfig+0x4e4>)
 8003dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	2264      	movs	r2, #100	; 0x64
 8003dda:	fb02 f303 	mul.w	r3, r2, r3
 8003dde:	1acb      	subs	r3, r1, r3
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	3332      	adds	r3, #50	; 0x32
 8003de4:	4a33      	ldr	r2, [pc, #204]	; (8003eb4 <UART_SetConfig+0x4e4>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003df0:	441c      	add	r4, r3
 8003df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003df6:	2200      	movs	r2, #0
 8003df8:	673b      	str	r3, [r7, #112]	; 0x70
 8003dfa:	677a      	str	r2, [r7, #116]	; 0x74
 8003dfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e00:	4642      	mov	r2, r8
 8003e02:	464b      	mov	r3, r9
 8003e04:	1891      	adds	r1, r2, r2
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	415b      	adcs	r3, r3
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e10:	4641      	mov	r1, r8
 8003e12:	1851      	adds	r1, r2, r1
 8003e14:	6039      	str	r1, [r7, #0]
 8003e16:	4649      	mov	r1, r9
 8003e18:	414b      	adcs	r3, r1
 8003e1a:	607b      	str	r3, [r7, #4]
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e28:	4659      	mov	r1, fp
 8003e2a:	00cb      	lsls	r3, r1, #3
 8003e2c:	4651      	mov	r1, sl
 8003e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e32:	4651      	mov	r1, sl
 8003e34:	00ca      	lsls	r2, r1, #3
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4642      	mov	r2, r8
 8003e3e:	189b      	adds	r3, r3, r2
 8003e40:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e42:	464b      	mov	r3, r9
 8003e44:	460a      	mov	r2, r1
 8003e46:	eb42 0303 	adc.w	r3, r2, r3
 8003e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	663b      	str	r3, [r7, #96]	; 0x60
 8003e56:	667a      	str	r2, [r7, #100]	; 0x64
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e64:	4649      	mov	r1, r9
 8003e66:	008b      	lsls	r3, r1, #2
 8003e68:	4641      	mov	r1, r8
 8003e6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e6e:	4641      	mov	r1, r8
 8003e70:	008a      	lsls	r2, r1, #2
 8003e72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e76:	f7fc fd29 	bl	80008cc <__aeabi_uldivmod>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <UART_SetConfig+0x4e4>)
 8003e80:	fba3 1302 	umull	r1, r3, r3, r2
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	2164      	movs	r1, #100	; 0x64
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	3332      	adds	r3, #50	; 0x32
 8003e92:	4a08      	ldr	r2, [pc, #32]	; (8003eb4 <UART_SetConfig+0x4e4>)
 8003e94:	fba2 2303 	umull	r2, r3, r2, r3
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	f003 020f 	and.w	r2, r3, #15
 8003e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4422      	add	r2, r4
 8003ea6:	609a      	str	r2, [r3, #8]
}
 8003ea8:	bf00      	nop
 8003eaa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eb4:	51eb851f 	.word	0x51eb851f

08003eb8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003ebc:	4904      	ldr	r1, [pc, #16]	; (8003ed0 <MX_FATFS_Init+0x18>)
 8003ebe:	4805      	ldr	r0, [pc, #20]	; (8003ed4 <MX_FATFS_Init+0x1c>)
 8003ec0:	f003 f9c8 	bl	8007254 <FATFS_LinkDriver>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <MX_FATFS_Init+0x20>)
 8003eca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003ecc:	bf00      	nop
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	200025bc 	.word	0x200025bc
 8003ed4:	20000010 	.word	0x20000010
 8003ed8:	200025b8 	.word	0x200025b8

08003edc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003ee0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fd f819 	bl	8000f30 <SD_disk_initialize>
 8003efe:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fd f8f1 	bl	80010fc <SD_disk_status>
 8003f1a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	4603      	mov	r3, r0
 8003f32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8003f34:	7bf8      	ldrb	r0, [r7, #15]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	f7fd f8f4 	bl	8001128 <SD_disk_read>
 8003f40:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	4603      	mov	r3, r0
 8003f58:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8003f5a:	7bf8      	ldrb	r0, [r7, #15]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	68b9      	ldr	r1, [r7, #8]
 8003f62:	f7fd f94b 	bl	80011fc <SD_disk_write>
 8003f66:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	603a      	str	r2, [r7, #0]
 8003f7a:	71fb      	strb	r3, [r7, #7]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8003f80:	79b9      	ldrb	r1, [r7, #6]
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fd f9bc 	bl	8001304 <SD_disk_ioctl>
 8003f8c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	4a08      	ldr	r2, [pc, #32]	; (8003fc8 <disk_status+0x30>)
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	79fa      	ldrb	r2, [r7, #7]
 8003fb0:	4905      	ldr	r1, [pc, #20]	; (8003fc8 <disk_status+0x30>)
 8003fb2:	440a      	add	r2, r1
 8003fb4:	7a12      	ldrb	r2, [r2, #8]
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	4798      	blx	r3
 8003fba:	4603      	mov	r3, r0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	200027e8 	.word	0x200027e8

08003fcc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	4a0d      	ldr	r2, [pc, #52]	; (8004014 <disk_initialize+0x48>)
 8003fde:	5cd3      	ldrb	r3, [r2, r3]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d111      	bne.n	8004008 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	4a0b      	ldr	r2, [pc, #44]	; (8004014 <disk_initialize+0x48>)
 8003fe8:	2101      	movs	r1, #1
 8003fea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	4a09      	ldr	r2, [pc, #36]	; (8004014 <disk_initialize+0x48>)
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	79fa      	ldrb	r2, [r7, #7]
 8003ffa:	4906      	ldr	r1, [pc, #24]	; (8004014 <disk_initialize+0x48>)
 8003ffc:	440a      	add	r2, r1
 8003ffe:	7a12      	ldrb	r2, [r2, #8]
 8004000:	4610      	mov	r0, r2
 8004002:	4798      	blx	r3
 8004004:	4603      	mov	r3, r0
 8004006:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004008:	7bfb      	ldrb	r3, [r7, #15]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	200027e8 	.word	0x200027e8

08004018 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004018:	b590      	push	{r4, r7, lr}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	4603      	mov	r3, r0
 8004026:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <disk_read+0x3c>)
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	689c      	ldr	r4, [r3, #8]
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	4a07      	ldr	r2, [pc, #28]	; (8004054 <disk_read+0x3c>)
 8004038:	4413      	add	r3, r2
 800403a:	7a18      	ldrb	r0, [r3, #8]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	47a0      	blx	r4
 8004044:	4603      	mov	r3, r0
 8004046:	75fb      	strb	r3, [r7, #23]
  return res;
 8004048:	7dfb      	ldrb	r3, [r7, #23]
}
 800404a:	4618      	mov	r0, r3
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	bd90      	pop	{r4, r7, pc}
 8004052:	bf00      	nop
 8004054:	200027e8 	.word	0x200027e8

08004058 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004058:	b590      	push	{r4, r7, lr}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	4603      	mov	r3, r0
 8004066:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	4a0a      	ldr	r2, [pc, #40]	; (8004094 <disk_write+0x3c>)
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	68dc      	ldr	r4, [r3, #12]
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	4a07      	ldr	r2, [pc, #28]	; (8004094 <disk_write+0x3c>)
 8004078:	4413      	add	r3, r2
 800407a:	7a18      	ldrb	r0, [r3, #8]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	47a0      	blx	r4
 8004084:	4603      	mov	r3, r0
 8004086:	75fb      	strb	r3, [r7, #23]
  return res;
 8004088:	7dfb      	ldrb	r3, [r7, #23]
}
 800408a:	4618      	mov	r0, r3
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	bd90      	pop	{r4, r7, pc}
 8004092:	bf00      	nop
 8004094:	200027e8 	.word	0x200027e8

08004098 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	603a      	str	r2, [r7, #0]
 80040a2:	71fb      	strb	r3, [r7, #7]
 80040a4:	460b      	mov	r3, r1
 80040a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80040a8:	79fb      	ldrb	r3, [r7, #7]
 80040aa:	4a09      	ldr	r2, [pc, #36]	; (80040d0 <disk_ioctl+0x38>)
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	79fa      	ldrb	r2, [r7, #7]
 80040b6:	4906      	ldr	r1, [pc, #24]	; (80040d0 <disk_ioctl+0x38>)
 80040b8:	440a      	add	r2, r1
 80040ba:	7a10      	ldrb	r0, [r2, #8]
 80040bc:	79b9      	ldrb	r1, [r7, #6]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	4798      	blx	r3
 80040c2:	4603      	mov	r3, r0
 80040c4:	73fb      	strb	r3, [r7, #15]
  return res;
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	200027e8 	.word	0x200027e8

080040d4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3301      	adds	r3, #1
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80040e4:	89fb      	ldrh	r3, [r7, #14]
 80040e6:	021b      	lsls	r3, r3, #8
 80040e8:	b21a      	sxth	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	b21b      	sxth	r3, r3
 80040f0:	4313      	orrs	r3, r2
 80040f2:	b21b      	sxth	r3, r3
 80040f4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80040f6:	89fb      	ldrh	r3, [r7, #14]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3303      	adds	r3, #3
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	021b      	lsls	r3, r3, #8
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	3202      	adds	r2, #2
 800411c:	7812      	ldrb	r2, [r2, #0]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	3201      	adds	r2, #1
 800412a:	7812      	ldrb	r2, [r2, #0]
 800412c:	4313      	orrs	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	7812      	ldrb	r2, [r2, #0]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
	return rv;
 800413c:	68fb      	ldr	r3, [r7, #12]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	460b      	mov	r3, r1
 8004154:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	887a      	ldrh	r2, [r7, #2]
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]
 8004162:	887b      	ldrh	r3, [r7, #2]
 8004164:	0a1b      	lsrs	r3, r3, #8
 8004166:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	887a      	ldrh	r2, [r7, #2]
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	701a      	strb	r2, [r3, #0]
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	0a1b      	lsrs	r3, r3, #8
 800419a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	607a      	str	r2, [r7, #4]
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	0a1b      	lsrs	r3, r3, #8
 80041be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	701a      	strb	r2, [r3, #0]
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00d      	beq.n	800420e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	1c53      	adds	r3, r2, #1
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	1c59      	adds	r1, r3, #1
 80041fc:	6179      	str	r1, [r7, #20]
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3b01      	subs	r3, #1
 8004206:	607b      	str	r3, [r7, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f1      	bne.n	80041f2 <mem_cpy+0x1a>
	}
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800421a:	b480      	push	{r7}
 800421c:	b087      	sub	sp, #28
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	617a      	str	r2, [r7, #20]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3b01      	subs	r3, #1
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f3      	bne.n	800422a <mem_set+0x10>
}
 8004242:	bf00      	nop
 8004244:	bf00      	nop
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004250:	b480      	push	{r7}
 8004252:	b089      	sub	sp, #36	; 0x24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	61fa      	str	r2, [r7, #28]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	4619      	mov	r1, r3
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	61ba      	str	r2, [r7, #24]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	1acb      	subs	r3, r1, r3
 800427c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3b01      	subs	r3, #1
 8004282:	607b      	str	r3, [r7, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <mem_cmp+0x40>
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0eb      	beq.n	8004268 <mem_cmp+0x18>

	return r;
 8004290:	697b      	ldr	r3, [r7, #20]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3724      	adds	r7, #36	; 0x24
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80042a8:	e002      	b.n	80042b0 <chk_chr+0x12>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3301      	adds	r3, #1
 80042ae:	607b      	str	r3, [r7, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <chk_chr+0x26>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d1f2      	bne.n	80042aa <chk_chr+0xc>
	return *str;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	781b      	ldrb	r3, [r3, #0]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80042de:	2300      	movs	r3, #0
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	e029      	b.n	800433c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80042e8:	4a27      	ldr	r2, [pc, #156]	; (8004388 <chk_lock+0xb4>)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	4413      	add	r3, r2
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d01d      	beq.n	8004332 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80042f6:	4a24      	ldr	r2, [pc, #144]	; (8004388 <chk_lock+0xb4>)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	4413      	add	r3, r2
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d116      	bne.n	8004336 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004308:	4a1f      	ldr	r2, [pc, #124]	; (8004388 <chk_lock+0xb4>)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	4413      	add	r3, r2
 8004310:	3304      	adds	r3, #4
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004318:	429a      	cmp	r2, r3
 800431a:	d10c      	bne.n	8004336 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800431c:	4a1a      	ldr	r2, [pc, #104]	; (8004388 <chk_lock+0xb4>)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	4413      	add	r3, r2
 8004324:	3308      	adds	r3, #8
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800432c:	429a      	cmp	r2, r3
 800432e:	d102      	bne.n	8004336 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004330:	e007      	b.n	8004342 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004332:	2301      	movs	r3, #1
 8004334:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3301      	adds	r3, #1
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d9d2      	bls.n	80042e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d109      	bne.n	800435c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d102      	bne.n	8004354 <chk_lock+0x80>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b02      	cmp	r3, #2
 8004352:	d101      	bne.n	8004358 <chk_lock+0x84>
 8004354:	2300      	movs	r3, #0
 8004356:	e010      	b.n	800437a <chk_lock+0xa6>
 8004358:	2312      	movs	r3, #18
 800435a:	e00e      	b.n	800437a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d108      	bne.n	8004374 <chk_lock+0xa0>
 8004362:	4a09      	ldr	r2, [pc, #36]	; (8004388 <chk_lock+0xb4>)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	4413      	add	r3, r2
 800436a:	330c      	adds	r3, #12
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004372:	d101      	bne.n	8004378 <chk_lock+0xa4>
 8004374:	2310      	movs	r3, #16
 8004376:	e000      	b.n	800437a <chk_lock+0xa6>
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	200025c8 	.word	0x200025c8

0800438c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004392:	2300      	movs	r3, #0
 8004394:	607b      	str	r3, [r7, #4]
 8004396:	e002      	b.n	800439e <enq_lock+0x12>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3301      	adds	r3, #1
 800439c:	607b      	str	r3, [r7, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d806      	bhi.n	80043b2 <enq_lock+0x26>
 80043a4:	4a09      	ldr	r2, [pc, #36]	; (80043cc <enq_lock+0x40>)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	4413      	add	r3, r2
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f2      	bne.n	8004398 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	bf14      	ite	ne
 80043b8:	2301      	movne	r3, #1
 80043ba:	2300      	moveq	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
}
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	200025c8 	.word	0x200025c8

080043d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	e01f      	b.n	8004420 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80043e0:	4a41      	ldr	r2, [pc, #260]	; (80044e8 <inc_lock+0x118>)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	4413      	add	r3, r2
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d113      	bne.n	800441a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80043f2:	4a3d      	ldr	r2, [pc, #244]	; (80044e8 <inc_lock+0x118>)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	4413      	add	r3, r2
 80043fa:	3304      	adds	r3, #4
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004402:	429a      	cmp	r2, r3
 8004404:	d109      	bne.n	800441a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004406:	4a38      	ldr	r2, [pc, #224]	; (80044e8 <inc_lock+0x118>)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	4413      	add	r3, r2
 800440e:	3308      	adds	r3, #8
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004416:	429a      	cmp	r2, r3
 8004418:	d006      	beq.n	8004428 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3301      	adds	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d9dc      	bls.n	80043e0 <inc_lock+0x10>
 8004426:	e000      	b.n	800442a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004428:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d132      	bne.n	8004496 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	e002      	b.n	800443c <inc_lock+0x6c>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3301      	adds	r3, #1
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d806      	bhi.n	8004450 <inc_lock+0x80>
 8004442:	4a29      	ldr	r2, [pc, #164]	; (80044e8 <inc_lock+0x118>)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	4413      	add	r3, r2
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f2      	bne.n	8004436 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d101      	bne.n	800445a <inc_lock+0x8a>
 8004456:	2300      	movs	r3, #0
 8004458:	e040      	b.n	80044dc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4922      	ldr	r1, [pc, #136]	; (80044e8 <inc_lock+0x118>)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	440b      	add	r3, r1
 8004466:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	491e      	ldr	r1, [pc, #120]	; (80044e8 <inc_lock+0x118>)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	440b      	add	r3, r1
 8004474:	3304      	adds	r3, #4
 8004476:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	695a      	ldr	r2, [r3, #20]
 800447c:	491a      	ldr	r1, [pc, #104]	; (80044e8 <inc_lock+0x118>)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	440b      	add	r3, r1
 8004484:	3308      	adds	r3, #8
 8004486:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004488:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <inc_lock+0x118>)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	4413      	add	r3, r2
 8004490:	330c      	adds	r3, #12
 8004492:	2200      	movs	r2, #0
 8004494:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <inc_lock+0xe0>
 800449c:	4a12      	ldr	r2, [pc, #72]	; (80044e8 <inc_lock+0x118>)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	4413      	add	r3, r2
 80044a4:	330c      	adds	r3, #12
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <inc_lock+0xe0>
 80044ac:	2300      	movs	r3, #0
 80044ae:	e015      	b.n	80044dc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d108      	bne.n	80044c8 <inc_lock+0xf8>
 80044b6:	4a0c      	ldr	r2, [pc, #48]	; (80044e8 <inc_lock+0x118>)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	4413      	add	r3, r2
 80044be:	330c      	adds	r3, #12
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	3301      	adds	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	e001      	b.n	80044cc <inc_lock+0xfc>
 80044c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044cc:	4906      	ldr	r1, [pc, #24]	; (80044e8 <inc_lock+0x118>)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	440b      	add	r3, r1
 80044d4:	330c      	adds	r3, #12
 80044d6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3301      	adds	r3, #1
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	200025c8 	.word	0x200025c8

080044ec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	607b      	str	r3, [r7, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d825      	bhi.n	800454c <dec_lock+0x60>
		n = Files[i].ctr;
 8004500:	4a17      	ldr	r2, [pc, #92]	; (8004560 <dec_lock+0x74>)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	4413      	add	r3, r2
 8004508:	330c      	adds	r3, #12
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800450e:	89fb      	ldrh	r3, [r7, #14]
 8004510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004514:	d101      	bne.n	800451a <dec_lock+0x2e>
 8004516:	2300      	movs	r3, #0
 8004518:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800451a:	89fb      	ldrh	r3, [r7, #14]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <dec_lock+0x3a>
 8004520:	89fb      	ldrh	r3, [r7, #14]
 8004522:	3b01      	subs	r3, #1
 8004524:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004526:	4a0e      	ldr	r2, [pc, #56]	; (8004560 <dec_lock+0x74>)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	4413      	add	r3, r2
 800452e:	330c      	adds	r3, #12
 8004530:	89fa      	ldrh	r2, [r7, #14]
 8004532:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004534:	89fb      	ldrh	r3, [r7, #14]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d105      	bne.n	8004546 <dec_lock+0x5a>
 800453a:	4a09      	ldr	r2, [pc, #36]	; (8004560 <dec_lock+0x74>)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	4413      	add	r3, r2
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	737b      	strb	r3, [r7, #13]
 800454a:	e001      	b.n	8004550 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800454c:	2302      	movs	r3, #2
 800454e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004550:	7b7b      	ldrb	r3, [r7, #13]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	200025c8 	.word	0x200025c8

08004564 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	e010      	b.n	8004594 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004572:	4a0d      	ldr	r2, [pc, #52]	; (80045a8 <clear_lock+0x44>)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	4413      	add	r3, r2
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	429a      	cmp	r2, r3
 8004580:	d105      	bne.n	800458e <clear_lock+0x2a>
 8004582:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <clear_lock+0x44>)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	4413      	add	r3, r2
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3301      	adds	r3, #1
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d9eb      	bls.n	8004572 <clear_lock+0xe>
	}
}
 800459a:	bf00      	nop
 800459c:	bf00      	nop
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	200025c8 	.word	0x200025c8

080045ac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	78db      	ldrb	r3, [r3, #3]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d034      	beq.n	800462a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	7858      	ldrb	r0, [r3, #1]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80045d0:	2301      	movs	r3, #1
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	f7ff fd40 	bl	8004058 <disk_write>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
 80045e2:	e022      	b.n	800462a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	1ad2      	subs	r2, r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d217      	bcs.n	800462a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	789b      	ldrb	r3, [r3, #2]
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	e010      	b.n	8004624 <sync_window+0x78>
					wsect += fs->fsize;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4413      	add	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	7858      	ldrb	r0, [r3, #1]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004616:	2301      	movs	r3, #1
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	f7ff fd1d 	bl	8004058 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	3b01      	subs	r3, #1
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d8eb      	bhi.n	8004602 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800462a:	7bfb      	ldrb	r3, [r7, #15]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d01b      	beq.n	8004684 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ffad 	bl	80045ac <sync_window>
 8004652:	4603      	mov	r3, r0
 8004654:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d113      	bne.n	8004684 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	7858      	ldrb	r0, [r3, #1]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004666:	2301      	movs	r3, #1
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	f7ff fcd5 	bl	8004018 <disk_read>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d004      	beq.n	800467e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004678:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff ff87 	bl	80045ac <sync_window>
 800469e:	4603      	mov	r3, r0
 80046a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d159      	bne.n	800475c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d149      	bne.n	8004744 <sync_fs+0xb4>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	791b      	ldrb	r3, [r3, #4]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d145      	bne.n	8004744 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	899b      	ldrh	r3, [r3, #12]
 80046c2:	461a      	mov	r2, r3
 80046c4:	2100      	movs	r1, #0
 80046c6:	f7ff fda8 	bl	800421a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3338      	adds	r3, #56	; 0x38
 80046ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80046d2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fd37 	bl	800414a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3338      	adds	r3, #56	; 0x38
 80046e0:	4921      	ldr	r1, [pc, #132]	; (8004768 <sync_fs+0xd8>)
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fd4c 	bl	8004180 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3338      	adds	r3, #56	; 0x38
 80046ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80046f0:	491e      	ldr	r1, [pc, #120]	; (800476c <sync_fs+0xdc>)
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff fd44 	bl	8004180 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3338      	adds	r3, #56	; 0x38
 80046fc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	4619      	mov	r1, r3
 8004706:	4610      	mov	r0, r2
 8004708:	f7ff fd3a 	bl	8004180 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3338      	adds	r3, #56	; 0x38
 8004710:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	4619      	mov	r1, r3
 800471a:	4610      	mov	r0, r2
 800471c:	f7ff fd30 	bl	8004180 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	7858      	ldrb	r0, [r3, #1]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004738:	2301      	movs	r3, #1
 800473a:	f7ff fc8d 	bl	8004058 <disk_write>
			fs->fsi_flag = 0;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	785b      	ldrb	r3, [r3, #1]
 8004748:	2200      	movs	r2, #0
 800474a:	2100      	movs	r1, #0
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff fca3 	bl	8004098 <disk_ioctl>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <sync_fs+0xcc>
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800475c:	7bfb      	ldrb	r3, [r7, #15]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	41615252 	.word	0x41615252
 800476c:	61417272 	.word	0x61417272

08004770 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	3b02      	subs	r3, #2
 800477e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	3b02      	subs	r3, #2
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d301      	bcc.n	8004790 <clust2sect+0x20>
 800478c:	2300      	movs	r3, #0
 800478e:	e008      	b.n	80047a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	895b      	ldrh	r3, [r3, #10]
 8004794:	461a      	mov	r2, r3
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	fb03 f202 	mul.w	r2, r3, r2
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a0:	4413      	add	r3, r2
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b086      	sub	sp, #24
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d904      	bls.n	80047ce <get_fat+0x20>
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d302      	bcc.n	80047d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80047ce:	2301      	movs	r3, #1
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	e0bb      	b.n	800494c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80047d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b03      	cmp	r3, #3
 80047e0:	f000 8083 	beq.w	80048ea <get_fat+0x13c>
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	f300 80a7 	bgt.w	8004938 <get_fat+0x18a>
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d002      	beq.n	80047f4 <get_fat+0x46>
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d056      	beq.n	80048a0 <get_fat+0xf2>
 80047f2:	e0a1      	b.n	8004938 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	899b      	ldrh	r3, [r3, #12]
 800480a:	4619      	mov	r1, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004812:	4413      	add	r3, r2
 8004814:	4619      	mov	r1, r3
 8004816:	6938      	ldr	r0, [r7, #16]
 8004818:	f7ff ff0c 	bl	8004634 <move_window>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	f040 808d 	bne.w	800493e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	60fa      	str	r2, [r7, #12]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	8992      	ldrh	r2, [r2, #12]
 800482e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004832:	fb01 f202 	mul.w	r2, r1, r2
 8004836:	1a9b      	subs	r3, r3, r2
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4413      	add	r3, r2
 800483c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004840:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	899b      	ldrh	r3, [r3, #12]
 800484a:	4619      	mov	r1, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004852:	4413      	add	r3, r2
 8004854:	4619      	mov	r1, r3
 8004856:	6938      	ldr	r0, [r7, #16]
 8004858:	f7ff feec 	bl	8004634 <move_window>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d16f      	bne.n	8004942 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	899b      	ldrh	r3, [r3, #12]
 8004866:	461a      	mov	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	fbb3 f1f2 	udiv	r1, r3, r2
 800486e:	fb01 f202 	mul.w	r2, r1, r2
 8004872:	1a9b      	subs	r3, r3, r2
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4413      	add	r3, r2
 8004878:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	461a      	mov	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4313      	orrs	r3, r2
 8004884:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <get_fat+0xe8>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	e002      	b.n	800489c <get_fat+0xee>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800489c:	617b      	str	r3, [r7, #20]
			break;
 800489e:	e055      	b.n	800494c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	899b      	ldrh	r3, [r3, #12]
 80048a8:	085b      	lsrs	r3, r3, #1
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	4619      	mov	r1, r3
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80048b4:	4413      	add	r3, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	6938      	ldr	r0, [r7, #16]
 80048ba:	f7ff febb 	bl	8004634 <move_window>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d140      	bne.n	8004946 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	8992      	ldrh	r2, [r2, #12]
 80048d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80048d6:	fb00 f202 	mul.w	r2, r0, r2
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	440b      	add	r3, r1
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff fbf8 	bl	80040d4 <ld_word>
 80048e4:	4603      	mov	r3, r0
 80048e6:	617b      	str	r3, [r7, #20]
			break;
 80048e8:	e030      	b.n	800494c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	899b      	ldrh	r3, [r3, #12]
 80048f2:	089b      	lsrs	r3, r3, #2
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	4619      	mov	r1, r3
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80048fe:	4413      	add	r3, r2
 8004900:	4619      	mov	r1, r3
 8004902:	6938      	ldr	r0, [r7, #16]
 8004904:	f7ff fe96 	bl	8004634 <move_window>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d11d      	bne.n	800494a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	8992      	ldrh	r2, [r2, #12]
 800491c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004920:	fb00 f202 	mul.w	r2, r0, r2
 8004924:	1a9b      	subs	r3, r3, r2
 8004926:	440b      	add	r3, r1
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff fbeb 	bl	8004104 <ld_dword>
 800492e:	4603      	mov	r3, r0
 8004930:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004934:	617b      	str	r3, [r7, #20]
			break;
 8004936:	e009      	b.n	800494c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004938:	2301      	movs	r3, #1
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	e006      	b.n	800494c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800493e:	bf00      	nop
 8004940:	e004      	b.n	800494c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004942:	bf00      	nop
 8004944:	e002      	b.n	800494c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004946:	bf00      	nop
 8004948:	e000      	b.n	800494c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800494a:	bf00      	nop
		}
	}

	return val;
 800494c:	697b      	ldr	r3, [r7, #20]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004956:	b590      	push	{r4, r7, lr}
 8004958:	b089      	sub	sp, #36	; 0x24
 800495a:	af00      	add	r7, sp, #0
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004962:	2302      	movs	r3, #2
 8004964:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b01      	cmp	r3, #1
 800496a:	f240 8109 	bls.w	8004b80 <put_fat+0x22a>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	429a      	cmp	r2, r3
 8004976:	f080 8103 	bcs.w	8004b80 <put_fat+0x22a>
		switch (fs->fs_type) {
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b03      	cmp	r3, #3
 8004980:	f000 80b6 	beq.w	8004af0 <put_fat+0x19a>
 8004984:	2b03      	cmp	r3, #3
 8004986:	f300 80fb 	bgt.w	8004b80 <put_fat+0x22a>
 800498a:	2b01      	cmp	r3, #1
 800498c:	d003      	beq.n	8004996 <put_fat+0x40>
 800498e:	2b02      	cmp	r3, #2
 8004990:	f000 8083 	beq.w	8004a9a <put_fat+0x144>
 8004994:	e0f4      	b.n	8004b80 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	61bb      	str	r3, [r7, #24]
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	085b      	lsrs	r3, r3, #1
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4413      	add	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	899b      	ldrh	r3, [r3, #12]
 80049ac:	4619      	mov	r1, r3
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80049b4:	4413      	add	r3, r2
 80049b6:	4619      	mov	r1, r3
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7ff fe3b 	bl	8004634 <move_window>
 80049be:	4603      	mov	r3, r0
 80049c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80049c2:	7ffb      	ldrb	r3, [r7, #31]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f040 80d4 	bne.w	8004b72 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	61ba      	str	r2, [r7, #24]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	8992      	ldrh	r2, [r2, #12]
 80049da:	fbb3 f0f2 	udiv	r0, r3, r2
 80049de:	fb00 f202 	mul.w	r2, r0, r2
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	440b      	add	r3, r1
 80049e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00d      	beq.n	8004a0e <put_fat+0xb8>
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	b25b      	sxtb	r3, r3
 80049f8:	f003 030f 	and.w	r3, r3, #15
 80049fc:	b25a      	sxtb	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	b25b      	sxtb	r3, r3
 8004a06:	4313      	orrs	r3, r2
 8004a08:	b25b      	sxtb	r3, r3
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	e001      	b.n	8004a12 <put_fat+0xbc>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	899b      	ldrh	r3, [r3, #12]
 8004a24:	4619      	mov	r1, r3
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a2c:	4413      	add	r3, r2
 8004a2e:	4619      	mov	r1, r3
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f7ff fdff 	bl	8004634 <move_window>
 8004a36:	4603      	mov	r3, r0
 8004a38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a3a:	7ffb      	ldrb	r3, [r7, #31]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f040 809a 	bne.w	8004b76 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	899b      	ldrh	r3, [r3, #12]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a54:	fb00 f202 	mul.w	r2, r0, r2
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <put_fat+0x11a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	091b      	lsrs	r3, r3, #4
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	e00e      	b.n	8004a8e <put_fat+0x138>
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	b25b      	sxtb	r3, r3
 8004a76:	f023 030f 	bic.w	r3, r3, #15
 8004a7a:	b25a      	sxtb	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	0a1b      	lsrs	r3, r3, #8
 8004a80:	b25b      	sxtb	r3, r3
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	b25b      	sxtb	r3, r3
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	b25b      	sxtb	r3, r3
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	70da      	strb	r2, [r3, #3]
			break;
 8004a98:	e072      	b.n	8004b80 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	899b      	ldrh	r3, [r3, #12]
 8004aa2:	085b      	lsrs	r3, r3, #1
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aae:	4413      	add	r3, r2
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f7ff fdbe 	bl	8004634 <move_window>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004abc:	7ffb      	ldrb	r3, [r7, #31]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d15b      	bne.n	8004b7a <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	8992      	ldrh	r2, [r2, #12]
 8004ad0:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ad4:	fb00 f202 	mul.w	r2, r0, r2
 8004ad8:	1a9b      	subs	r3, r3, r2
 8004ada:	440b      	add	r3, r1
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	b292      	uxth	r2, r2
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff fb31 	bl	800414a <st_word>
			fs->wflag = 1;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	70da      	strb	r2, [r3, #3]
			break;
 8004aee:	e047      	b.n	8004b80 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	899b      	ldrh	r3, [r3, #12]
 8004af8:	089b      	lsrs	r3, r3, #2
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	4619      	mov	r1, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b04:	4413      	add	r3, r2
 8004b06:	4619      	mov	r1, r3
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f7ff fd93 	bl	8004634 <move_window>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b12:	7ffb      	ldrb	r3, [r7, #31]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d132      	bne.n	8004b7e <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	8992      	ldrh	r2, [r2, #12]
 8004b2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b30:	fb00 f202 	mul.w	r2, r0, r2
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	440b      	add	r3, r1
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff fae3 	bl	8004104 <ld_dword>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004b44:	4323      	orrs	r3, r4
 8004b46:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	8992      	ldrh	r2, [r2, #12]
 8004b56:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b5a:	fb00 f202 	mul.w	r2, r0, r2
 8004b5e:	1a9b      	subs	r3, r3, r2
 8004b60:	440b      	add	r3, r1
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fb0b 	bl	8004180 <st_dword>
			fs->wflag = 1;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	70da      	strb	r2, [r3, #3]
			break;
 8004b70:	e006      	b.n	8004b80 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004b72:	bf00      	nop
 8004b74:	e004      	b.n	8004b80 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004b76:	bf00      	nop
 8004b78:	e002      	b.n	8004b80 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004b7a:	bf00      	nop
 8004b7c:	e000      	b.n	8004b80 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004b7e:	bf00      	nop
		}
	}
	return res;
 8004b80:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3724      	adds	r7, #36	; 0x24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd90      	pop	{r4, r7, pc}

08004b8a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b088      	sub	sp, #32
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d904      	bls.n	8004bb0 <remove_chain+0x26>
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d301      	bcc.n	8004bb4 <remove_chain+0x2a>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e04b      	b.n	8004c4c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004bba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	69b8      	ldr	r0, [r7, #24]
 8004bc2:	f7ff fec8 	bl	8004956 <put_fat>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004bca:	7ffb      	ldrb	r3, [r7, #31]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <remove_chain+0x4a>
 8004bd0:	7ffb      	ldrb	r3, [r7, #31]
 8004bd2:	e03b      	b.n	8004c4c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f7ff fde9 	bl	80047ae <get_fat>
 8004bdc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d031      	beq.n	8004c48 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <remove_chain+0x64>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e02e      	b.n	8004c4c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf4:	d101      	bne.n	8004bfa <remove_chain+0x70>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e028      	b.n	8004c4c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	69b8      	ldr	r0, [r7, #24]
 8004c00:	f7ff fea9 	bl	8004956 <put_fat>
 8004c04:	4603      	mov	r3, r0
 8004c06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004c08:	7ffb      	ldrb	r3, [r7, #31]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <remove_chain+0x88>
 8004c0e:	7ffb      	ldrb	r3, [r7, #31]
 8004c10:	e01c      	b.n	8004c4c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	699a      	ldr	r2, [r3, #24]
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	3b02      	subs	r3, #2
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d20b      	bcs.n	8004c38 <remove_chain+0xae>
			fs->free_clst++;
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	791b      	ldrb	r3, [r3, #4]
 8004c2e:	f043 0301 	orr.w	r3, r3, #1
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d3c6      	bcc.n	8004bd4 <remove_chain+0x4a>
 8004c46:	e000      	b.n	8004c4a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004c48:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3720      	adds	r7, #32
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10d      	bne.n	8004c86 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d004      	beq.n	8004c80 <create_chain+0x2c>
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d31b      	bcc.n	8004cb8 <create_chain+0x64>
 8004c80:	2301      	movs	r3, #1
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	e018      	b.n	8004cb8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004c86:	6839      	ldr	r1, [r7, #0]
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff fd90 	bl	80047ae <get_fat>
 8004c8e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d801      	bhi.n	8004c9a <create_chain+0x46>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e070      	b.n	8004d7c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ca0:	d101      	bne.n	8004ca6 <create_chain+0x52>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	e06a      	b.n	8004d7c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d201      	bcs.n	8004cb4 <create_chain+0x60>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	e063      	b.n	8004d7c <create_chain+0x128>
		scl = clst;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d307      	bcc.n	8004cdc <create_chain+0x88>
				ncl = 2;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d901      	bls.n	8004cdc <create_chain+0x88>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e04f      	b.n	8004d7c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004cdc:	69f9      	ldr	r1, [r7, #28]
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7ff fd65 	bl	80047ae <get_fat>
 8004ce4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00e      	beq.n	8004d0a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d003      	beq.n	8004cfa <create_chain+0xa6>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cf8:	d101      	bne.n	8004cfe <create_chain+0xaa>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	e03e      	b.n	8004d7c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d1da      	bne.n	8004cbc <create_chain+0x68>
 8004d06:	2300      	movs	r3, #0
 8004d08:	e038      	b.n	8004d7c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004d0a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d10:	69f9      	ldr	r1, [r7, #28]
 8004d12:	6938      	ldr	r0, [r7, #16]
 8004d14:	f7ff fe1f 	bl	8004956 <put_fat>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004d1c:	7dfb      	ldrb	r3, [r7, #23]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d109      	bne.n	8004d36 <create_chain+0xe2>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d006      	beq.n	8004d36 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	6839      	ldr	r1, [r7, #0]
 8004d2c:	6938      	ldr	r0, [r7, #16]
 8004d2e:	f7ff fe12 	bl	8004956 <put_fat>
 8004d32:	4603      	mov	r3, r0
 8004d34:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004d36:	7dfb      	ldrb	r3, [r7, #23]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d116      	bne.n	8004d6a <create_chain+0x116>
		fs->last_clst = ncl;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	699a      	ldr	r2, [r3, #24]
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	3b02      	subs	r3, #2
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d804      	bhi.n	8004d5a <create_chain+0x106>
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	1e5a      	subs	r2, r3, #1
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	791b      	ldrb	r3, [r3, #4]
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	711a      	strb	r2, [r3, #4]
 8004d68:	e007      	b.n	8004d7a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d102      	bne.n	8004d76 <create_chain+0x122>
 8004d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d74:	e000      	b.n	8004d78 <create_chain+0x124>
 8004d76:	2301      	movs	r3, #1
 8004d78:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004d7a:	69fb      	ldr	r3, [r7, #28]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3720      	adds	r7, #32
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	3304      	adds	r3, #4
 8004d9a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	899b      	ldrh	r3, [r3, #12]
 8004da0:	461a      	mov	r2, r3
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	8952      	ldrh	r2, [r2, #10]
 8004dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1d1a      	adds	r2, r3, #4
 8004db6:	613a      	str	r2, [r7, #16]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <clmt_clust+0x42>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e010      	b.n	8004de8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d307      	bcc.n	8004dde <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004ddc:	e7e9      	b.n	8004db2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004dde:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	4413      	add	r3, r2
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e0a:	d204      	bcs.n	8004e16 <dir_sdi+0x22>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <dir_sdi+0x26>
		return FR_INT_ERR;
 8004e16:	2302      	movs	r3, #2
 8004e18:	e071      	b.n	8004efe <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d106      	bne.n	8004e3a <dir_sdi+0x46>
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d902      	bls.n	8004e3a <dir_sdi+0x46>
		clst = fs->dirbase;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10c      	bne.n	8004e5a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	8912      	ldrh	r2, [r2, #8]
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d301      	bcc.n	8004e50 <dir_sdi+0x5c>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e056      	b.n	8004efe <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	61da      	str	r2, [r3, #28]
 8004e58:	e02d      	b.n	8004eb6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	895b      	ldrh	r3, [r3, #10]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	899b      	ldrh	r3, [r3, #12]
 8004e64:	fb02 f303 	mul.w	r3, r2, r3
 8004e68:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004e6a:	e019      	b.n	8004ea0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6979      	ldr	r1, [r7, #20]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7ff fc9c 	bl	80047ae <get_fat>
 8004e76:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e7e:	d101      	bne.n	8004e84 <dir_sdi+0x90>
 8004e80:	2301      	movs	r3, #1
 8004e82:	e03c      	b.n	8004efe <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d904      	bls.n	8004e94 <dir_sdi+0xa0>
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d301      	bcc.n	8004e98 <dir_sdi+0xa4>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e032      	b.n	8004efe <dir_sdi+0x10a>
			ofs -= csz;
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d2e1      	bcs.n	8004e6c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004ea8:	6979      	ldr	r1, [r7, #20]
 8004eaa:	6938      	ldr	r0, [r7, #16]
 8004eac:	f7ff fc60 	bl	8004770 <clust2sect>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <dir_sdi+0xd4>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e01a      	b.n	8004efe <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69da      	ldr	r2, [r3, #28]
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	899b      	ldrh	r3, [r3, #12]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ed8:	441a      	add	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	899b      	ldrh	r3, [r3, #12]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ef0:	fb00 f202 	mul.w	r2, r0, r2
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	18ca      	adds	r2, r1, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b086      	sub	sp, #24
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	3320      	adds	r3, #32
 8004f1c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <dir_next+0x28>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f2c:	d301      	bcc.n	8004f32 <dir_next+0x2c>
 8004f2e:	2304      	movs	r3, #4
 8004f30:	e0bb      	b.n	80050aa <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	899b      	ldrh	r3, [r3, #12]
 8004f36:	461a      	mov	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f3e:	fb01 f202 	mul.w	r2, r1, r2
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f040 809d 	bne.w	8005084 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10b      	bne.n	8004f74 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	8912      	ldrh	r2, [r2, #8]
 8004f64:	4293      	cmp	r3, r2
 8004f66:	f0c0 808d 	bcc.w	8005084 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	61da      	str	r2, [r3, #28]
 8004f70:	2304      	movs	r3, #4
 8004f72:	e09a      	b.n	80050aa <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	899b      	ldrh	r3, [r3, #12]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	8952      	ldrh	r2, [r2, #10]
 8004f84:	3a01      	subs	r2, #1
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d17b      	bne.n	8005084 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	4619      	mov	r1, r3
 8004f94:	4610      	mov	r0, r2
 8004f96:	f7ff fc0a 	bl	80047ae <get_fat>
 8004f9a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d801      	bhi.n	8004fa6 <dir_next+0xa0>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e081      	b.n	80050aa <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fac:	d101      	bne.n	8004fb2 <dir_next+0xac>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e07b      	b.n	80050aa <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d359      	bcc.n	8005070 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d104      	bne.n	8004fcc <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	61da      	str	r2, [r3, #28]
 8004fc8:	2304      	movs	r3, #4
 8004fca:	e06e      	b.n	80050aa <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	f7ff fe3d 	bl	8004c54 <create_chain>
 8004fda:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <dir_next+0xe0>
 8004fe2:	2307      	movs	r3, #7
 8004fe4:	e061      	b.n	80050aa <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <dir_next+0xea>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e05c      	b.n	80050aa <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff6:	d101      	bne.n	8004ffc <dir_next+0xf6>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e056      	b.n	80050aa <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f7ff fad5 	bl	80045ac <sync_window>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <dir_next+0x106>
 8005008:	2301      	movs	r3, #1
 800500a:	e04e      	b.n	80050aa <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	899b      	ldrh	r3, [r3, #12]
 8005016:	461a      	mov	r2, r3
 8005018:	2100      	movs	r1, #0
 800501a:	f7ff f8fe 	bl	800421a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800501e:	2300      	movs	r3, #0
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	6979      	ldr	r1, [r7, #20]
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f7ff fba3 	bl	8004770 <clust2sect>
 800502a:	4602      	mov	r2, r0
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	635a      	str	r2, [r3, #52]	; 0x34
 8005030:	e012      	b.n	8005058 <dir_next+0x152>
						fs->wflag = 1;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f7ff fab7 	bl	80045ac <sync_window>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <dir_next+0x142>
 8005044:	2301      	movs	r3, #1
 8005046:	e030      	b.n	80050aa <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	3301      	adds	r3, #1
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	635a      	str	r2, [r3, #52]	; 0x34
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	895b      	ldrh	r3, [r3, #10]
 800505c:	461a      	mov	r2, r3
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	4293      	cmp	r3, r2
 8005062:	d3e6      	bcc.n	8005032 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad2      	subs	r2, r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005076:	6979      	ldr	r1, [r7, #20]
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f7ff fb79 	bl	8004770 <clust2sect>
 800507e:	4602      	mov	r2, r0
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	899b      	ldrh	r3, [r3, #12]
 8005094:	461a      	mov	r2, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	fbb3 f0f2 	udiv	r0, r3, r2
 800509c:	fb00 f202 	mul.w	r2, r0, r2
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	18ca      	adds	r2, r1, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b086      	sub	sp, #24
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80050c2:	2100      	movs	r1, #0
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff fe95 	bl	8004df4 <dir_sdi>
 80050ca:	4603      	mov	r3, r0
 80050cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d12b      	bne.n	800512c <dir_alloc+0x7a>
		n = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	4619      	mov	r1, r3
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7ff faa8 	bl	8004634 <move_window>
 80050e4:	4603      	mov	r3, r0
 80050e6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d11d      	bne.n	800512a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2be5      	cmp	r3, #229	; 0xe5
 80050f6:	d004      	beq.n	8005102 <dir_alloc+0x50>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d107      	bne.n	8005112 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	3301      	adds	r3, #1
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d102      	bne.n	8005116 <dir_alloc+0x64>
 8005110:	e00c      	b.n	800512c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005116:	2101      	movs	r1, #1
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff fef4 	bl	8004f06 <dir_next>
 800511e:	4603      	mov	r3, r0
 8005120:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005122:	7dfb      	ldrb	r3, [r7, #23]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0d7      	beq.n	80050d8 <dir_alloc+0x26>
 8005128:	e000      	b.n	800512c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800512a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800512c:	7dfb      	ldrb	r3, [r7, #23]
 800512e:	2b04      	cmp	r3, #4
 8005130:	d101      	bne.n	8005136 <dir_alloc+0x84>
 8005132:	2307      	movs	r3, #7
 8005134:	75fb      	strb	r3, [r7, #23]
	return res;
 8005136:	7dfb      	ldrb	r3, [r7, #23]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	331a      	adds	r3, #26
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe ffc0 	bl	80040d4 <ld_word>
 8005154:	4603      	mov	r3, r0
 8005156:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b03      	cmp	r3, #3
 800515e:	d109      	bne.n	8005174 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	3314      	adds	r3, #20
 8005164:	4618      	mov	r0, r3
 8005166:	f7fe ffb5 	bl	80040d4 <ld_word>
 800516a:	4603      	mov	r3, r0
 800516c:	041b      	lsls	r3, r3, #16
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4313      	orrs	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005174:	68fb      	ldr	r3, [r7, #12]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	331a      	adds	r3, #26
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	b292      	uxth	r2, r2
 8005192:	4611      	mov	r1, r2
 8005194:	4618      	mov	r0, r3
 8005196:	f7fe ffd8 	bl	800414a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d109      	bne.n	80051b6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f103 0214 	add.w	r2, r3, #20
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	0c1b      	lsrs	r3, r3, #16
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	4619      	mov	r1, r3
 80051b0:	4610      	mov	r0, r2
 80051b2:	f7fe ffca 	bl	800414a <st_word>
	}
}
 80051b6:	bf00      	nop
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80051c0:	b590      	push	{r4, r7, lr}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	331a      	adds	r3, #26
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe ff80 	bl	80040d4 <ld_word>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <cmp_lfn+0x1e>
 80051da:	2300      	movs	r3, #0
 80051dc:	e059      	b.n	8005292 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e6:	1e5a      	subs	r2, r3, #1
 80051e8:	4613      	mov	r3, r2
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80051f4:	2301      	movs	r3, #1
 80051f6:	81fb      	strh	r3, [r7, #14]
 80051f8:	2300      	movs	r3, #0
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	e033      	b.n	8005266 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80051fe:	4a27      	ldr	r2, [pc, #156]	; (800529c <cmp_lfn+0xdc>)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4413      	add	r3, r2
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	4413      	add	r3, r2
 800520c:	4618      	mov	r0, r3
 800520e:	f7fe ff61 	bl	80040d4 <ld_word>
 8005212:	4603      	mov	r3, r0
 8005214:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005216:	89fb      	ldrh	r3, [r7, #14]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01a      	beq.n	8005252 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2bfe      	cmp	r3, #254	; 0xfe
 8005220:	d812      	bhi.n	8005248 <cmp_lfn+0x88>
 8005222:	89bb      	ldrh	r3, [r7, #12]
 8005224:	4618      	mov	r0, r3
 8005226:	f002 f861 	bl	80072ec <ff_wtoupper>
 800522a:	4603      	mov	r3, r0
 800522c:	461c      	mov	r4, r3
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	617a      	str	r2, [r7, #20]
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	4413      	add	r3, r2
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f002 f855 	bl	80072ec <ff_wtoupper>
 8005242:	4603      	mov	r3, r0
 8005244:	429c      	cmp	r4, r3
 8005246:	d001      	beq.n	800524c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005248:	2300      	movs	r3, #0
 800524a:	e022      	b.n	8005292 <cmp_lfn+0xd2>
			}
			wc = uc;
 800524c:	89bb      	ldrh	r3, [r7, #12]
 800524e:	81fb      	strh	r3, [r7, #14]
 8005250:	e006      	b.n	8005260 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005252:	89bb      	ldrh	r3, [r7, #12]
 8005254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005258:	4293      	cmp	r3, r2
 800525a:	d001      	beq.n	8005260 <cmp_lfn+0xa0>
 800525c:	2300      	movs	r3, #0
 800525e:	e018      	b.n	8005292 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	3301      	adds	r3, #1
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b0c      	cmp	r3, #12
 800526a:	d9c8      	bls.n	80051fe <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00b      	beq.n	8005290 <cmp_lfn+0xd0>
 8005278:	89fb      	ldrh	r3, [r7, #14]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d008      	beq.n	8005290 <cmp_lfn+0xd0>
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	4413      	add	r3, r2
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d001      	beq.n	8005290 <cmp_lfn+0xd0>
 800528c:	2300      	movs	r3, #0
 800528e:	e000      	b.n	8005292 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005290:	2301      	movs	r3, #1
}
 8005292:	4618      	mov	r0, r3
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	bd90      	pop	{r4, r7, pc}
 800529a:	bf00      	nop
 800529c:	08007f24 	.word	0x08007f24

080052a0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	4611      	mov	r1, r2
 80052ac:	461a      	mov	r2, r3
 80052ae:	460b      	mov	r3, r1
 80052b0:	71fb      	strb	r3, [r7, #7]
 80052b2:	4613      	mov	r3, r2
 80052b4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	330d      	adds	r3, #13
 80052ba:	79ba      	ldrb	r2, [r7, #6]
 80052bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	330b      	adds	r3, #11
 80052c2:	220f      	movs	r2, #15
 80052c4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	330c      	adds	r3, #12
 80052ca:	2200      	movs	r2, #0
 80052cc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	331a      	adds	r3, #26
 80052d2:	2100      	movs	r1, #0
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fe ff38 	bl	800414a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80052da:	79fb      	ldrb	r3, [r7, #7]
 80052dc:	1e5a      	subs	r2, r3, #1
 80052de:	4613      	mov	r3, r2
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	82fb      	strh	r3, [r7, #22]
 80052ee:	2300      	movs	r3, #0
 80052f0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80052f2:	8afb      	ldrh	r3, [r7, #22]
 80052f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d007      	beq.n	800530c <put_lfn+0x6c>
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	61fa      	str	r2, [r7, #28]
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800530c:	4a17      	ldr	r2, [pc, #92]	; (800536c <put_lfn+0xcc>)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	4413      	add	r3, r2
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	461a      	mov	r2, r3
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4413      	add	r3, r2
 800531a:	8afa      	ldrh	r2, [r7, #22]
 800531c:	4611      	mov	r1, r2
 800531e:	4618      	mov	r0, r3
 8005320:	f7fe ff13 	bl	800414a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005324:	8afb      	ldrh	r3, [r7, #22]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d102      	bne.n	8005330 <put_lfn+0x90>
 800532a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800532e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	3301      	adds	r3, #1
 8005334:	61bb      	str	r3, [r7, #24]
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	2b0c      	cmp	r3, #12
 800533a:	d9da      	bls.n	80052f2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800533c:	8afb      	ldrh	r3, [r7, #22]
 800533e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005342:	4293      	cmp	r3, r2
 8005344:	d006      	beq.n	8005354 <put_lfn+0xb4>
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4413      	add	r3, r2
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d103      	bne.n	800535c <put_lfn+0xbc>
 8005354:	79fb      	ldrb	r3, [r7, #7]
 8005356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800535a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	79fa      	ldrb	r2, [r7, #7]
 8005360:	701a      	strb	r2, [r3, #0]
}
 8005362:	bf00      	nop
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	08007f24 	.word	0x08007f24

08005370 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08c      	sub	sp, #48	; 0x30
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800537e:	220b      	movs	r2, #11
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f7fe ff28 	bl	80041d8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b05      	cmp	r3, #5
 800538c:	d92b      	bls.n	80053e6 <gen_numname+0x76>
		sr = seq;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005392:	e022      	b.n	80053da <gen_numname+0x6a>
			wc = *lfn++;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	1c9a      	adds	r2, r3, #2
 8005398:	607a      	str	r2, [r7, #4]
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800539e:	2300      	movs	r3, #0
 80053a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053a2:	e017      	b.n	80053d4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	005a      	lsls	r2, r3, #1
 80053a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	4413      	add	r3, r2
 80053b0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80053b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <gen_numname+0x5e>
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80053c8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80053cc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	3301      	adds	r3, #1
 80053d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80053d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d6:	2b0f      	cmp	r3, #15
 80053d8:	d9e4      	bls.n	80053a4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1d8      	bne.n	8005394 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80053e6:	2307      	movs	r3, #7
 80053e8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	3330      	adds	r3, #48	; 0x30
 80053f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80053fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053fe:	2b39      	cmp	r3, #57	; 0x39
 8005400:	d904      	bls.n	800540c <gen_numname+0x9c>
 8005402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005406:	3307      	adds	r3, #7
 8005408:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	1e5a      	subs	r2, r3, #1
 8005410:	62ba      	str	r2, [r7, #40]	; 0x28
 8005412:	3330      	adds	r3, #48	; 0x30
 8005414:	443b      	add	r3, r7
 8005416:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800541a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	091b      	lsrs	r3, r3, #4
 8005422:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1df      	bne.n	80053ea <gen_numname+0x7a>
	ns[i] = '~';
 800542a:	f107 0214 	add.w	r2, r7, #20
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	4413      	add	r3, r2
 8005432:	227e      	movs	r2, #126	; 0x7e
 8005434:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005436:	2300      	movs	r3, #0
 8005438:	627b      	str	r3, [r7, #36]	; 0x24
 800543a:	e002      	b.n	8005442 <gen_numname+0xd2>
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	3301      	adds	r3, #1
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
 8005442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	429a      	cmp	r2, r3
 8005448:	d205      	bcs.n	8005456 <gen_numname+0xe6>
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	4413      	add	r3, r2
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b20      	cmp	r3, #32
 8005454:	d1f2      	bne.n	800543c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	2b07      	cmp	r3, #7
 800545a:	d807      	bhi.n	800546c <gen_numname+0xfc>
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	62ba      	str	r2, [r7, #40]	; 0x28
 8005462:	3330      	adds	r3, #48	; 0x30
 8005464:	443b      	add	r3, r7
 8005466:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800546a:	e000      	b.n	800546e <gen_numname+0xfe>
 800546c:	2120      	movs	r1, #32
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	627a      	str	r2, [r7, #36]	; 0x24
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	4413      	add	r3, r2
 8005478:	460a      	mov	r2, r1
 800547a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	2b07      	cmp	r3, #7
 8005480:	d9e9      	bls.n	8005456 <gen_numname+0xe6>
}
 8005482:	bf00      	nop
 8005484:	bf00      	nop
 8005486:	3730      	adds	r7, #48	; 0x30
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005498:	230b      	movs	r3, #11
 800549a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	0852      	lsrs	r2, r2, #1
 80054a2:	01db      	lsls	r3, r3, #7
 80054a4:	4313      	orrs	r3, r2
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	1c59      	adds	r1, r3, #1
 80054ac:	6079      	str	r1, [r7, #4]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	4413      	add	r3, r2
 80054b2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1ed      	bne.n	800549c <sum_sfn+0x10>
	return sum;
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b086      	sub	sp, #24
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80054dc:	2100      	movs	r1, #0
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff fc88 	bl	8004df4 <dir_sdi>
 80054e4:	4603      	mov	r3, r0
 80054e6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <dir_find+0x24>
 80054ee:	7dfb      	ldrb	r3, [r7, #23]
 80054f0:	e0a9      	b.n	8005646 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80054f2:	23ff      	movs	r3, #255	; 0xff
 80054f4:	753b      	strb	r3, [r7, #20]
 80054f6:	7d3b      	ldrb	r3, [r7, #20]
 80054f8:	757b      	strb	r3, [r7, #21]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005500:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	4619      	mov	r1, r3
 8005508:	6938      	ldr	r0, [r7, #16]
 800550a:	f7ff f893 	bl	8004634 <move_window>
 800550e:	4603      	mov	r3, r0
 8005510:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005512:	7dfb      	ldrb	r3, [r7, #23]
 8005514:	2b00      	cmp	r3, #0
 8005516:	f040 8090 	bne.w	800563a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005522:	7dbb      	ldrb	r3, [r7, #22]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d102      	bne.n	800552e <dir_find+0x60>
 8005528:	2304      	movs	r3, #4
 800552a:	75fb      	strb	r3, [r7, #23]
 800552c:	e08a      	b.n	8005644 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	330b      	adds	r3, #11
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800553a:	73fb      	strb	r3, [r7, #15]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	7bfa      	ldrb	r2, [r7, #15]
 8005540:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005542:	7dbb      	ldrb	r3, [r7, #22]
 8005544:	2be5      	cmp	r3, #229	; 0xe5
 8005546:	d007      	beq.n	8005558 <dir_find+0x8a>
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	2b00      	cmp	r3, #0
 8005550:	d009      	beq.n	8005566 <dir_find+0x98>
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	2b0f      	cmp	r3, #15
 8005556:	d006      	beq.n	8005566 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005558:	23ff      	movs	r3, #255	; 0xff
 800555a:	757b      	strb	r3, [r7, #21]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005562:	631a      	str	r2, [r3, #48]	; 0x30
 8005564:	e05e      	b.n	8005624 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005566:	7bfb      	ldrb	r3, [r7, #15]
 8005568:	2b0f      	cmp	r3, #15
 800556a:	d136      	bne.n	80055da <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	d154      	bne.n	8005624 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800557a:	7dbb      	ldrb	r3, [r7, #22]
 800557c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00d      	beq.n	80055a0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	7b5b      	ldrb	r3, [r3, #13]
 800558a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800558c:	7dbb      	ldrb	r3, [r7, #22]
 800558e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005592:	75bb      	strb	r3, [r7, #22]
 8005594:	7dbb      	ldrb	r3, [r7, #22]
 8005596:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	695a      	ldr	r2, [r3, #20]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80055a0:	7dba      	ldrb	r2, [r7, #22]
 80055a2:	7d7b      	ldrb	r3, [r7, #21]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d115      	bne.n	80055d4 <dir_find+0x106>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	330d      	adds	r3, #13
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	7d3a      	ldrb	r2, [r7, #20]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d10e      	bne.n	80055d4 <dir_find+0x106>
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	691a      	ldr	r2, [r3, #16]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	4619      	mov	r1, r3
 80055c0:	4610      	mov	r0, r2
 80055c2:	f7ff fdfd 	bl	80051c0 <cmp_lfn>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <dir_find+0x106>
 80055cc:	7d7b      	ldrb	r3, [r7, #21]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	e000      	b.n	80055d6 <dir_find+0x108>
 80055d4:	23ff      	movs	r3, #255	; 0xff
 80055d6:	757b      	strb	r3, [r7, #21]
 80055d8:	e024      	b.n	8005624 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80055da:	7d7b      	ldrb	r3, [r7, #21]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d109      	bne.n	80055f4 <dir_find+0x126>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff ff51 	bl	800548c <sum_sfn>
 80055ea:	4603      	mov	r3, r0
 80055ec:	461a      	mov	r2, r3
 80055ee:	7d3b      	ldrb	r3, [r7, #20]
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d024      	beq.n	800563e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10a      	bne.n	8005618 <dir_find+0x14a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a18      	ldr	r0, [r3, #32]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3324      	adds	r3, #36	; 0x24
 800560a:	220b      	movs	r2, #11
 800560c:	4619      	mov	r1, r3
 800560e:	f7fe fe1f 	bl	8004250 <mem_cmp>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d014      	beq.n	8005642 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005618:	23ff      	movs	r3, #255	; 0xff
 800561a:	757b      	strb	r3, [r7, #21]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005622:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005624:	2100      	movs	r1, #0
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff fc6d 	bl	8004f06 <dir_next>
 800562c:	4603      	mov	r3, r0
 800562e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005630:	7dfb      	ldrb	r3, [r7, #23]
 8005632:	2b00      	cmp	r3, #0
 8005634:	f43f af65 	beq.w	8005502 <dir_find+0x34>
 8005638:	e004      	b.n	8005644 <dir_find+0x176>
		if (res != FR_OK) break;
 800563a:	bf00      	nop
 800563c:	e002      	b.n	8005644 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800563e:	bf00      	nop
 8005640:	e000      	b.n	8005644 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005642:	bf00      	nop

	return res;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08c      	sub	sp, #48	; 0x30
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005664:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <dir_register+0x20>
 800566c:	2306      	movs	r3, #6
 800566e:	e0e0      	b.n	8005832 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005670:	2300      	movs	r3, #0
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
 8005674:	e002      	b.n	800567c <dir_register+0x2c>
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	3301      	adds	r3, #1
 800567a:	627b      	str	r3, [r7, #36]	; 0x24
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	691a      	ldr	r2, [r3, #16]
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	4413      	add	r3, r2
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1f4      	bne.n	8005676 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005692:	f107 030c 	add.w	r3, r7, #12
 8005696:	220c      	movs	r2, #12
 8005698:	4618      	mov	r0, r3
 800569a:	f7fe fd9d 	bl	80041d8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800569e:	7dfb      	ldrb	r3, [r7, #23]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d032      	beq.n	800570e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2240      	movs	r2, #64	; 0x40
 80056ac:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80056b0:	2301      	movs	r3, #1
 80056b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b4:	e016      	b.n	80056e4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	f107 010c 	add.w	r1, r7, #12
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	f7ff fe53 	bl	8005370 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff feff 	bl	80054ce <dir_find>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80056d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	3301      	adds	r3, #1
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	2b63      	cmp	r3, #99	; 0x63
 80056e8:	d9e5      	bls.n	80056b6 <dir_register+0x66>
 80056ea:	e000      	b.n	80056ee <dir_register+0x9e>
			if (res != FR_OK) break;
 80056ec:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	2b64      	cmp	r3, #100	; 0x64
 80056f2:	d101      	bne.n	80056f8 <dir_register+0xa8>
 80056f4:	2307      	movs	r3, #7
 80056f6:	e09c      	b.n	8005832 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80056f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d002      	beq.n	8005706 <dir_register+0xb6>
 8005700:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005704:	e095      	b.n	8005832 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005706:	7dfa      	ldrb	r2, [r7, #23]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800570e:	7dfb      	ldrb	r3, [r7, #23]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d007      	beq.n	8005728 <dir_register+0xd8>
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	330c      	adds	r3, #12
 800571c:	4a47      	ldr	r2, [pc, #284]	; (800583c <dir_register+0x1ec>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	089b      	lsrs	r3, r3, #2
 8005724:	3301      	adds	r3, #1
 8005726:	e000      	b.n	800572a <dir_register+0xda>
 8005728:	2301      	movs	r3, #1
 800572a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800572c:	6a39      	ldr	r1, [r7, #32]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff fcbf 	bl	80050b2 <dir_alloc>
 8005734:	4603      	mov	r3, r0
 8005736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800573a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800573e:	2b00      	cmp	r3, #0
 8005740:	d148      	bne.n	80057d4 <dir_register+0x184>
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	3b01      	subs	r3, #1
 8005746:	623b      	str	r3, [r7, #32]
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d042      	beq.n	80057d4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695a      	ldr	r2, [r3, #20]
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	015b      	lsls	r3, r3, #5
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff fb4a 	bl	8004df4 <dir_sdi>
 8005760:	4603      	mov	r3, r0
 8005762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005766:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800576a:	2b00      	cmp	r3, #0
 800576c:	d132      	bne.n	80057d4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3324      	adds	r3, #36	; 0x24
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff fe8a 	bl	800548c <sum_sfn>
 8005778:	4603      	mov	r3, r0
 800577a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	4619      	mov	r1, r3
 8005782:	69f8      	ldr	r0, [r7, #28]
 8005784:	f7fe ff56 	bl	8004634 <move_window>
 8005788:	4603      	mov	r3, r0
 800578a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800578e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005792:	2b00      	cmp	r3, #0
 8005794:	d11d      	bne.n	80057d2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	6918      	ldr	r0, [r3, #16]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a19      	ldr	r1, [r3, #32]
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	7efb      	ldrb	r3, [r7, #27]
 80057a4:	f7ff fd7c 	bl	80052a0 <put_lfn>
				fs->wflag = 1;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	2201      	movs	r2, #1
 80057ac:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80057ae:	2100      	movs	r1, #0
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7ff fba8 	bl	8004f06 <dir_next>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80057bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d107      	bne.n	80057d4 <dir_register+0x184>
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	623b      	str	r3, [r7, #32]
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1d5      	bne.n	800577c <dir_register+0x12c>
 80057d0:	e000      	b.n	80057d4 <dir_register+0x184>
				if (res != FR_OK) break;
 80057d2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80057d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d128      	bne.n	800582e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	4619      	mov	r1, r3
 80057e2:	69f8      	ldr	r0, [r7, #28]
 80057e4:	f7fe ff26 	bl	8004634 <move_window>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80057ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d11b      	bne.n	800582e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	2220      	movs	r2, #32
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fe fd0b 	bl	800421a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a18      	ldr	r0, [r3, #32]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3324      	adds	r3, #36	; 0x24
 800580c:	220b      	movs	r2, #11
 800580e:	4619      	mov	r1, r3
 8005810:	f7fe fce2 	bl	80041d8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	330c      	adds	r3, #12
 8005820:	f002 0218 	and.w	r2, r2, #24
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2201      	movs	r2, #1
 800582c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800582e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005832:	4618      	mov	r0, r3
 8005834:	3730      	adds	r7, #48	; 0x30
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	4ec4ec4f 	.word	0x4ec4ec4f

08005840 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08a      	sub	sp, #40	; 0x28
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	61ba      	str	r2, [r7, #24]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4413      	add	r3, r2
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800586e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005870:	2b1f      	cmp	r3, #31
 8005872:	d940      	bls.n	80058f6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005874:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005876:	2b2f      	cmp	r3, #47	; 0x2f
 8005878:	d006      	beq.n	8005888 <create_name+0x48>
 800587a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800587c:	2b5c      	cmp	r3, #92	; 0x5c
 800587e:	d110      	bne.n	80058a2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005880:	e002      	b.n	8005888 <create_name+0x48>
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	3301      	adds	r3, #1
 8005886:	61bb      	str	r3, [r7, #24]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	4413      	add	r3, r2
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b2f      	cmp	r3, #47	; 0x2f
 8005892:	d0f6      	beq.n	8005882 <create_name+0x42>
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	4413      	add	r3, r2
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b5c      	cmp	r3, #92	; 0x5c
 800589e:	d0f0      	beq.n	8005882 <create_name+0x42>
			break;
 80058a0:	e02a      	b.n	80058f8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2bfe      	cmp	r3, #254	; 0xfe
 80058a6:	d901      	bls.n	80058ac <create_name+0x6c>
 80058a8:	2306      	movs	r3, #6
 80058aa:	e17d      	b.n	8005ba8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80058ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80058b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058b4:	2101      	movs	r1, #1
 80058b6:	4618      	mov	r0, r3
 80058b8:	f001 fcdc 	bl	8007274 <ff_convert>
 80058bc:	4603      	mov	r3, r0
 80058be:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80058c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <create_name+0x8a>
 80058c6:	2306      	movs	r3, #6
 80058c8:	e16e      	b.n	8005ba8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80058ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058cc:	2b7f      	cmp	r3, #127	; 0x7f
 80058ce:	d809      	bhi.n	80058e4 <create_name+0xa4>
 80058d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058d2:	4619      	mov	r1, r3
 80058d4:	488d      	ldr	r0, [pc, #564]	; (8005b0c <create_name+0x2cc>)
 80058d6:	f7fe fce2 	bl	800429e <chk_chr>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <create_name+0xa4>
 80058e0:	2306      	movs	r3, #6
 80058e2:	e161      	b.n	8005ba8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	617a      	str	r2, [r7, #20]
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058f2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80058f4:	e7b4      	b.n	8005860 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80058f6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	441a      	add	r2, r3
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005904:	2b1f      	cmp	r3, #31
 8005906:	d801      	bhi.n	800590c <create_name+0xcc>
 8005908:	2304      	movs	r3, #4
 800590a:	e000      	b.n	800590e <create_name+0xce>
 800590c:	2300      	movs	r3, #0
 800590e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005912:	e011      	b.n	8005938 <create_name+0xf8>
		w = lfn[di - 1];
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800591a:	3b01      	subs	r3, #1
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4413      	add	r3, r2
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005928:	2b20      	cmp	r3, #32
 800592a:	d002      	beq.n	8005932 <create_name+0xf2>
 800592c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800592e:	2b2e      	cmp	r3, #46	; 0x2e
 8005930:	d106      	bne.n	8005940 <create_name+0x100>
		di--;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	3b01      	subs	r3, #1
 8005936:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1ea      	bne.n	8005914 <create_name+0xd4>
 800593e:	e000      	b.n	8005942 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005940:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4413      	add	r3, r2
 800594a:	2200      	movs	r2, #0
 800594c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <create_name+0x118>
 8005954:	2306      	movs	r3, #6
 8005956:	e127      	b.n	8005ba8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3324      	adds	r3, #36	; 0x24
 800595c:	220b      	movs	r2, #11
 800595e:	2120      	movs	r1, #32
 8005960:	4618      	mov	r0, r3
 8005962:	f7fe fc5a 	bl	800421a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005966:	2300      	movs	r3, #0
 8005968:	61bb      	str	r3, [r7, #24]
 800596a:	e002      	b.n	8005972 <create_name+0x132>
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	3301      	adds	r3, #1
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4413      	add	r3, r2
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	2b20      	cmp	r3, #32
 800597e:	d0f5      	beq.n	800596c <create_name+0x12c>
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	2b2e      	cmp	r3, #46	; 0x2e
 800598c:	d0ee      	beq.n	800596c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d009      	beq.n	80059a8 <create_name+0x168>
 8005994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005998:	f043 0303 	orr.w	r3, r3, #3
 800599c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80059a0:	e002      	b.n	80059a8 <create_name+0x168>
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	3b01      	subs	r3, #1
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d009      	beq.n	80059c2 <create_name+0x182>
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80059b4:	3b01      	subs	r3, #1
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	2b2e      	cmp	r3, #46	; 0x2e
 80059c0:	d1ef      	bne.n	80059a2 <create_name+0x162>

	i = b = 0; ni = 8;
 80059c2:	2300      	movs	r3, #0
 80059c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80059c8:	2300      	movs	r3, #0
 80059ca:	623b      	str	r3, [r7, #32]
 80059cc:	2308      	movs	r3, #8
 80059ce:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	61ba      	str	r2, [r7, #24]
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80059e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 8090 	beq.w	8005b08 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80059e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d006      	beq.n	80059fc <create_name+0x1bc>
 80059ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059f0:	2b2e      	cmp	r3, #46	; 0x2e
 80059f2:	d10a      	bne.n	8005a0a <create_name+0x1ca>
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d006      	beq.n	8005a0a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80059fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a00:	f043 0303 	orr.w	r3, r3, #3
 8005a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a08:	e07d      	b.n	8005b06 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005a0a:	6a3a      	ldr	r2, [r7, #32]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d203      	bcs.n	8005a1a <create_name+0x1da>
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d123      	bne.n	8005a62 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	2b0b      	cmp	r3, #11
 8005a1e:	d106      	bne.n	8005a2e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a24:	f043 0303 	orr.w	r3, r3, #3
 8005a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a2c:	e075      	b.n	8005b1a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d005      	beq.n	8005a42 <create_name+0x202>
 8005a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a3a:	f043 0303 	orr.w	r3, r3, #3
 8005a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d866      	bhi.n	8005b18 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	2308      	movs	r3, #8
 8005a50:	623b      	str	r3, [r7, #32]
 8005a52:	230b      	movs	r3, #11
 8005a54:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005a56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a60:	e051      	b.n	8005b06 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005a62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a64:	2b7f      	cmp	r3, #127	; 0x7f
 8005a66:	d914      	bls.n	8005a92 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005a68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 fc01 	bl	8007274 <ff_convert>
 8005a72:	4603      	mov	r3, r0
 8005a74:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005a76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d004      	beq.n	8005a86 <create_name+0x246>
 8005a7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a7e:	3b80      	subs	r3, #128	; 0x80
 8005a80:	4a23      	ldr	r2, [pc, #140]	; (8005b10 <create_name+0x2d0>)
 8005a82:	5cd3      	ldrb	r3, [r2, r3]
 8005a84:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005a86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a8a:	f043 0302 	orr.w	r3, r3, #2
 8005a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d007      	beq.n	8005aa8 <create_name+0x268>
 8005a98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	481d      	ldr	r0, [pc, #116]	; (8005b14 <create_name+0x2d4>)
 8005a9e:	f7fe fbfe 	bl	800429e <chk_chr>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d008      	beq.n	8005aba <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005aa8:	235f      	movs	r3, #95	; 0x5f
 8005aaa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ab0:	f043 0303 	orr.w	r3, r3, #3
 8005ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ab8:	e01b      	b.n	8005af2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005aba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005abc:	2b40      	cmp	r3, #64	; 0x40
 8005abe:	d909      	bls.n	8005ad4 <create_name+0x294>
 8005ac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ac2:	2b5a      	cmp	r3, #90	; 0x5a
 8005ac4:	d806      	bhi.n	8005ad4 <create_name+0x294>
					b |= 2;
 8005ac6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005aca:	f043 0302 	orr.w	r3, r3, #2
 8005ace:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005ad2:	e00e      	b.n	8005af2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005ad4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ad6:	2b60      	cmp	r3, #96	; 0x60
 8005ad8:	d90b      	bls.n	8005af2 <create_name+0x2b2>
 8005ada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005adc:	2b7a      	cmp	r3, #122	; 0x7a
 8005ade:	d808      	bhi.n	8005af2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005ae0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ae4:	f043 0301 	orr.w	r3, r3, #1
 8005ae8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005aec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005aee:	3b20      	subs	r3, #32
 8005af0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	623a      	str	r2, [r7, #32]
 8005af8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005afa:	b2d1      	uxtb	r1, r2
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	4413      	add	r3, r2
 8005b00:	460a      	mov	r2, r1
 8005b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005b06:	e763      	b.n	80059d0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005b08:	bf00      	nop
 8005b0a:	e006      	b.n	8005b1a <create_name+0x2da>
 8005b0c:	08007e44 	.word	0x08007e44
 8005b10:	08007ea4 	.word	0x08007ea4
 8005b14:	08007e50 	.word	0x08007e50
			if (si > di) break;			/* No extension */
 8005b18:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b20:	2be5      	cmp	r3, #229	; 0xe5
 8005b22:	d103      	bne.n	8005b2c <create_name+0x2ec>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2205      	movs	r2, #5
 8005b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d104      	bne.n	8005b3c <create_name+0x2fc>
 8005b32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005b3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b40:	f003 030c 	and.w	r3, r3, #12
 8005b44:	2b0c      	cmp	r3, #12
 8005b46:	d005      	beq.n	8005b54 <create_name+0x314>
 8005b48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d105      	bne.n	8005b60 <create_name+0x320>
 8005b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b58:	f043 0302 	orr.w	r3, r3, #2
 8005b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d117      	bne.n	8005b9c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005b6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b70:	f003 0303 	and.w	r3, r3, #3
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d105      	bne.n	8005b84 <create_name+0x344>
 8005b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b7c:	f043 0310 	orr.w	r3, r3, #16
 8005b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005b84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b88:	f003 030c 	and.w	r3, r3, #12
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d105      	bne.n	8005b9c <create_name+0x35c>
 8005b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b94:	f043 0308 	orr.w	r3, r3, #8
 8005b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005ba2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005ba6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3728      	adds	r7, #40	; 0x28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005bc4:	e002      	b.n	8005bcc <follow_path+0x1c>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b2f      	cmp	r3, #47	; 0x2f
 8005bd2:	d0f8      	beq.n	8005bc6 <follow_path+0x16>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	2b5c      	cmp	r3, #92	; 0x5c
 8005bda:	d0f4      	beq.n	8005bc6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2200      	movs	r2, #0
 8005be0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b1f      	cmp	r3, #31
 8005be8:	d80a      	bhi.n	8005c00 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2280      	movs	r2, #128	; 0x80
 8005bee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7ff f8fd 	bl	8004df4 <dir_sdi>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	75fb      	strb	r3, [r7, #23]
 8005bfe:	e048      	b.n	8005c92 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005c00:	463b      	mov	r3, r7
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff fe1b 	bl	8005840 <create_name>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c0e:	7dfb      	ldrb	r3, [r7, #23]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d139      	bne.n	8005c88 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff fc5a 	bl	80054ce <dir_find>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005c24:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d12c      	bne.n	8005c8c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005c32:	7afb      	ldrb	r3, [r7, #11]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d127      	bne.n	8005c8c <follow_path+0xdc>
 8005c3c:	2305      	movs	r3, #5
 8005c3e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005c40:	e024      	b.n	8005c8c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005c42:	7afb      	ldrb	r3, [r7, #11]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d121      	bne.n	8005c90 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	799b      	ldrb	r3, [r3, #6]
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d102      	bne.n	8005c5e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005c58:	2305      	movs	r3, #5
 8005c5a:	75fb      	strb	r3, [r7, #23]
 8005c5c:	e019      	b.n	8005c92 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	8992      	ldrh	r2, [r2, #12]
 8005c6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c70:	fb00 f202 	mul.w	r2, r0, r2
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	440b      	add	r3, r1
 8005c78:	4619      	mov	r1, r3
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f7ff fa60 	bl	8005140 <ld_clust>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005c86:	e7bb      	b.n	8005c00 <follow_path+0x50>
			if (res != FR_OK) break;
 8005c88:	bf00      	nop
 8005c8a:	e002      	b.n	8005c92 <follow_path+0xe2>
				break;
 8005c8c:	bf00      	nop
 8005c8e:	e000      	b.n	8005c92 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005c90:	bf00      	nop
			}
		}
	}

	return res;
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ca8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d031      	beq.n	8005d16 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	e002      	b.n	8005cc0 <get_ldnumber+0x24>
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b1f      	cmp	r3, #31
 8005cc6:	d903      	bls.n	8005cd0 <get_ldnumber+0x34>
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b3a      	cmp	r3, #58	; 0x3a
 8005cce:	d1f4      	bne.n	8005cba <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b3a      	cmp	r3, #58	; 0x3a
 8005cd6:	d11c      	bne.n	8005d12 <get_ldnumber+0x76>
			tp = *path;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	60fa      	str	r2, [r7, #12]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	3b30      	subs	r3, #48	; 0x30
 8005ce8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b09      	cmp	r3, #9
 8005cee:	d80e      	bhi.n	8005d0e <get_ldnumber+0x72>
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d10a      	bne.n	8005d0e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d107      	bne.n	8005d0e <get_ldnumber+0x72>
					vol = (int)i;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	3301      	adds	r3, #1
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	e002      	b.n	8005d18 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005d12:	2300      	movs	r3, #0
 8005d14:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005d16:	693b      	ldr	r3, [r7, #16]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	371c      	adds	r7, #28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	70da      	strb	r2, [r3, #3]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d3a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fe fc78 	bl	8004634 <move_window>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <check_fs+0x2a>
 8005d4a:	2304      	movs	r3, #4
 8005d4c:	e038      	b.n	8005dc0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3338      	adds	r3, #56	; 0x38
 8005d52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe f9bc 	bl	80040d4 <ld_word>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d001      	beq.n	8005d6c <check_fs+0x48>
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e029      	b.n	8005dc0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d72:	2be9      	cmp	r3, #233	; 0xe9
 8005d74:	d009      	beq.n	8005d8a <check_fs+0x66>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d7c:	2beb      	cmp	r3, #235	; 0xeb
 8005d7e:	d11e      	bne.n	8005dbe <check_fs+0x9a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d86:	2b90      	cmp	r3, #144	; 0x90
 8005d88:	d119      	bne.n	8005dbe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3338      	adds	r3, #56	; 0x38
 8005d8e:	3336      	adds	r3, #54	; 0x36
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fe f9b7 	bl	8004104 <ld_dword>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d9c:	4a0a      	ldr	r2, [pc, #40]	; (8005dc8 <check_fs+0xa4>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d101      	bne.n	8005da6 <check_fs+0x82>
 8005da2:	2300      	movs	r3, #0
 8005da4:	e00c      	b.n	8005dc0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3338      	adds	r3, #56	; 0x38
 8005daa:	3352      	adds	r3, #82	; 0x52
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fe f9a9 	bl	8004104 <ld_dword>
 8005db2:	4603      	mov	r3, r0
 8005db4:	4a05      	ldr	r2, [pc, #20]	; (8005dcc <check_fs+0xa8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d101      	bne.n	8005dbe <check_fs+0x9a>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e000      	b.n	8005dc0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005dbe:	2302      	movs	r3, #2
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	00544146 	.word	0x00544146
 8005dcc:	33544146 	.word	0x33544146

08005dd0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b096      	sub	sp, #88	; 0x58
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff ff59 	bl	8005c9c <get_ldnumber>
 8005dea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	da01      	bge.n	8005df6 <find_volume+0x26>
 8005df2:	230b      	movs	r3, #11
 8005df4:	e265      	b.n	80062c2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005df6:	4a9f      	ldr	r2, [pc, #636]	; (8006074 <find_volume+0x2a4>)
 8005df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dfe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <find_volume+0x3a>
 8005e06:	230c      	movs	r3, #12
 8005e08:	e25b      	b.n	80062c2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e0e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	f023 0301 	bic.w	r3, r3, #1
 8005e16:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01a      	beq.n	8005e56 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fe f8b7 	bl	8003f98 <disk_status>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005e30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10c      	bne.n	8005e56 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d007      	beq.n	8005e52 <find_volume+0x82>
 8005e42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005e4e:	230a      	movs	r3, #10
 8005e50:	e237      	b.n	80062c2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005e52:	2300      	movs	r3, #0
 8005e54:	e235      	b.n	80062c2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	2200      	movs	r2, #0
 8005e5a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e62:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	785b      	ldrb	r3, [r3, #1]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fe f8af 	bl	8003fcc <disk_initialize>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005e74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005e80:	2303      	movs	r3, #3
 8005e82:	e21e      	b.n	80062c2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005e84:	79fb      	ldrb	r3, [r7, #7]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d007      	beq.n	8005e9a <find_volume+0xca>
 8005e8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005e96:	230a      	movs	r3, #10
 8005e98:	e213      	b.n	80062c2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9c:	7858      	ldrb	r0, [r3, #1]
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	330c      	adds	r3, #12
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	2102      	movs	r1, #2
 8005ea6:	f7fe f8f7 	bl	8004098 <disk_ioctl>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <find_volume+0xe4>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e206      	b.n	80062c2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	899b      	ldrh	r3, [r3, #12]
 8005eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ebc:	d80d      	bhi.n	8005eda <find_volume+0x10a>
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	899b      	ldrh	r3, [r3, #12]
 8005ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec6:	d308      	bcc.n	8005eda <find_volume+0x10a>
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	899b      	ldrh	r3, [r3, #12]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	899b      	ldrh	r3, [r3, #12]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <find_volume+0x10e>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e1f1      	b.n	80062c2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005ee2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ee4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ee6:	f7ff ff1d 	bl	8005d24 <check_fs>
 8005eea:	4603      	mov	r3, r0
 8005eec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005ef0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d149      	bne.n	8005f8c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005ef8:	2300      	movs	r3, #0
 8005efa:	643b      	str	r3, [r7, #64]	; 0x40
 8005efc:	e01e      	b.n	8005f3c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005f0c:	4413      	add	r3, r2
 8005f0e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	3304      	adds	r3, #4
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d006      	beq.n	8005f28 <find_volume+0x158>
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fe f8f0 	bl	8004104 <ld_dword>
 8005f24:	4602      	mov	r2, r0
 8005f26:	e000      	b.n	8005f2a <find_volume+0x15a>
 8005f28:	2200      	movs	r2, #0
 8005f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	3358      	adds	r3, #88	; 0x58
 8005f30:	443b      	add	r3, r7
 8005f32:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f38:	3301      	adds	r3, #1
 8005f3a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d9dd      	bls.n	8005efe <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005f42:	2300      	movs	r3, #0
 8005f44:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <find_volume+0x182>
 8005f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	3358      	adds	r3, #88	; 0x58
 8005f58:	443b      	add	r3, r7
 8005f5a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005f5e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d005      	beq.n	8005f72 <find_volume+0x1a2>
 8005f66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f6a:	f7ff fedb 	bl	8005d24 <check_fs>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	e000      	b.n	8005f74 <find_volume+0x1a4>
 8005f72:	2303      	movs	r3, #3
 8005f74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d905      	bls.n	8005f8c <find_volume+0x1bc>
 8005f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f82:	3301      	adds	r3, #1
 8005f84:	643b      	str	r3, [r7, #64]	; 0x40
 8005f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d9e2      	bls.n	8005f52 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005f8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d101      	bne.n	8005f98 <find_volume+0x1c8>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e194      	b.n	80062c2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005f98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d901      	bls.n	8005fa4 <find_volume+0x1d4>
 8005fa0:	230d      	movs	r3, #13
 8005fa2:	e18e      	b.n	80062c2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	3338      	adds	r3, #56	; 0x38
 8005fa8:	330b      	adds	r3, #11
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe f892 	bl	80040d4 <ld_word>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb6:	899b      	ldrh	r3, [r3, #12]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d001      	beq.n	8005fc0 <find_volume+0x1f0>
 8005fbc:	230d      	movs	r3, #13
 8005fbe:	e180      	b.n	80062c2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	3338      	adds	r3, #56	; 0x38
 8005fc4:	3316      	adds	r3, #22
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fe f884 	bl	80040d4 <ld_word>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d106      	bne.n	8005fe4 <find_volume+0x214>
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	3338      	adds	r3, #56	; 0x38
 8005fda:	3324      	adds	r3, #36	; 0x24
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fe f891 	bl	8004104 <ld_dword>
 8005fe2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fe8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff6:	789b      	ldrb	r3, [r3, #2]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d005      	beq.n	8006008 <find_volume+0x238>
 8005ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffe:	789b      	ldrb	r3, [r3, #2]
 8006000:	2b02      	cmp	r3, #2
 8006002:	d001      	beq.n	8006008 <find_volume+0x238>
 8006004:	230d      	movs	r3, #13
 8006006:	e15c      	b.n	80062c2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600a:	789b      	ldrb	r3, [r3, #2]
 800600c:	461a      	mov	r2, r3
 800600e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006010:	fb02 f303 	mul.w	r3, r2, r3
 8006014:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800601c:	b29a      	uxth	r2, r3
 800601e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006020:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006024:	895b      	ldrh	r3, [r3, #10]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d008      	beq.n	800603c <find_volume+0x26c>
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	895b      	ldrh	r3, [r3, #10]
 800602e:	461a      	mov	r2, r3
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	895b      	ldrh	r3, [r3, #10]
 8006034:	3b01      	subs	r3, #1
 8006036:	4013      	ands	r3, r2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <find_volume+0x270>
 800603c:	230d      	movs	r3, #13
 800603e:	e140      	b.n	80062c2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006042:	3338      	adds	r3, #56	; 0x38
 8006044:	3311      	adds	r3, #17
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe f844 	bl	80040d4 <ld_word>
 800604c:	4603      	mov	r3, r0
 800604e:	461a      	mov	r2, r3
 8006050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006052:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006056:	891b      	ldrh	r3, [r3, #8]
 8006058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800605a:	8992      	ldrh	r2, [r2, #12]
 800605c:	0952      	lsrs	r2, r2, #5
 800605e:	b292      	uxth	r2, r2
 8006060:	fbb3 f1f2 	udiv	r1, r3, r2
 8006064:	fb01 f202 	mul.w	r2, r1, r2
 8006068:	1a9b      	subs	r3, r3, r2
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <find_volume+0x2a8>
 8006070:	230d      	movs	r3, #13
 8006072:	e126      	b.n	80062c2 <find_volume+0x4f2>
 8006074:	200025c0 	.word	0x200025c0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	3338      	adds	r3, #56	; 0x38
 800607c:	3313      	adds	r3, #19
 800607e:	4618      	mov	r0, r3
 8006080:	f7fe f828 	bl	80040d4 <ld_word>
 8006084:	4603      	mov	r3, r0
 8006086:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <find_volume+0x2cc>
 800608e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006090:	3338      	adds	r3, #56	; 0x38
 8006092:	3320      	adds	r3, #32
 8006094:	4618      	mov	r0, r3
 8006096:	f7fe f835 	bl	8004104 <ld_dword>
 800609a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	3338      	adds	r3, #56	; 0x38
 80060a0:	330e      	adds	r3, #14
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe f816 	bl	80040d4 <ld_word>
 80060a8:	4603      	mov	r3, r0
 80060aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80060ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <find_volume+0x2e6>
 80060b2:	230d      	movs	r3, #13
 80060b4:	e105      	b.n	80062c2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80060b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80060b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ba:	4413      	add	r3, r2
 80060bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060be:	8911      	ldrh	r1, [r2, #8]
 80060c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060c2:	8992      	ldrh	r2, [r2, #12]
 80060c4:	0952      	lsrs	r2, r2, #5
 80060c6:	b292      	uxth	r2, r2
 80060c8:	fbb1 f2f2 	udiv	r2, r1, r2
 80060cc:	b292      	uxth	r2, r2
 80060ce:	4413      	add	r3, r2
 80060d0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80060d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d201      	bcs.n	80060de <find_volume+0x30e>
 80060da:	230d      	movs	r3, #13
 80060dc:	e0f1      	b.n	80062c2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80060de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060e6:	8952      	ldrh	r2, [r2, #10]
 80060e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <find_volume+0x328>
 80060f4:	230d      	movs	r3, #13
 80060f6:	e0e4      	b.n	80062c2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80060f8:	2303      	movs	r3, #3
 80060fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006104:	4293      	cmp	r3, r2
 8006106:	d802      	bhi.n	800610e <find_volume+0x33e>
 8006108:	2302      	movs	r3, #2
 800610a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006114:	4293      	cmp	r3, r2
 8006116:	d802      	bhi.n	800611e <find_volume+0x34e>
 8006118:	2301      	movs	r3, #1
 800611a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	1c9a      	adds	r2, r3, #2
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800612a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800612c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800612e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006130:	441a      	add	r2, r3
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006136:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	441a      	add	r2, r3
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006140:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006144:	2b03      	cmp	r3, #3
 8006146:	d11e      	bne.n	8006186 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614a:	3338      	adds	r3, #56	; 0x38
 800614c:	332a      	adds	r3, #42	; 0x2a
 800614e:	4618      	mov	r0, r3
 8006150:	f7fd ffc0 	bl	80040d4 <ld_word>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <find_volume+0x38e>
 800615a:	230d      	movs	r3, #13
 800615c:	e0b1      	b.n	80062c2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	891b      	ldrh	r3, [r3, #8]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <find_volume+0x39a>
 8006166:	230d      	movs	r3, #13
 8006168:	e0ab      	b.n	80062c2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800616a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616c:	3338      	adds	r3, #56	; 0x38
 800616e:	332c      	adds	r3, #44	; 0x2c
 8006170:	4618      	mov	r0, r3
 8006172:	f7fd ffc7 	bl	8004104 <ld_dword>
 8006176:	4602      	mov	r2, r0
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	647b      	str	r3, [r7, #68]	; 0x44
 8006184:	e01f      	b.n	80061c6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006188:	891b      	ldrh	r3, [r3, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <find_volume+0x3c2>
 800618e:	230d      	movs	r3, #13
 8006190:	e097      	b.n	80062c2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006198:	441a      	add	r2, r3
 800619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800619e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d103      	bne.n	80061ae <find_volume+0x3de>
 80061a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	e00a      	b.n	80061c4 <find_volume+0x3f4>
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	69da      	ldr	r2, [r3, #28]
 80061b2:	4613      	mov	r3, r2
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	4413      	add	r3, r2
 80061b8:	085a      	lsrs	r2, r3, #1
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80061c4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80061c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c8:	6a1a      	ldr	r2, [r3, #32]
 80061ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061cc:	899b      	ldrh	r3, [r3, #12]
 80061ce:	4619      	mov	r1, r3
 80061d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d2:	440b      	add	r3, r1
 80061d4:	3b01      	subs	r3, #1
 80061d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061d8:	8989      	ldrh	r1, [r1, #12]
 80061da:	fbb3 f3f1 	udiv	r3, r3, r1
 80061de:	429a      	cmp	r2, r3
 80061e0:	d201      	bcs.n	80061e6 <find_volume+0x416>
 80061e2:	230d      	movs	r3, #13
 80061e4:	e06d      	b.n	80062c2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061ec:	619a      	str	r2, [r3, #24]
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80061f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f8:	2280      	movs	r2, #128	; 0x80
 80061fa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80061fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006200:	2b03      	cmp	r3, #3
 8006202:	d149      	bne.n	8006298 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006206:	3338      	adds	r3, #56	; 0x38
 8006208:	3330      	adds	r3, #48	; 0x30
 800620a:	4618      	mov	r0, r3
 800620c:	f7fd ff62 	bl	80040d4 <ld_word>
 8006210:	4603      	mov	r3, r0
 8006212:	2b01      	cmp	r3, #1
 8006214:	d140      	bne.n	8006298 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006218:	3301      	adds	r3, #1
 800621a:	4619      	mov	r1, r3
 800621c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800621e:	f7fe fa09 	bl	8004634 <move_window>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d137      	bne.n	8006298 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622a:	2200      	movs	r2, #0
 800622c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800622e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006230:	3338      	adds	r3, #56	; 0x38
 8006232:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006236:	4618      	mov	r0, r3
 8006238:	f7fd ff4c 	bl	80040d4 <ld_word>
 800623c:	4603      	mov	r3, r0
 800623e:	461a      	mov	r2, r3
 8006240:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006244:	429a      	cmp	r2, r3
 8006246:	d127      	bne.n	8006298 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	3338      	adds	r3, #56	; 0x38
 800624c:	4618      	mov	r0, r3
 800624e:	f7fd ff59 	bl	8004104 <ld_dword>
 8006252:	4603      	mov	r3, r0
 8006254:	4a1d      	ldr	r2, [pc, #116]	; (80062cc <find_volume+0x4fc>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d11e      	bne.n	8006298 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	3338      	adds	r3, #56	; 0x38
 800625e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006262:	4618      	mov	r0, r3
 8006264:	f7fd ff4e 	bl	8004104 <ld_dword>
 8006268:	4603      	mov	r3, r0
 800626a:	4a19      	ldr	r2, [pc, #100]	; (80062d0 <find_volume+0x500>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d113      	bne.n	8006298 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006272:	3338      	adds	r3, #56	; 0x38
 8006274:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006278:	4618      	mov	r0, r3
 800627a:	f7fd ff43 	bl	8004104 <ld_dword>
 800627e:	4602      	mov	r2, r0
 8006280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006282:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006286:	3338      	adds	r3, #56	; 0x38
 8006288:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800628c:	4618      	mov	r0, r3
 800628e:	f7fd ff39 	bl	8004104 <ld_dword>
 8006292:	4602      	mov	r2, r0
 8006294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006296:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800629e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80062a0:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <find_volume+0x504>)
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	3301      	adds	r3, #1
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <find_volume+0x504>)
 80062aa:	801a      	strh	r2, [r3, #0]
 80062ac:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <find_volume+0x504>)
 80062ae:	881a      	ldrh	r2, [r3, #0]
 80062b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80062b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b6:	4a08      	ldr	r2, [pc, #32]	; (80062d8 <find_volume+0x508>)
 80062b8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80062ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062bc:	f7fe f952 	bl	8004564 <clear_lock>
#endif
	return FR_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3758      	adds	r7, #88	; 0x58
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	41615252 	.word	0x41615252
 80062d0:	61417272 	.word	0x61417272
 80062d4:	200025c4 	.word	0x200025c4
 80062d8:	200025e8 	.word	0x200025e8

080062dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80062e6:	2309      	movs	r3, #9
 80062e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d01c      	beq.n	800632a <validate+0x4e>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d018      	beq.n	800632a <validate+0x4e>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d013      	beq.n	800632a <validate+0x4e>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	889a      	ldrh	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	88db      	ldrh	r3, [r3, #6]
 800630c:	429a      	cmp	r2, r3
 800630e:	d10c      	bne.n	800632a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	4618      	mov	r0, r3
 8006318:	f7fd fe3e 	bl	8003f98 <disk_status>
 800631c:	4603      	mov	r3, r0
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <validate+0x4e>
			res = FR_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d102      	bne.n	8006336 <validate+0x5a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	e000      	b.n	8006338 <validate+0x5c>
 8006336:	2300      	movs	r3, #0
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	6013      	str	r3, [r2, #0]
	return res;
 800633c:	7bfb      	ldrb	r3, [r7, #15]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	4613      	mov	r3, r2
 8006354:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800635a:	f107 0310 	add.w	r3, r7, #16
 800635e:	4618      	mov	r0, r3
 8006360:	f7ff fc9c 	bl	8005c9c <get_ldnumber>
 8006364:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	2b00      	cmp	r3, #0
 800636a:	da01      	bge.n	8006370 <f_mount+0x28>
 800636c:	230b      	movs	r3, #11
 800636e:	e02b      	b.n	80063c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006370:	4a17      	ldr	r2, [pc, #92]	; (80063d0 <f_mount+0x88>)
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006378:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d005      	beq.n	800638c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006380:	69b8      	ldr	r0, [r7, #24]
 8006382:	f7fe f8ef 	bl	8004564 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	2200      	movs	r2, #0
 800638a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	490d      	ldr	r1, [pc, #52]	; (80063d0 <f_mount+0x88>)
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <f_mount+0x66>
 80063a8:	79fb      	ldrb	r3, [r7, #7]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d001      	beq.n	80063b2 <f_mount+0x6a>
 80063ae:	2300      	movs	r3, #0
 80063b0:	e00a      	b.n	80063c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80063b2:	f107 010c 	add.w	r1, r7, #12
 80063b6:	f107 0308 	add.w	r3, r7, #8
 80063ba:	2200      	movs	r2, #0
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff fd07 	bl	8005dd0 <find_volume>
 80063c2:	4603      	mov	r3, r0
 80063c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3720      	adds	r7, #32
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	200025c0 	.word	0x200025c0

080063d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b09a      	sub	sp, #104	; 0x68
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	4613      	mov	r3, r2
 80063e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <f_open+0x18>
 80063e8:	2309      	movs	r3, #9
 80063ea:	e1bb      	b.n	8006764 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063f2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80063f4:	79fa      	ldrb	r2, [r7, #7]
 80063f6:	f107 0114 	add.w	r1, r7, #20
 80063fa:	f107 0308 	add.w	r3, r7, #8
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff fce6 	bl	8005dd0 <find_volume>
 8006404:	4603      	mov	r3, r0
 8006406:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800640a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800640e:	2b00      	cmp	r3, #0
 8006410:	f040 819f 	bne.w	8006752 <f_open+0x37e>
		dj.obj.fs = fs;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	f107 0318 	add.w	r3, r7, #24
 800641e:	4611      	mov	r1, r2
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff fbc5 	bl	8005bb0 <follow_path>
 8006426:	4603      	mov	r3, r0
 8006428:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800642c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006430:	2b00      	cmp	r3, #0
 8006432:	d11a      	bne.n	800646a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006434:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006438:	b25b      	sxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	da03      	bge.n	8006446 <f_open+0x72>
				res = FR_INVALID_NAME;
 800643e:	2306      	movs	r3, #6
 8006440:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006444:	e011      	b.n	800646a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006446:	79fb      	ldrb	r3, [r7, #7]
 8006448:	f023 0301 	bic.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	bf14      	ite	ne
 8006450:	2301      	movne	r3, #1
 8006452:	2300      	moveq	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	461a      	mov	r2, r3
 8006458:	f107 0318 	add.w	r3, r7, #24
 800645c:	4611      	mov	r1, r2
 800645e:	4618      	mov	r0, r3
 8006460:	f7fd ff38 	bl	80042d4 <chk_lock>
 8006464:	4603      	mov	r3, r0
 8006466:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800646a:	79fb      	ldrb	r3, [r7, #7]
 800646c:	f003 031c 	and.w	r3, r3, #28
 8006470:	2b00      	cmp	r3, #0
 8006472:	d07f      	beq.n	8006574 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006474:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006478:	2b00      	cmp	r3, #0
 800647a:	d017      	beq.n	80064ac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800647c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006480:	2b04      	cmp	r3, #4
 8006482:	d10e      	bne.n	80064a2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006484:	f7fd ff82 	bl	800438c <enq_lock>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d006      	beq.n	800649c <f_open+0xc8>
 800648e:	f107 0318 	add.w	r3, r7, #24
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff f8dc 	bl	8005650 <dir_register>
 8006498:	4603      	mov	r3, r0
 800649a:	e000      	b.n	800649e <f_open+0xca>
 800649c:	2312      	movs	r3, #18
 800649e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80064a2:	79fb      	ldrb	r3, [r7, #7]
 80064a4:	f043 0308 	orr.w	r3, r3, #8
 80064a8:	71fb      	strb	r3, [r7, #7]
 80064aa:	e010      	b.n	80064ce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80064ac:	7fbb      	ldrb	r3, [r7, #30]
 80064ae:	f003 0311 	and.w	r3, r3, #17
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <f_open+0xea>
					res = FR_DENIED;
 80064b6:	2307      	movs	r3, #7
 80064b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80064bc:	e007      	b.n	80064ce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	f003 0304 	and.w	r3, r3, #4
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <f_open+0xfa>
 80064c8:	2308      	movs	r3, #8
 80064ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80064ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d168      	bne.n	80065a8 <f_open+0x1d4>
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d063      	beq.n	80065a8 <f_open+0x1d4>
				dw = GET_FATTIME();
 80064e0:	f7fd fcfc 	bl	8003edc <get_fattime>
 80064e4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80064e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e8:	330e      	adds	r3, #14
 80064ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fd fe47 	bl	8004180 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80064f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f4:	3316      	adds	r3, #22
 80064f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fd fe41 	bl	8004180 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80064fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006500:	330b      	adds	r3, #11
 8006502:	2220      	movs	r2, #32
 8006504:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800650a:	4611      	mov	r1, r2
 800650c:	4618      	mov	r0, r3
 800650e:	f7fe fe17 	bl	8005140 <ld_clust>
 8006512:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006518:	2200      	movs	r2, #0
 800651a:	4618      	mov	r0, r3
 800651c:	f7fe fe2f 	bl	800517e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	331c      	adds	r3, #28
 8006524:	2100      	movs	r1, #0
 8006526:	4618      	mov	r0, r3
 8006528:	f7fd fe2a 	bl	8004180 <st_dword>
					fs->wflag = 1;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2201      	movs	r2, #1
 8006530:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006534:	2b00      	cmp	r3, #0
 8006536:	d037      	beq.n	80065a8 <f_open+0x1d4>
						dw = fs->winsect;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800653e:	f107 0318 	add.w	r3, r7, #24
 8006542:	2200      	movs	r2, #0
 8006544:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006546:	4618      	mov	r0, r3
 8006548:	f7fe fb1f 	bl	8004b8a <remove_chain>
 800654c:	4603      	mov	r3, r0
 800654e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006552:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006556:	2b00      	cmp	r3, #0
 8006558:	d126      	bne.n	80065a8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800655e:	4618      	mov	r0, r3
 8006560:	f7fe f868 	bl	8004634 <move_window>
 8006564:	4603      	mov	r3, r0
 8006566:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800656e:	3a01      	subs	r2, #1
 8006570:	615a      	str	r2, [r3, #20]
 8006572:	e019      	b.n	80065a8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006574:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006578:	2b00      	cmp	r3, #0
 800657a:	d115      	bne.n	80065a8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800657c:	7fbb      	ldrb	r3, [r7, #30]
 800657e:	f003 0310 	and.w	r3, r3, #16
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <f_open+0x1ba>
					res = FR_NO_FILE;
 8006586:	2304      	movs	r3, #4
 8006588:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800658c:	e00c      	b.n	80065a8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d007      	beq.n	80065a8 <f_open+0x1d4>
 8006598:	7fbb      	ldrb	r3, [r7, #30]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <f_open+0x1d4>
						res = FR_DENIED;
 80065a2:	2307      	movs	r3, #7
 80065a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80065a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d128      	bne.n	8006602 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	f003 0308 	and.w	r3, r3, #8
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065c0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80065ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80065d0:	79fb      	ldrb	r3, [r7, #7]
 80065d2:	f023 0301 	bic.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	bf14      	ite	ne
 80065da:	2301      	movne	r3, #1
 80065dc:	2300      	moveq	r3, #0
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	461a      	mov	r2, r3
 80065e2:	f107 0318 	add.w	r3, r7, #24
 80065e6:	4611      	mov	r1, r2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fd fef1 	bl	80043d0 <inc_lock>
 80065ee:	4602      	mov	r2, r0
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d102      	bne.n	8006602 <f_open+0x22e>
 80065fc:	2302      	movs	r3, #2
 80065fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006602:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006606:	2b00      	cmp	r3, #0
 8006608:	f040 80a3 	bne.w	8006752 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006610:	4611      	mov	r1, r2
 8006612:	4618      	mov	r0, r3
 8006614:	f7fe fd94 	bl	8005140 <ld_clust>
 8006618:	4602      	mov	r2, r0
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006620:	331c      	adds	r3, #28
 8006622:	4618      	mov	r0, r3
 8006624:	f7fd fd6e 	bl	8004104 <ld_dword>
 8006628:	4602      	mov	r2, r0
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	88da      	ldrh	r2, [r3, #6]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	79fa      	ldrb	r2, [r7, #7]
 8006646:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3330      	adds	r3, #48	; 0x30
 800665e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006662:	2100      	movs	r1, #0
 8006664:	4618      	mov	r0, r3
 8006666:	f7fd fdd8 	bl	800421a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800666a:	79fb      	ldrb	r3, [r7, #7]
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b00      	cmp	r3, #0
 8006672:	d06e      	beq.n	8006752 <f_open+0x37e>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d06a      	beq.n	8006752 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	895b      	ldrh	r3, [r3, #10]
 8006688:	461a      	mov	r2, r3
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	899b      	ldrh	r3, [r3, #12]
 800668e:	fb02 f303 	mul.w	r3, r2, r3
 8006692:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066a0:	e016      	b.n	80066d0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fe f881 	bl	80047ae <get_fat>
 80066ac:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80066ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d802      	bhi.n	80066ba <f_open+0x2e6>
 80066b4:	2302      	movs	r3, #2
 80066b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80066ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066c0:	d102      	bne.n	80066c8 <f_open+0x2f4>
 80066c2:	2301      	movs	r3, #1
 80066c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80066c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d103      	bne.n	80066e0 <f_open+0x30c>
 80066d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066dc:	429a      	cmp	r2, r3
 80066de:	d8e0      	bhi.n	80066a2 <f_open+0x2ce>
				}
				fp->clust = clst;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066e4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80066e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d131      	bne.n	8006752 <f_open+0x37e>
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	899b      	ldrh	r3, [r3, #12]
 80066f2:	461a      	mov	r2, r3
 80066f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80066fa:	fb01 f202 	mul.w	r2, r1, r2
 80066fe:	1a9b      	subs	r3, r3, r2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d026      	beq.n	8006752 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006708:	4618      	mov	r0, r3
 800670a:	f7fe f831 	bl	8004770 <clust2sect>
 800670e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d103      	bne.n	800671e <f_open+0x34a>
						res = FR_INT_ERR;
 8006716:	2302      	movs	r3, #2
 8006718:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800671c:	e019      	b.n	8006752 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	899b      	ldrh	r3, [r3, #12]
 8006722:	461a      	mov	r2, r3
 8006724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006726:	fbb3 f2f2 	udiv	r2, r3, r2
 800672a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672c:	441a      	add	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	7858      	ldrb	r0, [r3, #1]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a1a      	ldr	r2, [r3, #32]
 8006740:	2301      	movs	r3, #1
 8006742:	f7fd fc69 	bl	8004018 <disk_read>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <f_open+0x37e>
 800674c:	2301      	movs	r3, #1
 800674e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006752:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <f_open+0x38c>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006760:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006764:	4618      	mov	r0, r3
 8006766:	3768      	adds	r7, #104	; 0x68
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b08e      	sub	sp, #56	; 0x38
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f107 0214 	add.w	r2, r7, #20
 800678a:	4611      	mov	r1, r2
 800678c:	4618      	mov	r0, r3
 800678e:	f7ff fda5 	bl	80062dc <validate>
 8006792:	4603      	mov	r3, r0
 8006794:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006798:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800679c:	2b00      	cmp	r3, #0
 800679e:	d107      	bne.n	80067b0 <f_read+0x44>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	7d5b      	ldrb	r3, [r3, #21]
 80067a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80067a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <f_read+0x4a>
 80067b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067b4:	e135      	b.n	8006a22 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	7d1b      	ldrb	r3, [r3, #20]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <f_read+0x5a>
 80067c2:	2307      	movs	r3, #7
 80067c4:	e12d      	b.n	8006a22 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	f240 811e 	bls.w	8006a18 <f_read+0x2ac>
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80067e0:	e11a      	b.n	8006a18 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	8992      	ldrh	r2, [r2, #12]
 80067ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80067ee:	fb01 f202 	mul.w	r2, r1, r2
 80067f2:	1a9b      	subs	r3, r3, r2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f040 80d5 	bne.w	80069a4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	8992      	ldrh	r2, [r2, #12]
 8006802:	fbb3 f3f2 	udiv	r3, r3, r2
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	8952      	ldrh	r2, [r2, #10]
 800680a:	3a01      	subs	r2, #1
 800680c:	4013      	ands	r3, r2
 800680e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d12f      	bne.n	8006876 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d103      	bne.n	8006826 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	633b      	str	r3, [r7, #48]	; 0x30
 8006824:	e013      	b.n	800684e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682a:	2b00      	cmp	r3, #0
 800682c:	d007      	beq.n	800683e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	4619      	mov	r1, r3
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f7fe faa5 	bl	8004d84 <clmt_clust>
 800683a:	6338      	str	r0, [r7, #48]	; 0x30
 800683c:	e007      	b.n	800684e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	4619      	mov	r1, r3
 8006846:	4610      	mov	r0, r2
 8006848:	f7fd ffb1 	bl	80047ae <get_fat>
 800684c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	2b01      	cmp	r3, #1
 8006852:	d804      	bhi.n	800685e <f_read+0xf2>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2202      	movs	r2, #2
 8006858:	755a      	strb	r2, [r3, #21]
 800685a:	2302      	movs	r3, #2
 800685c:	e0e1      	b.n	8006a22 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006864:	d104      	bne.n	8006870 <f_read+0x104>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	755a      	strb	r2, [r3, #21]
 800686c:	2301      	movs	r3, #1
 800686e:	e0d8      	b.n	8006a22 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006874:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	4619      	mov	r1, r3
 800687e:	4610      	mov	r0, r2
 8006880:	f7fd ff76 	bl	8004770 <clust2sect>
 8006884:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d104      	bne.n	8006896 <f_read+0x12a>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2202      	movs	r2, #2
 8006890:	755a      	strb	r2, [r3, #21]
 8006892:	2302      	movs	r3, #2
 8006894:	e0c5      	b.n	8006a22 <f_read+0x2b6>
			sect += csect;
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	4413      	add	r3, r2
 800689c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	899b      	ldrh	r3, [r3, #12]
 80068a2:	461a      	mov	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80068aa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80068ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d041      	beq.n	8006936 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80068b2:	69fa      	ldr	r2, [r7, #28]
 80068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b6:	4413      	add	r3, r2
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	8952      	ldrh	r2, [r2, #10]
 80068bc:	4293      	cmp	r3, r2
 80068be:	d905      	bls.n	80068cc <f_read+0x160>
					cc = fs->csize - csect;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	895b      	ldrh	r3, [r3, #10]
 80068c4:	461a      	mov	r2, r3
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	7858      	ldrb	r0, [r3, #1]
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068d6:	f7fd fb9f 	bl	8004018 <disk_read>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d004      	beq.n	80068ea <f_read+0x17e>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2201      	movs	r2, #1
 80068e4:	755a      	strb	r2, [r3, #21]
 80068e6:	2301      	movs	r3, #1
 80068e8:	e09b      	b.n	8006a22 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	7d1b      	ldrb	r3, [r3, #20]
 80068ee:	b25b      	sxtb	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	da18      	bge.n	8006926 <f_read+0x1ba>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6a1a      	ldr	r2, [r3, #32]
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068fe:	429a      	cmp	r2, r3
 8006900:	d911      	bls.n	8006926 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a1a      	ldr	r2, [r3, #32]
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	8992      	ldrh	r2, [r2, #12]
 800690e:	fb02 f303 	mul.w	r3, r2, r3
 8006912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006914:	18d0      	adds	r0, r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	899b      	ldrh	r3, [r3, #12]
 8006920:	461a      	mov	r2, r3
 8006922:	f7fd fc59 	bl	80041d8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	899b      	ldrh	r3, [r3, #12]
 800692a:	461a      	mov	r2, r3
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	fb02 f303 	mul.w	r3, r2, r3
 8006932:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006934:	e05c      	b.n	80069f0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	429a      	cmp	r2, r3
 800693e:	d02e      	beq.n	800699e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	7d1b      	ldrb	r3, [r3, #20]
 8006944:	b25b      	sxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	da18      	bge.n	800697c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	7858      	ldrb	r0, [r3, #1]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a1a      	ldr	r2, [r3, #32]
 8006958:	2301      	movs	r3, #1
 800695a:	f7fd fb7d 	bl	8004058 <disk_write>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d004      	beq.n	800696e <f_read+0x202>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2201      	movs	r2, #1
 8006968:	755a      	strb	r2, [r3, #21]
 800696a:	2301      	movs	r3, #1
 800696c:	e059      	b.n	8006a22 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	7d1b      	ldrb	r3, [r3, #20]
 8006972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006976:	b2da      	uxtb	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	7858      	ldrb	r0, [r3, #1]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006986:	2301      	movs	r3, #1
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	f7fd fb45 	bl	8004018 <disk_read>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d004      	beq.n	800699e <f_read+0x232>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	755a      	strb	r2, [r3, #21]
 800699a:	2301      	movs	r3, #1
 800699c:	e041      	b.n	8006a22 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	899b      	ldrh	r3, [r3, #12]
 80069a8:	4618      	mov	r0, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	8992      	ldrh	r2, [r2, #12]
 80069b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80069b6:	fb01 f202 	mul.w	r2, r1, r2
 80069ba:	1a9b      	subs	r3, r3, r2
 80069bc:	1ac3      	subs	r3, r0, r3
 80069be:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80069c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d901      	bls.n	80069cc <f_read+0x260>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	8992      	ldrh	r2, [r2, #12]
 80069da:	fbb3 f0f2 	udiv	r0, r3, r2
 80069de:	fb00 f202 	mul.w	r2, r0, r2
 80069e2:	1a9b      	subs	r3, r3, r2
 80069e4:	440b      	add	r3, r1
 80069e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e8:	4619      	mov	r1, r3
 80069ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069ec:	f7fd fbf4 	bl	80041d8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80069f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	4413      	add	r3, r2
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	699a      	ldr	r2, [r3, #24]
 80069fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fe:	441a      	add	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	619a      	str	r2, [r3, #24]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0a:	441a      	add	r2, r3
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f47f aee1 	bne.w	80067e2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3738      	adds	r7, #56	; 0x38
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b08c      	sub	sp, #48	; 0x30
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
 8006a36:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f107 0210 	add.w	r2, r7, #16
 8006a48:	4611      	mov	r1, r2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7ff fc46 	bl	80062dc <validate>
 8006a50:	4603      	mov	r3, r0
 8006a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006a56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d107      	bne.n	8006a6e <f_write+0x44>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	7d5b      	ldrb	r3, [r3, #21]
 8006a62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006a66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d002      	beq.n	8006a74 <f_write+0x4a>
 8006a6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a72:	e16a      	b.n	8006d4a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	7d1b      	ldrb	r3, [r3, #20]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <f_write+0x5a>
 8006a80:	2307      	movs	r3, #7
 8006a82:	e162      	b.n	8006d4a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	699a      	ldr	r2, [r3, #24]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	441a      	add	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	f080 814c 	bcs.w	8006d2e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	43db      	mvns	r3, r3
 8006a9c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006a9e:	e146      	b.n	8006d2e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	8992      	ldrh	r2, [r2, #12]
 8006aa8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aac:	fb01 f202 	mul.w	r2, r1, r2
 8006ab0:	1a9b      	subs	r3, r3, r2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f040 80f1 	bne.w	8006c9a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	8992      	ldrh	r2, [r2, #12]
 8006ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	8952      	ldrh	r2, [r2, #10]
 8006ac8:	3a01      	subs	r2, #1
 8006aca:	4013      	ands	r3, r2
 8006acc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d143      	bne.n	8006b5c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10c      	bne.n	8006af6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d11a      	bne.n	8006b1e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2100      	movs	r1, #0
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fe f8b1 	bl	8004c54 <create_chain>
 8006af2:	62b8      	str	r0, [r7, #40]	; 0x28
 8006af4:	e013      	b.n	8006b1e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d007      	beq.n	8006b0e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	4619      	mov	r1, r3
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f7fe f93d 	bl	8004d84 <clmt_clust>
 8006b0a:	62b8      	str	r0, [r7, #40]	; 0x28
 8006b0c:	e007      	b.n	8006b1e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	69db      	ldr	r3, [r3, #28]
 8006b14:	4619      	mov	r1, r3
 8006b16:	4610      	mov	r0, r2
 8006b18:	f7fe f89c 	bl	8004c54 <create_chain>
 8006b1c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 8109 	beq.w	8006d38 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d104      	bne.n	8006b36 <f_write+0x10c>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	755a      	strb	r2, [r3, #21]
 8006b32:	2302      	movs	r3, #2
 8006b34:	e109      	b.n	8006d4a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b3c:	d104      	bne.n	8006b48 <f_write+0x11e>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2201      	movs	r2, #1
 8006b42:	755a      	strb	r2, [r3, #21]
 8006b44:	2301      	movs	r3, #1
 8006b46:	e100      	b.n	8006d4a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b4c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d102      	bne.n	8006b5c <f_write+0x132>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b5a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	7d1b      	ldrb	r3, [r3, #20]
 8006b60:	b25b      	sxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	da18      	bge.n	8006b98 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	7858      	ldrb	r0, [r3, #1]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a1a      	ldr	r2, [r3, #32]
 8006b74:	2301      	movs	r3, #1
 8006b76:	f7fd fa6f 	bl	8004058 <disk_write>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d004      	beq.n	8006b8a <f_write+0x160>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2201      	movs	r2, #1
 8006b84:	755a      	strb	r2, [r3, #21]
 8006b86:	2301      	movs	r3, #1
 8006b88:	e0df      	b.n	8006d4a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	7d1b      	ldrb	r3, [r3, #20]
 8006b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	f7fd fde5 	bl	8004770 <clust2sect>
 8006ba6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d104      	bne.n	8006bb8 <f_write+0x18e>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	755a      	strb	r2, [r3, #21]
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e0c8      	b.n	8006d4a <f_write+0x320>
			sect += csect;
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	899b      	ldrh	r3, [r3, #12]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bcc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d043      	beq.n	8006c5c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	4413      	add	r3, r2
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	8952      	ldrh	r2, [r2, #10]
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d905      	bls.n	8006bee <f_write+0x1c4>
					cc = fs->csize - csect;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	895b      	ldrh	r3, [r3, #10]
 8006be6:	461a      	mov	r2, r3
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	7858      	ldrb	r0, [r3, #1]
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	69f9      	ldr	r1, [r7, #28]
 8006bf8:	f7fd fa2e 	bl	8004058 <disk_write>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d004      	beq.n	8006c0c <f_write+0x1e2>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	755a      	strb	r2, [r3, #21]
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e09e      	b.n	8006d4a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6a1a      	ldr	r2, [r3, #32]
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	6a3a      	ldr	r2, [r7, #32]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d918      	bls.n	8006c4c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a1a      	ldr	r2, [r3, #32]
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	8992      	ldrh	r2, [r2, #12]
 8006c2c:	fb02 f303 	mul.w	r3, r2, r3
 8006c30:	69fa      	ldr	r2, [r7, #28]
 8006c32:	18d1      	adds	r1, r2, r3
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	899b      	ldrh	r3, [r3, #12]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	f7fd facd 	bl	80041d8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	7d1b      	ldrb	r3, [r3, #20]
 8006c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	899b      	ldrh	r3, [r3, #12]
 8006c50:	461a      	mov	r2, r3
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	fb02 f303 	mul.w	r3, r2, r3
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006c5a:	e04b      	b.n	8006cf4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d016      	beq.n	8006c94 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	699a      	ldr	r2, [r3, #24]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d210      	bcs.n	8006c94 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	7858      	ldrb	r0, [r3, #1]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	f7fd f9ca 	bl	8004018 <disk_read>
 8006c84:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d004      	beq.n	8006c94 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	755a      	strb	r2, [r3, #21]
 8006c90:	2301      	movs	r3, #1
 8006c92:	e05a      	b.n	8006d4a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	899b      	ldrh	r3, [r3, #12]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	8992      	ldrh	r2, [r2, #12]
 8006ca8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cac:	fb01 f202 	mul.w	r2, r1, r2
 8006cb0:	1a9b      	subs	r3, r3, r2
 8006cb2:	1ac3      	subs	r3, r0, r3
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d901      	bls.n	8006cc2 <f_write+0x298>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	8992      	ldrh	r2, [r2, #12]
 8006cd0:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cd4:	fb00 f202 	mul.w	r2, r0, r2
 8006cd8:	1a9b      	subs	r3, r3, r2
 8006cda:	440b      	add	r3, r1
 8006cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cde:	69f9      	ldr	r1, [r7, #28]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7fd fa79 	bl	80041d8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	7d1b      	ldrb	r3, [r3, #20]
 8006cea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006cf4:	69fa      	ldr	r2, [r7, #28]
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	4413      	add	r3, r2
 8006cfa:	61fb      	str	r3, [r7, #28]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	441a      	add	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	619a      	str	r2, [r3, #24]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	bf38      	it	cc
 8006d14:	461a      	movcc	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	60da      	str	r2, [r3, #12]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	441a      	add	r2, r3
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f47f aeb5 	bne.w	8006aa0 <f_write+0x76>
 8006d36:	e000      	b.n	8006d3a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006d38:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	7d1b      	ldrb	r3, [r3, #20]
 8006d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3730      	adds	r7, #48	; 0x30
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b086      	sub	sp, #24
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f107 0208 	add.w	r2, r7, #8
 8006d60:	4611      	mov	r1, r2
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7ff faba 	bl	80062dc <validate>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d6c:	7dfb      	ldrb	r3, [r7, #23]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d168      	bne.n	8006e44 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	7d1b      	ldrb	r3, [r3, #20]
 8006d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d062      	beq.n	8006e44 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	7d1b      	ldrb	r3, [r3, #20]
 8006d82:	b25b      	sxtb	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	da15      	bge.n	8006db4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	7858      	ldrb	r0, [r3, #1]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1a      	ldr	r2, [r3, #32]
 8006d96:	2301      	movs	r3, #1
 8006d98:	f7fd f95e 	bl	8004058 <disk_write>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <f_sync+0x54>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e04f      	b.n	8006e46 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	7d1b      	ldrb	r3, [r3, #20]
 8006daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006db4:	f7fd f892 	bl	8003edc <get_fattime>
 8006db8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	f7fd fc36 	bl	8004634 <move_window>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d138      	bne.n	8006e44 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	330b      	adds	r3, #11
 8006ddc:	781a      	ldrb	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	330b      	adds	r3, #11
 8006de2:	f042 0220 	orr.w	r2, r2, #32
 8006de6:	b2d2      	uxtb	r2, r2
 8006de8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6818      	ldr	r0, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	461a      	mov	r2, r3
 8006df4:	68f9      	ldr	r1, [r7, #12]
 8006df6:	f7fe f9c2 	bl	800517e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f103 021c 	add.w	r2, r3, #28
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	4619      	mov	r1, r3
 8006e06:	4610      	mov	r0, r2
 8006e08:	f7fd f9ba 	bl	8004180 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3316      	adds	r3, #22
 8006e10:	6939      	ldr	r1, [r7, #16]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fd f9b4 	bl	8004180 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3312      	adds	r3, #18
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fd f993 	bl	800414a <st_word>
					fs->wflag = 1;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2201      	movs	r2, #1
 8006e28:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fd fc2f 	bl	8004690 <sync_fs>
 8006e32:	4603      	mov	r3, r0
 8006e34:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	7d1b      	ldrb	r3, [r3, #20]
 8006e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b084      	sub	sp, #16
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7ff ff7b 	bl	8006d52 <f_sync>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d118      	bne.n	8006e98 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f107 0208 	add.w	r2, r7, #8
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff fa34 	bl	80062dc <validate>
 8006e74:	4603      	mov	r3, r0
 8006e76:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10c      	bne.n	8006e98 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fd fb32 	bl	80044ec <dec_lock>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d102      	bne.n	8006e98 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b092      	sub	sp, #72	; 0x48
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006eae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006eb2:	f107 030c 	add.w	r3, r7, #12
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe ff89 	bl	8005dd0 <find_volume>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8006ec4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f040 8099 	bne.w	8007000 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	699a      	ldr	r2, [r3, #24]
 8006ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	3b02      	subs	r3, #2
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d804      	bhi.n	8006eec <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	e089      	b.n	8007000 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d128      	bne.n	8006f4a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006ef8:	2302      	movs	r3, #2
 8006efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efe:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006f00:	f107 0314 	add.w	r3, r7, #20
 8006f04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fd fc51 	bl	80047ae <get_fat>
 8006f0c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f14:	d103      	bne.n	8006f1e <f_getfree+0x7c>
 8006f16:	2301      	movs	r3, #1
 8006f18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006f1c:	e063      	b.n	8006fe6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d103      	bne.n	8006f2c <f_getfree+0x8a>
 8006f24:	2302      	movs	r3, #2
 8006f26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006f2a:	e05c      	b.n	8006fe6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d102      	bne.n	8006f38 <f_getfree+0x96>
 8006f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f34:	3301      	adds	r3, #1
 8006f36:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d3db      	bcc.n	8006f00 <f_getfree+0x5e>
 8006f48:	e04d      	b.n	8006fe6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f54:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	637b      	str	r3, [r7, #52]	; 0x34
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d113      	bne.n	8006f8c <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	63ba      	str	r2, [r7, #56]	; 0x38
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	f7fd fb61 	bl	8004634 <move_window>
 8006f72:	4603      	mov	r3, r0
 8006f74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006f78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d131      	bne.n	8006fe4 <f_getfree+0x142>
							p = fs->win;
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	3338      	adds	r3, #56	; 0x38
 8006f84:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f88:	899b      	ldrh	r3, [r3, #12]
 8006f8a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d10f      	bne.n	8006fb4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f96:	f7fd f89d 	bl	80040d4 <ld_word>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d102      	bne.n	8006fa6 <f_getfree+0x104>
 8006fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	3302      	adds	r3, #2
 8006faa:	633b      	str	r3, [r7, #48]	; 0x30
 8006fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fae:	3b02      	subs	r3, #2
 8006fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb2:	e010      	b.n	8006fd6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fb6:	f7fd f8a5 	bl	8004104 <ld_dword>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d102      	bne.n	8006fca <f_getfree+0x128>
 8006fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	3304      	adds	r3, #4
 8006fce:	633b      	str	r3, [r7, #48]	; 0x30
 8006fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd2:	3b04      	subs	r3, #4
 8006fd4:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8006fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1bd      	bne.n	8006f5e <f_getfree+0xbc>
 8006fe2:	e000      	b.n	8006fe6 <f_getfree+0x144>
							if (res != FR_OK) break;
 8006fe4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fea:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ff0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff4:	791a      	ldrb	r2, [r3, #4]
 8006ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff8:	f042 0201 	orr.w	r2, r2, #1
 8006ffc:	b2d2      	uxtb	r2, r2
 8006ffe:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007000:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007004:	4618      	mov	r0, r3
 8007006:	3748      	adds	r7, #72	; 0x48
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007020:	e01b      	b.n	800705a <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007022:	f107 0310 	add.w	r3, r7, #16
 8007026:	f107 0114 	add.w	r1, r7, #20
 800702a:	2201      	movs	r2, #1
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff fb9d 	bl	800676c <f_read>
		if (rc != 1) break;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d116      	bne.n	8007066 <f_gets+0x5a>
		c = s[0];
 8007038:	7d3b      	ldrb	r3, [r7, #20]
 800703a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800703c:	7dfb      	ldrb	r3, [r7, #23]
 800703e:	2b0d      	cmp	r3, #13
 8007040:	d100      	bne.n	8007044 <f_gets+0x38>
 8007042:	e00a      	b.n	800705a <f_gets+0x4e>
		*p++ = c;
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	61ba      	str	r2, [r7, #24]
 800704a:	7dfa      	ldrb	r2, [r7, #23]
 800704c:	701a      	strb	r2, [r3, #0]
		n++;
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	3301      	adds	r3, #1
 8007052:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007054:	7dfb      	ldrb	r3, [r7, #23]
 8007056:	2b0a      	cmp	r3, #10
 8007058:	d007      	beq.n	800706a <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	3b01      	subs	r3, #1
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	429a      	cmp	r2, r3
 8007062:	dbde      	blt.n	8007022 <f_gets+0x16>
 8007064:	e002      	b.n	800706c <f_gets+0x60>
		if (rc != 1) break;
 8007066:	bf00      	nop
 8007068:	e000      	b.n	800706c <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800706a:	bf00      	nop
	}
	*p = 0;
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	2200      	movs	r2, #0
 8007070:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <f_gets+0x70>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	e000      	b.n	800707e <f_gets+0x72>
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3720      	adds	r7, #32
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	460b      	mov	r3, r1
 8007090:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007092:	78fb      	ldrb	r3, [r7, #3]
 8007094:	2b0a      	cmp	r3, #10
 8007096:	d103      	bne.n	80070a0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007098:	210d      	movs	r1, #13
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7ff fff3 	bl	8007086 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	db25      	blt.n	80070f8 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	60fa      	str	r2, [r7, #12]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	4413      	add	r3, r2
 80070b6:	78fa      	ldrb	r2, [r7, #3]
 80070b8:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b3c      	cmp	r3, #60	; 0x3c
 80070be:	dd12      	ble.n	80070e6 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6818      	ldr	r0, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f103 010c 	add.w	r1, r3, #12
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	f107 0308 	add.w	r3, r7, #8
 80070d0:	f7ff fcab 	bl	8006a2a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d101      	bne.n	80070e0 <putc_bfd+0x5a>
 80070dc:	2300      	movs	r3, #0
 80070de:	e001      	b.n	80070e4 <putc_bfd+0x5e>
 80070e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070e4:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	609a      	str	r2, [r3, #8]
 80070f6:	e000      	b.n	80070fa <putc_bfd+0x74>
	if (i < 0) return;
 80070f8:	bf00      	nop
}
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	db16      	blt.n	800713e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6818      	ldr	r0, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f103 010c 	add.w	r1, r3, #12
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	461a      	mov	r2, r3
 8007120:	f107 030c 	add.w	r3, r7, #12
 8007124:	f7ff fc81 	bl	8006a2a <f_write>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d107      	bne.n	800713e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	4293      	cmp	r3, r2
 8007136:	d102      	bne.n	800713e <putc_flush+0x3e>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	e001      	b.n	8007142 <putc_flush+0x42>
	return EOF;
 800713e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	605a      	str	r2, [r3, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	609a      	str	r2, [r3, #8]
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b096      	sub	sp, #88	; 0x58
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800717e:	f107 030c 	add.w	r3, r7, #12
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff ffe0 	bl	800714a <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800718a:	e009      	b.n	80071a0 <f_puts+0x2c>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	781a      	ldrb	r2, [r3, #0]
 8007194:	f107 030c 	add.w	r3, r7, #12
 8007198:	4611      	mov	r1, r2
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff ff73 	bl	8007086 <putc_bfd>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1f1      	bne.n	800718c <f_puts+0x18>
	return putc_flush(&pb);
 80071a8:	f107 030c 	add.w	r3, r7, #12
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7ff ffa7 	bl	8007100 <putc_flush>
 80071b2:	4603      	mov	r3, r0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3758      	adds	r7, #88	; 0x58
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	4613      	mov	r3, r2
 80071c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80071ca:	2301      	movs	r3, #1
 80071cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80071d2:	4b1f      	ldr	r3, [pc, #124]	; (8007250 <FATFS_LinkDriverEx+0x94>)
 80071d4:	7a5b      	ldrb	r3, [r3, #9]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d131      	bne.n	8007240 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80071dc:	4b1c      	ldr	r3, [pc, #112]	; (8007250 <FATFS_LinkDriverEx+0x94>)
 80071de:	7a5b      	ldrb	r3, [r3, #9]
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	461a      	mov	r2, r3
 80071e4:	4b1a      	ldr	r3, [pc, #104]	; (8007250 <FATFS_LinkDriverEx+0x94>)
 80071e6:	2100      	movs	r1, #0
 80071e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80071ea:	4b19      	ldr	r3, [pc, #100]	; (8007250 <FATFS_LinkDriverEx+0x94>)
 80071ec:	7a5b      	ldrb	r3, [r3, #9]
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	4a17      	ldr	r2, [pc, #92]	; (8007250 <FATFS_LinkDriverEx+0x94>)
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80071fa:	4b15      	ldr	r3, [pc, #84]	; (8007250 <FATFS_LinkDriverEx+0x94>)
 80071fc:	7a5b      	ldrb	r3, [r3, #9]
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	461a      	mov	r2, r3
 8007202:	4b13      	ldr	r3, [pc, #76]	; (8007250 <FATFS_LinkDriverEx+0x94>)
 8007204:	4413      	add	r3, r2
 8007206:	79fa      	ldrb	r2, [r7, #7]
 8007208:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800720a:	4b11      	ldr	r3, [pc, #68]	; (8007250 <FATFS_LinkDriverEx+0x94>)
 800720c:	7a5b      	ldrb	r3, [r3, #9]
 800720e:	b2db      	uxtb	r3, r3
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	b2d1      	uxtb	r1, r2
 8007214:	4a0e      	ldr	r2, [pc, #56]	; (8007250 <FATFS_LinkDriverEx+0x94>)
 8007216:	7251      	strb	r1, [r2, #9]
 8007218:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800721a:	7dbb      	ldrb	r3, [r7, #22]
 800721c:	3330      	adds	r3, #48	; 0x30
 800721e:	b2da      	uxtb	r2, r3
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	3301      	adds	r3, #1
 8007228:	223a      	movs	r2, #58	; 0x3a
 800722a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	3302      	adds	r3, #2
 8007230:	222f      	movs	r2, #47	; 0x2f
 8007232:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	3303      	adds	r3, #3
 8007238:	2200      	movs	r2, #0
 800723a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800723c:	2300      	movs	r3, #0
 800723e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007240:	7dfb      	ldrb	r3, [r7, #23]
}
 8007242:	4618      	mov	r0, r3
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	200027e8 	.word	0x200027e8

08007254 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800725e:	2200      	movs	r2, #0
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7ff ffaa 	bl	80071bc <FATFS_LinkDriverEx>
 8007268:	4603      	mov	r3, r0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
	...

08007274 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	6039      	str	r1, [r7, #0]
 800727e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007280:	88fb      	ldrh	r3, [r7, #6]
 8007282:	2b7f      	cmp	r3, #127	; 0x7f
 8007284:	d802      	bhi.n	800728c <ff_convert+0x18>
		c = chr;
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	81fb      	strh	r3, [r7, #14]
 800728a:	e025      	b.n	80072d8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00b      	beq.n	80072aa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007292:	88fb      	ldrh	r3, [r7, #6]
 8007294:	2bff      	cmp	r3, #255	; 0xff
 8007296:	d805      	bhi.n	80072a4 <ff_convert+0x30>
 8007298:	88fb      	ldrh	r3, [r7, #6]
 800729a:	3b80      	subs	r3, #128	; 0x80
 800729c:	4a12      	ldr	r2, [pc, #72]	; (80072e8 <ff_convert+0x74>)
 800729e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072a2:	e000      	b.n	80072a6 <ff_convert+0x32>
 80072a4:	2300      	movs	r3, #0
 80072a6:	81fb      	strh	r3, [r7, #14]
 80072a8:	e016      	b.n	80072d8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80072aa:	2300      	movs	r3, #0
 80072ac:	81fb      	strh	r3, [r7, #14]
 80072ae:	e009      	b.n	80072c4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80072b0:	89fb      	ldrh	r3, [r7, #14]
 80072b2:	4a0d      	ldr	r2, [pc, #52]	; (80072e8 <ff_convert+0x74>)
 80072b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072b8:	88fa      	ldrh	r2, [r7, #6]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d006      	beq.n	80072cc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80072be:	89fb      	ldrh	r3, [r7, #14]
 80072c0:	3301      	adds	r3, #1
 80072c2:	81fb      	strh	r3, [r7, #14]
 80072c4:	89fb      	ldrh	r3, [r7, #14]
 80072c6:	2b7f      	cmp	r3, #127	; 0x7f
 80072c8:	d9f2      	bls.n	80072b0 <ff_convert+0x3c>
 80072ca:	e000      	b.n	80072ce <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80072cc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80072ce:	89fb      	ldrh	r3, [r7, #14]
 80072d0:	3380      	adds	r3, #128	; 0x80
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80072d8:	89fb      	ldrh	r3, [r7, #14]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	08007f34 	.word	0x08007f34

080072ec <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	4603      	mov	r3, r0
 80072f4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80072f6:	88fb      	ldrh	r3, [r7, #6]
 80072f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fc:	d201      	bcs.n	8007302 <ff_wtoupper+0x16>
 80072fe:	4b3e      	ldr	r3, [pc, #248]	; (80073f8 <ff_wtoupper+0x10c>)
 8007300:	e000      	b.n	8007304 <ff_wtoupper+0x18>
 8007302:	4b3e      	ldr	r3, [pc, #248]	; (80073fc <ff_wtoupper+0x110>)
 8007304:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	1c9a      	adds	r2, r3, #2
 800730a:	617a      	str	r2, [r7, #20]
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007310:	8a7b      	ldrh	r3, [r7, #18]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d068      	beq.n	80073e8 <ff_wtoupper+0xfc>
 8007316:	88fa      	ldrh	r2, [r7, #6]
 8007318:	8a7b      	ldrh	r3, [r7, #18]
 800731a:	429a      	cmp	r2, r3
 800731c:	d364      	bcc.n	80073e8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	1c9a      	adds	r2, r3, #2
 8007322:	617a      	str	r2, [r7, #20]
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	823b      	strh	r3, [r7, #16]
 8007328:	8a3b      	ldrh	r3, [r7, #16]
 800732a:	0a1b      	lsrs	r3, r3, #8
 800732c:	81fb      	strh	r3, [r7, #14]
 800732e:	8a3b      	ldrh	r3, [r7, #16]
 8007330:	b2db      	uxtb	r3, r3
 8007332:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007334:	88fa      	ldrh	r2, [r7, #6]
 8007336:	8a79      	ldrh	r1, [r7, #18]
 8007338:	8a3b      	ldrh	r3, [r7, #16]
 800733a:	440b      	add	r3, r1
 800733c:	429a      	cmp	r2, r3
 800733e:	da49      	bge.n	80073d4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007340:	89fb      	ldrh	r3, [r7, #14]
 8007342:	2b08      	cmp	r3, #8
 8007344:	d84f      	bhi.n	80073e6 <ff_wtoupper+0xfa>
 8007346:	a201      	add	r2, pc, #4	; (adr r2, 800734c <ff_wtoupper+0x60>)
 8007348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734c:	08007371 	.word	0x08007371
 8007350:	08007383 	.word	0x08007383
 8007354:	08007399 	.word	0x08007399
 8007358:	080073a1 	.word	0x080073a1
 800735c:	080073a9 	.word	0x080073a9
 8007360:	080073b1 	.word	0x080073b1
 8007364:	080073b9 	.word	0x080073b9
 8007368:	080073c1 	.word	0x080073c1
 800736c:	080073c9 	.word	0x080073c9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007370:	88fa      	ldrh	r2, [r7, #6]
 8007372:	8a7b      	ldrh	r3, [r7, #18]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	005b      	lsls	r3, r3, #1
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	4413      	add	r3, r2
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	80fb      	strh	r3, [r7, #6]
 8007380:	e027      	b.n	80073d2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007382:	88fa      	ldrh	r2, [r7, #6]
 8007384:	8a7b      	ldrh	r3, [r7, #18]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	b29b      	uxth	r3, r3
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	b29b      	uxth	r3, r3
 8007390:	88fa      	ldrh	r2, [r7, #6]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	80fb      	strh	r3, [r7, #6]
 8007396:	e01c      	b.n	80073d2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007398:	88fb      	ldrh	r3, [r7, #6]
 800739a:	3b10      	subs	r3, #16
 800739c:	80fb      	strh	r3, [r7, #6]
 800739e:	e018      	b.n	80073d2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80073a0:	88fb      	ldrh	r3, [r7, #6]
 80073a2:	3b20      	subs	r3, #32
 80073a4:	80fb      	strh	r3, [r7, #6]
 80073a6:	e014      	b.n	80073d2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80073a8:	88fb      	ldrh	r3, [r7, #6]
 80073aa:	3b30      	subs	r3, #48	; 0x30
 80073ac:	80fb      	strh	r3, [r7, #6]
 80073ae:	e010      	b.n	80073d2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80073b0:	88fb      	ldrh	r3, [r7, #6]
 80073b2:	3b1a      	subs	r3, #26
 80073b4:	80fb      	strh	r3, [r7, #6]
 80073b6:	e00c      	b.n	80073d2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80073b8:	88fb      	ldrh	r3, [r7, #6]
 80073ba:	3308      	adds	r3, #8
 80073bc:	80fb      	strh	r3, [r7, #6]
 80073be:	e008      	b.n	80073d2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80073c0:	88fb      	ldrh	r3, [r7, #6]
 80073c2:	3b50      	subs	r3, #80	; 0x50
 80073c4:	80fb      	strh	r3, [r7, #6]
 80073c6:	e004      	b.n	80073d2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80073c8:	88fb      	ldrh	r3, [r7, #6]
 80073ca:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80073ce:	80fb      	strh	r3, [r7, #6]
 80073d0:	bf00      	nop
			}
			break;
 80073d2:	e008      	b.n	80073e6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80073d4:	89fb      	ldrh	r3, [r7, #14]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d195      	bne.n	8007306 <ff_wtoupper+0x1a>
 80073da:	8a3b      	ldrh	r3, [r7, #16]
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4413      	add	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80073e4:	e78f      	b.n	8007306 <ff_wtoupper+0x1a>
			break;
 80073e6:	bf00      	nop
	}

	return chr;
 80073e8:	88fb      	ldrh	r3, [r7, #6]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	08008034 	.word	0x08008034
 80073fc:	08008228 	.word	0x08008228

08007400 <sbrk_aligned>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	4e0e      	ldr	r6, [pc, #56]	; (800743c <sbrk_aligned+0x3c>)
 8007404:	460c      	mov	r4, r1
 8007406:	6831      	ldr	r1, [r6, #0]
 8007408:	4605      	mov	r5, r0
 800740a:	b911      	cbnz	r1, 8007412 <sbrk_aligned+0x12>
 800740c:	f000 f8cc 	bl	80075a8 <_sbrk_r>
 8007410:	6030      	str	r0, [r6, #0]
 8007412:	4621      	mov	r1, r4
 8007414:	4628      	mov	r0, r5
 8007416:	f000 f8c7 	bl	80075a8 <_sbrk_r>
 800741a:	1c43      	adds	r3, r0, #1
 800741c:	d00a      	beq.n	8007434 <sbrk_aligned+0x34>
 800741e:	1cc4      	adds	r4, r0, #3
 8007420:	f024 0403 	bic.w	r4, r4, #3
 8007424:	42a0      	cmp	r0, r4
 8007426:	d007      	beq.n	8007438 <sbrk_aligned+0x38>
 8007428:	1a21      	subs	r1, r4, r0
 800742a:	4628      	mov	r0, r5
 800742c:	f000 f8bc 	bl	80075a8 <_sbrk_r>
 8007430:	3001      	adds	r0, #1
 8007432:	d101      	bne.n	8007438 <sbrk_aligned+0x38>
 8007434:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007438:	4620      	mov	r0, r4
 800743a:	bd70      	pop	{r4, r5, r6, pc}
 800743c:	200027f8 	.word	0x200027f8

08007440 <_malloc_r>:
 8007440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007444:	1ccd      	adds	r5, r1, #3
 8007446:	f025 0503 	bic.w	r5, r5, #3
 800744a:	3508      	adds	r5, #8
 800744c:	2d0c      	cmp	r5, #12
 800744e:	bf38      	it	cc
 8007450:	250c      	movcc	r5, #12
 8007452:	2d00      	cmp	r5, #0
 8007454:	4607      	mov	r7, r0
 8007456:	db01      	blt.n	800745c <_malloc_r+0x1c>
 8007458:	42a9      	cmp	r1, r5
 800745a:	d905      	bls.n	8007468 <_malloc_r+0x28>
 800745c:	230c      	movs	r3, #12
 800745e:	603b      	str	r3, [r7, #0]
 8007460:	2600      	movs	r6, #0
 8007462:	4630      	mov	r0, r6
 8007464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007468:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800753c <_malloc_r+0xfc>
 800746c:	f000 f868 	bl	8007540 <__malloc_lock>
 8007470:	f8d8 3000 	ldr.w	r3, [r8]
 8007474:	461c      	mov	r4, r3
 8007476:	bb5c      	cbnz	r4, 80074d0 <_malloc_r+0x90>
 8007478:	4629      	mov	r1, r5
 800747a:	4638      	mov	r0, r7
 800747c:	f7ff ffc0 	bl	8007400 <sbrk_aligned>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	4604      	mov	r4, r0
 8007484:	d155      	bne.n	8007532 <_malloc_r+0xf2>
 8007486:	f8d8 4000 	ldr.w	r4, [r8]
 800748a:	4626      	mov	r6, r4
 800748c:	2e00      	cmp	r6, #0
 800748e:	d145      	bne.n	800751c <_malloc_r+0xdc>
 8007490:	2c00      	cmp	r4, #0
 8007492:	d048      	beq.n	8007526 <_malloc_r+0xe6>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	4631      	mov	r1, r6
 8007498:	4638      	mov	r0, r7
 800749a:	eb04 0903 	add.w	r9, r4, r3
 800749e:	f000 f883 	bl	80075a8 <_sbrk_r>
 80074a2:	4581      	cmp	r9, r0
 80074a4:	d13f      	bne.n	8007526 <_malloc_r+0xe6>
 80074a6:	6821      	ldr	r1, [r4, #0]
 80074a8:	1a6d      	subs	r5, r5, r1
 80074aa:	4629      	mov	r1, r5
 80074ac:	4638      	mov	r0, r7
 80074ae:	f7ff ffa7 	bl	8007400 <sbrk_aligned>
 80074b2:	3001      	adds	r0, #1
 80074b4:	d037      	beq.n	8007526 <_malloc_r+0xe6>
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	442b      	add	r3, r5
 80074ba:	6023      	str	r3, [r4, #0]
 80074bc:	f8d8 3000 	ldr.w	r3, [r8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d038      	beq.n	8007536 <_malloc_r+0xf6>
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	42a2      	cmp	r2, r4
 80074c8:	d12b      	bne.n	8007522 <_malloc_r+0xe2>
 80074ca:	2200      	movs	r2, #0
 80074cc:	605a      	str	r2, [r3, #4]
 80074ce:	e00f      	b.n	80074f0 <_malloc_r+0xb0>
 80074d0:	6822      	ldr	r2, [r4, #0]
 80074d2:	1b52      	subs	r2, r2, r5
 80074d4:	d41f      	bmi.n	8007516 <_malloc_r+0xd6>
 80074d6:	2a0b      	cmp	r2, #11
 80074d8:	d917      	bls.n	800750a <_malloc_r+0xca>
 80074da:	1961      	adds	r1, r4, r5
 80074dc:	42a3      	cmp	r3, r4
 80074de:	6025      	str	r5, [r4, #0]
 80074e0:	bf18      	it	ne
 80074e2:	6059      	strne	r1, [r3, #4]
 80074e4:	6863      	ldr	r3, [r4, #4]
 80074e6:	bf08      	it	eq
 80074e8:	f8c8 1000 	streq.w	r1, [r8]
 80074ec:	5162      	str	r2, [r4, r5]
 80074ee:	604b      	str	r3, [r1, #4]
 80074f0:	4638      	mov	r0, r7
 80074f2:	f104 060b 	add.w	r6, r4, #11
 80074f6:	f000 f829 	bl	800754c <__malloc_unlock>
 80074fa:	f026 0607 	bic.w	r6, r6, #7
 80074fe:	1d23      	adds	r3, r4, #4
 8007500:	1af2      	subs	r2, r6, r3
 8007502:	d0ae      	beq.n	8007462 <_malloc_r+0x22>
 8007504:	1b9b      	subs	r3, r3, r6
 8007506:	50a3      	str	r3, [r4, r2]
 8007508:	e7ab      	b.n	8007462 <_malloc_r+0x22>
 800750a:	42a3      	cmp	r3, r4
 800750c:	6862      	ldr	r2, [r4, #4]
 800750e:	d1dd      	bne.n	80074cc <_malloc_r+0x8c>
 8007510:	f8c8 2000 	str.w	r2, [r8]
 8007514:	e7ec      	b.n	80074f0 <_malloc_r+0xb0>
 8007516:	4623      	mov	r3, r4
 8007518:	6864      	ldr	r4, [r4, #4]
 800751a:	e7ac      	b.n	8007476 <_malloc_r+0x36>
 800751c:	4634      	mov	r4, r6
 800751e:	6876      	ldr	r6, [r6, #4]
 8007520:	e7b4      	b.n	800748c <_malloc_r+0x4c>
 8007522:	4613      	mov	r3, r2
 8007524:	e7cc      	b.n	80074c0 <_malloc_r+0x80>
 8007526:	230c      	movs	r3, #12
 8007528:	603b      	str	r3, [r7, #0]
 800752a:	4638      	mov	r0, r7
 800752c:	f000 f80e 	bl	800754c <__malloc_unlock>
 8007530:	e797      	b.n	8007462 <_malloc_r+0x22>
 8007532:	6025      	str	r5, [r4, #0]
 8007534:	e7dc      	b.n	80074f0 <_malloc_r+0xb0>
 8007536:	605b      	str	r3, [r3, #4]
 8007538:	deff      	udf	#255	; 0xff
 800753a:	bf00      	nop
 800753c:	200027f4 	.word	0x200027f4

08007540 <__malloc_lock>:
 8007540:	4801      	ldr	r0, [pc, #4]	; (8007548 <__malloc_lock+0x8>)
 8007542:	f000 b86b 	b.w	800761c <__retarget_lock_acquire_recursive>
 8007546:	bf00      	nop
 8007548:	20002934 	.word	0x20002934

0800754c <__malloc_unlock>:
 800754c:	4801      	ldr	r0, [pc, #4]	; (8007554 <__malloc_unlock+0x8>)
 800754e:	f000 b866 	b.w	800761e <__retarget_lock_release_recursive>
 8007552:	bf00      	nop
 8007554:	20002934 	.word	0x20002934

08007558 <siprintf>:
 8007558:	b40e      	push	{r1, r2, r3}
 800755a:	b500      	push	{lr}
 800755c:	b09c      	sub	sp, #112	; 0x70
 800755e:	ab1d      	add	r3, sp, #116	; 0x74
 8007560:	9002      	str	r0, [sp, #8]
 8007562:	9006      	str	r0, [sp, #24]
 8007564:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007568:	4809      	ldr	r0, [pc, #36]	; (8007590 <siprintf+0x38>)
 800756a:	9107      	str	r1, [sp, #28]
 800756c:	9104      	str	r1, [sp, #16]
 800756e:	4909      	ldr	r1, [pc, #36]	; (8007594 <siprintf+0x3c>)
 8007570:	f853 2b04 	ldr.w	r2, [r3], #4
 8007574:	9105      	str	r1, [sp, #20]
 8007576:	6800      	ldr	r0, [r0, #0]
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	a902      	add	r1, sp, #8
 800757c:	f000 f904 	bl	8007788 <_svfiprintf_r>
 8007580:	9b02      	ldr	r3, [sp, #8]
 8007582:	2200      	movs	r2, #0
 8007584:	701a      	strb	r2, [r3, #0]
 8007586:	b01c      	add	sp, #112	; 0x70
 8007588:	f85d eb04 	ldr.w	lr, [sp], #4
 800758c:	b003      	add	sp, #12
 800758e:	4770      	bx	lr
 8007590:	20000070 	.word	0x20000070
 8007594:	ffff0208 	.word	0xffff0208

08007598 <memset>:
 8007598:	4402      	add	r2, r0
 800759a:	4603      	mov	r3, r0
 800759c:	4293      	cmp	r3, r2
 800759e:	d100      	bne.n	80075a2 <memset+0xa>
 80075a0:	4770      	bx	lr
 80075a2:	f803 1b01 	strb.w	r1, [r3], #1
 80075a6:	e7f9      	b.n	800759c <memset+0x4>

080075a8 <_sbrk_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4d06      	ldr	r5, [pc, #24]	; (80075c4 <_sbrk_r+0x1c>)
 80075ac:	2300      	movs	r3, #0
 80075ae:	4604      	mov	r4, r0
 80075b0:	4608      	mov	r0, r1
 80075b2:	602b      	str	r3, [r5, #0]
 80075b4:	f7fa fb08 	bl	8001bc8 <_sbrk>
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	d102      	bne.n	80075c2 <_sbrk_r+0x1a>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	b103      	cbz	r3, 80075c2 <_sbrk_r+0x1a>
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	20002938 	.word	0x20002938

080075c8 <__errno>:
 80075c8:	4b01      	ldr	r3, [pc, #4]	; (80075d0 <__errno+0x8>)
 80075ca:	6818      	ldr	r0, [r3, #0]
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	20000070 	.word	0x20000070

080075d4 <__libc_init_array>:
 80075d4:	b570      	push	{r4, r5, r6, lr}
 80075d6:	4d0d      	ldr	r5, [pc, #52]	; (800760c <__libc_init_array+0x38>)
 80075d8:	4c0d      	ldr	r4, [pc, #52]	; (8007610 <__libc_init_array+0x3c>)
 80075da:	1b64      	subs	r4, r4, r5
 80075dc:	10a4      	asrs	r4, r4, #2
 80075de:	2600      	movs	r6, #0
 80075e0:	42a6      	cmp	r6, r4
 80075e2:	d109      	bne.n	80075f8 <__libc_init_array+0x24>
 80075e4:	4d0b      	ldr	r5, [pc, #44]	; (8007614 <__libc_init_array+0x40>)
 80075e6:	4c0c      	ldr	r4, [pc, #48]	; (8007618 <__libc_init_array+0x44>)
 80075e8:	f000 fbae 	bl	8007d48 <_init>
 80075ec:	1b64      	subs	r4, r4, r5
 80075ee:	10a4      	asrs	r4, r4, #2
 80075f0:	2600      	movs	r6, #0
 80075f2:	42a6      	cmp	r6, r4
 80075f4:	d105      	bne.n	8007602 <__libc_init_array+0x2e>
 80075f6:	bd70      	pop	{r4, r5, r6, pc}
 80075f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80075fc:	4798      	blx	r3
 80075fe:	3601      	adds	r6, #1
 8007600:	e7ee      	b.n	80075e0 <__libc_init_array+0xc>
 8007602:	f855 3b04 	ldr.w	r3, [r5], #4
 8007606:	4798      	blx	r3
 8007608:	3601      	adds	r6, #1
 800760a:	e7f2      	b.n	80075f2 <__libc_init_array+0x1e>
 800760c:	08008320 	.word	0x08008320
 8007610:	08008320 	.word	0x08008320
 8007614:	08008320 	.word	0x08008320
 8007618:	08008324 	.word	0x08008324

0800761c <__retarget_lock_acquire_recursive>:
 800761c:	4770      	bx	lr

0800761e <__retarget_lock_release_recursive>:
 800761e:	4770      	bx	lr

08007620 <memcpy>:
 8007620:	440a      	add	r2, r1
 8007622:	4291      	cmp	r1, r2
 8007624:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007628:	d100      	bne.n	800762c <memcpy+0xc>
 800762a:	4770      	bx	lr
 800762c:	b510      	push	{r4, lr}
 800762e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007632:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007636:	4291      	cmp	r1, r2
 8007638:	d1f9      	bne.n	800762e <memcpy+0xe>
 800763a:	bd10      	pop	{r4, pc}

0800763c <_free_r>:
 800763c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800763e:	2900      	cmp	r1, #0
 8007640:	d044      	beq.n	80076cc <_free_r+0x90>
 8007642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007646:	9001      	str	r0, [sp, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	f1a1 0404 	sub.w	r4, r1, #4
 800764e:	bfb8      	it	lt
 8007650:	18e4      	addlt	r4, r4, r3
 8007652:	f7ff ff75 	bl	8007540 <__malloc_lock>
 8007656:	4a1e      	ldr	r2, [pc, #120]	; (80076d0 <_free_r+0x94>)
 8007658:	9801      	ldr	r0, [sp, #4]
 800765a:	6813      	ldr	r3, [r2, #0]
 800765c:	b933      	cbnz	r3, 800766c <_free_r+0x30>
 800765e:	6063      	str	r3, [r4, #4]
 8007660:	6014      	str	r4, [r2, #0]
 8007662:	b003      	add	sp, #12
 8007664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007668:	f7ff bf70 	b.w	800754c <__malloc_unlock>
 800766c:	42a3      	cmp	r3, r4
 800766e:	d908      	bls.n	8007682 <_free_r+0x46>
 8007670:	6825      	ldr	r5, [r4, #0]
 8007672:	1961      	adds	r1, r4, r5
 8007674:	428b      	cmp	r3, r1
 8007676:	bf01      	itttt	eq
 8007678:	6819      	ldreq	r1, [r3, #0]
 800767a:	685b      	ldreq	r3, [r3, #4]
 800767c:	1949      	addeq	r1, r1, r5
 800767e:	6021      	streq	r1, [r4, #0]
 8007680:	e7ed      	b.n	800765e <_free_r+0x22>
 8007682:	461a      	mov	r2, r3
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	b10b      	cbz	r3, 800768c <_free_r+0x50>
 8007688:	42a3      	cmp	r3, r4
 800768a:	d9fa      	bls.n	8007682 <_free_r+0x46>
 800768c:	6811      	ldr	r1, [r2, #0]
 800768e:	1855      	adds	r5, r2, r1
 8007690:	42a5      	cmp	r5, r4
 8007692:	d10b      	bne.n	80076ac <_free_r+0x70>
 8007694:	6824      	ldr	r4, [r4, #0]
 8007696:	4421      	add	r1, r4
 8007698:	1854      	adds	r4, r2, r1
 800769a:	42a3      	cmp	r3, r4
 800769c:	6011      	str	r1, [r2, #0]
 800769e:	d1e0      	bne.n	8007662 <_free_r+0x26>
 80076a0:	681c      	ldr	r4, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	6053      	str	r3, [r2, #4]
 80076a6:	440c      	add	r4, r1
 80076a8:	6014      	str	r4, [r2, #0]
 80076aa:	e7da      	b.n	8007662 <_free_r+0x26>
 80076ac:	d902      	bls.n	80076b4 <_free_r+0x78>
 80076ae:	230c      	movs	r3, #12
 80076b0:	6003      	str	r3, [r0, #0]
 80076b2:	e7d6      	b.n	8007662 <_free_r+0x26>
 80076b4:	6825      	ldr	r5, [r4, #0]
 80076b6:	1961      	adds	r1, r4, r5
 80076b8:	428b      	cmp	r3, r1
 80076ba:	bf04      	itt	eq
 80076bc:	6819      	ldreq	r1, [r3, #0]
 80076be:	685b      	ldreq	r3, [r3, #4]
 80076c0:	6063      	str	r3, [r4, #4]
 80076c2:	bf04      	itt	eq
 80076c4:	1949      	addeq	r1, r1, r5
 80076c6:	6021      	streq	r1, [r4, #0]
 80076c8:	6054      	str	r4, [r2, #4]
 80076ca:	e7ca      	b.n	8007662 <_free_r+0x26>
 80076cc:	b003      	add	sp, #12
 80076ce:	bd30      	pop	{r4, r5, pc}
 80076d0:	200027f4 	.word	0x200027f4

080076d4 <__ssputs_r>:
 80076d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d8:	688e      	ldr	r6, [r1, #8]
 80076da:	461f      	mov	r7, r3
 80076dc:	42be      	cmp	r6, r7
 80076de:	680b      	ldr	r3, [r1, #0]
 80076e0:	4682      	mov	sl, r0
 80076e2:	460c      	mov	r4, r1
 80076e4:	4690      	mov	r8, r2
 80076e6:	d82c      	bhi.n	8007742 <__ssputs_r+0x6e>
 80076e8:	898a      	ldrh	r2, [r1, #12]
 80076ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076ee:	d026      	beq.n	800773e <__ssputs_r+0x6a>
 80076f0:	6965      	ldr	r5, [r4, #20]
 80076f2:	6909      	ldr	r1, [r1, #16]
 80076f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076f8:	eba3 0901 	sub.w	r9, r3, r1
 80076fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007700:	1c7b      	adds	r3, r7, #1
 8007702:	444b      	add	r3, r9
 8007704:	106d      	asrs	r5, r5, #1
 8007706:	429d      	cmp	r5, r3
 8007708:	bf38      	it	cc
 800770a:	461d      	movcc	r5, r3
 800770c:	0553      	lsls	r3, r2, #21
 800770e:	d527      	bpl.n	8007760 <__ssputs_r+0x8c>
 8007710:	4629      	mov	r1, r5
 8007712:	f7ff fe95 	bl	8007440 <_malloc_r>
 8007716:	4606      	mov	r6, r0
 8007718:	b360      	cbz	r0, 8007774 <__ssputs_r+0xa0>
 800771a:	6921      	ldr	r1, [r4, #16]
 800771c:	464a      	mov	r2, r9
 800771e:	f7ff ff7f 	bl	8007620 <memcpy>
 8007722:	89a3      	ldrh	r3, [r4, #12]
 8007724:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800772c:	81a3      	strh	r3, [r4, #12]
 800772e:	6126      	str	r6, [r4, #16]
 8007730:	6165      	str	r5, [r4, #20]
 8007732:	444e      	add	r6, r9
 8007734:	eba5 0509 	sub.w	r5, r5, r9
 8007738:	6026      	str	r6, [r4, #0]
 800773a:	60a5      	str	r5, [r4, #8]
 800773c:	463e      	mov	r6, r7
 800773e:	42be      	cmp	r6, r7
 8007740:	d900      	bls.n	8007744 <__ssputs_r+0x70>
 8007742:	463e      	mov	r6, r7
 8007744:	6820      	ldr	r0, [r4, #0]
 8007746:	4632      	mov	r2, r6
 8007748:	4641      	mov	r1, r8
 800774a:	f000 fada 	bl	8007d02 <memmove>
 800774e:	68a3      	ldr	r3, [r4, #8]
 8007750:	1b9b      	subs	r3, r3, r6
 8007752:	60a3      	str	r3, [r4, #8]
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	4433      	add	r3, r6
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	2000      	movs	r0, #0
 800775c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007760:	462a      	mov	r2, r5
 8007762:	f000 fa9f 	bl	8007ca4 <_realloc_r>
 8007766:	4606      	mov	r6, r0
 8007768:	2800      	cmp	r0, #0
 800776a:	d1e0      	bne.n	800772e <__ssputs_r+0x5a>
 800776c:	6921      	ldr	r1, [r4, #16]
 800776e:	4650      	mov	r0, sl
 8007770:	f7ff ff64 	bl	800763c <_free_r>
 8007774:	230c      	movs	r3, #12
 8007776:	f8ca 3000 	str.w	r3, [sl]
 800777a:	89a3      	ldrh	r3, [r4, #12]
 800777c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007786:	e7e9      	b.n	800775c <__ssputs_r+0x88>

08007788 <_svfiprintf_r>:
 8007788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778c:	4698      	mov	r8, r3
 800778e:	898b      	ldrh	r3, [r1, #12]
 8007790:	061b      	lsls	r3, r3, #24
 8007792:	b09d      	sub	sp, #116	; 0x74
 8007794:	4607      	mov	r7, r0
 8007796:	460d      	mov	r5, r1
 8007798:	4614      	mov	r4, r2
 800779a:	d50e      	bpl.n	80077ba <_svfiprintf_r+0x32>
 800779c:	690b      	ldr	r3, [r1, #16]
 800779e:	b963      	cbnz	r3, 80077ba <_svfiprintf_r+0x32>
 80077a0:	2140      	movs	r1, #64	; 0x40
 80077a2:	f7ff fe4d 	bl	8007440 <_malloc_r>
 80077a6:	6028      	str	r0, [r5, #0]
 80077a8:	6128      	str	r0, [r5, #16]
 80077aa:	b920      	cbnz	r0, 80077b6 <_svfiprintf_r+0x2e>
 80077ac:	230c      	movs	r3, #12
 80077ae:	603b      	str	r3, [r7, #0]
 80077b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077b4:	e0d0      	b.n	8007958 <_svfiprintf_r+0x1d0>
 80077b6:	2340      	movs	r3, #64	; 0x40
 80077b8:	616b      	str	r3, [r5, #20]
 80077ba:	2300      	movs	r3, #0
 80077bc:	9309      	str	r3, [sp, #36]	; 0x24
 80077be:	2320      	movs	r3, #32
 80077c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80077c8:	2330      	movs	r3, #48	; 0x30
 80077ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007970 <_svfiprintf_r+0x1e8>
 80077ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077d2:	f04f 0901 	mov.w	r9, #1
 80077d6:	4623      	mov	r3, r4
 80077d8:	469a      	mov	sl, r3
 80077da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077de:	b10a      	cbz	r2, 80077e4 <_svfiprintf_r+0x5c>
 80077e0:	2a25      	cmp	r2, #37	; 0x25
 80077e2:	d1f9      	bne.n	80077d8 <_svfiprintf_r+0x50>
 80077e4:	ebba 0b04 	subs.w	fp, sl, r4
 80077e8:	d00b      	beq.n	8007802 <_svfiprintf_r+0x7a>
 80077ea:	465b      	mov	r3, fp
 80077ec:	4622      	mov	r2, r4
 80077ee:	4629      	mov	r1, r5
 80077f0:	4638      	mov	r0, r7
 80077f2:	f7ff ff6f 	bl	80076d4 <__ssputs_r>
 80077f6:	3001      	adds	r0, #1
 80077f8:	f000 80a9 	beq.w	800794e <_svfiprintf_r+0x1c6>
 80077fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077fe:	445a      	add	r2, fp
 8007800:	9209      	str	r2, [sp, #36]	; 0x24
 8007802:	f89a 3000 	ldrb.w	r3, [sl]
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 80a1 	beq.w	800794e <_svfiprintf_r+0x1c6>
 800780c:	2300      	movs	r3, #0
 800780e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007816:	f10a 0a01 	add.w	sl, sl, #1
 800781a:	9304      	str	r3, [sp, #16]
 800781c:	9307      	str	r3, [sp, #28]
 800781e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007822:	931a      	str	r3, [sp, #104]	; 0x68
 8007824:	4654      	mov	r4, sl
 8007826:	2205      	movs	r2, #5
 8007828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800782c:	4850      	ldr	r0, [pc, #320]	; (8007970 <_svfiprintf_r+0x1e8>)
 800782e:	f7f8 fcf7 	bl	8000220 <memchr>
 8007832:	9a04      	ldr	r2, [sp, #16]
 8007834:	b9d8      	cbnz	r0, 800786e <_svfiprintf_r+0xe6>
 8007836:	06d0      	lsls	r0, r2, #27
 8007838:	bf44      	itt	mi
 800783a:	2320      	movmi	r3, #32
 800783c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007840:	0711      	lsls	r1, r2, #28
 8007842:	bf44      	itt	mi
 8007844:	232b      	movmi	r3, #43	; 0x2b
 8007846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800784a:	f89a 3000 	ldrb.w	r3, [sl]
 800784e:	2b2a      	cmp	r3, #42	; 0x2a
 8007850:	d015      	beq.n	800787e <_svfiprintf_r+0xf6>
 8007852:	9a07      	ldr	r2, [sp, #28]
 8007854:	4654      	mov	r4, sl
 8007856:	2000      	movs	r0, #0
 8007858:	f04f 0c0a 	mov.w	ip, #10
 800785c:	4621      	mov	r1, r4
 800785e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007862:	3b30      	subs	r3, #48	; 0x30
 8007864:	2b09      	cmp	r3, #9
 8007866:	d94d      	bls.n	8007904 <_svfiprintf_r+0x17c>
 8007868:	b1b0      	cbz	r0, 8007898 <_svfiprintf_r+0x110>
 800786a:	9207      	str	r2, [sp, #28]
 800786c:	e014      	b.n	8007898 <_svfiprintf_r+0x110>
 800786e:	eba0 0308 	sub.w	r3, r0, r8
 8007872:	fa09 f303 	lsl.w	r3, r9, r3
 8007876:	4313      	orrs	r3, r2
 8007878:	9304      	str	r3, [sp, #16]
 800787a:	46a2      	mov	sl, r4
 800787c:	e7d2      	b.n	8007824 <_svfiprintf_r+0x9c>
 800787e:	9b03      	ldr	r3, [sp, #12]
 8007880:	1d19      	adds	r1, r3, #4
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	9103      	str	r1, [sp, #12]
 8007886:	2b00      	cmp	r3, #0
 8007888:	bfbb      	ittet	lt
 800788a:	425b      	neglt	r3, r3
 800788c:	f042 0202 	orrlt.w	r2, r2, #2
 8007890:	9307      	strge	r3, [sp, #28]
 8007892:	9307      	strlt	r3, [sp, #28]
 8007894:	bfb8      	it	lt
 8007896:	9204      	strlt	r2, [sp, #16]
 8007898:	7823      	ldrb	r3, [r4, #0]
 800789a:	2b2e      	cmp	r3, #46	; 0x2e
 800789c:	d10c      	bne.n	80078b8 <_svfiprintf_r+0x130>
 800789e:	7863      	ldrb	r3, [r4, #1]
 80078a0:	2b2a      	cmp	r3, #42	; 0x2a
 80078a2:	d134      	bne.n	800790e <_svfiprintf_r+0x186>
 80078a4:	9b03      	ldr	r3, [sp, #12]
 80078a6:	1d1a      	adds	r2, r3, #4
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	9203      	str	r2, [sp, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	bfb8      	it	lt
 80078b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80078b4:	3402      	adds	r4, #2
 80078b6:	9305      	str	r3, [sp, #20]
 80078b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007980 <_svfiprintf_r+0x1f8>
 80078bc:	7821      	ldrb	r1, [r4, #0]
 80078be:	2203      	movs	r2, #3
 80078c0:	4650      	mov	r0, sl
 80078c2:	f7f8 fcad 	bl	8000220 <memchr>
 80078c6:	b138      	cbz	r0, 80078d8 <_svfiprintf_r+0x150>
 80078c8:	9b04      	ldr	r3, [sp, #16]
 80078ca:	eba0 000a 	sub.w	r0, r0, sl
 80078ce:	2240      	movs	r2, #64	; 0x40
 80078d0:	4082      	lsls	r2, r0
 80078d2:	4313      	orrs	r3, r2
 80078d4:	3401      	adds	r4, #1
 80078d6:	9304      	str	r3, [sp, #16]
 80078d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078dc:	4825      	ldr	r0, [pc, #148]	; (8007974 <_svfiprintf_r+0x1ec>)
 80078de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078e2:	2206      	movs	r2, #6
 80078e4:	f7f8 fc9c 	bl	8000220 <memchr>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d038      	beq.n	800795e <_svfiprintf_r+0x1d6>
 80078ec:	4b22      	ldr	r3, [pc, #136]	; (8007978 <_svfiprintf_r+0x1f0>)
 80078ee:	bb1b      	cbnz	r3, 8007938 <_svfiprintf_r+0x1b0>
 80078f0:	9b03      	ldr	r3, [sp, #12]
 80078f2:	3307      	adds	r3, #7
 80078f4:	f023 0307 	bic.w	r3, r3, #7
 80078f8:	3308      	adds	r3, #8
 80078fa:	9303      	str	r3, [sp, #12]
 80078fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078fe:	4433      	add	r3, r6
 8007900:	9309      	str	r3, [sp, #36]	; 0x24
 8007902:	e768      	b.n	80077d6 <_svfiprintf_r+0x4e>
 8007904:	fb0c 3202 	mla	r2, ip, r2, r3
 8007908:	460c      	mov	r4, r1
 800790a:	2001      	movs	r0, #1
 800790c:	e7a6      	b.n	800785c <_svfiprintf_r+0xd4>
 800790e:	2300      	movs	r3, #0
 8007910:	3401      	adds	r4, #1
 8007912:	9305      	str	r3, [sp, #20]
 8007914:	4619      	mov	r1, r3
 8007916:	f04f 0c0a 	mov.w	ip, #10
 800791a:	4620      	mov	r0, r4
 800791c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007920:	3a30      	subs	r2, #48	; 0x30
 8007922:	2a09      	cmp	r2, #9
 8007924:	d903      	bls.n	800792e <_svfiprintf_r+0x1a6>
 8007926:	2b00      	cmp	r3, #0
 8007928:	d0c6      	beq.n	80078b8 <_svfiprintf_r+0x130>
 800792a:	9105      	str	r1, [sp, #20]
 800792c:	e7c4      	b.n	80078b8 <_svfiprintf_r+0x130>
 800792e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007932:	4604      	mov	r4, r0
 8007934:	2301      	movs	r3, #1
 8007936:	e7f0      	b.n	800791a <_svfiprintf_r+0x192>
 8007938:	ab03      	add	r3, sp, #12
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	462a      	mov	r2, r5
 800793e:	4b0f      	ldr	r3, [pc, #60]	; (800797c <_svfiprintf_r+0x1f4>)
 8007940:	a904      	add	r1, sp, #16
 8007942:	4638      	mov	r0, r7
 8007944:	f3af 8000 	nop.w
 8007948:	1c42      	adds	r2, r0, #1
 800794a:	4606      	mov	r6, r0
 800794c:	d1d6      	bne.n	80078fc <_svfiprintf_r+0x174>
 800794e:	89ab      	ldrh	r3, [r5, #12]
 8007950:	065b      	lsls	r3, r3, #25
 8007952:	f53f af2d 	bmi.w	80077b0 <_svfiprintf_r+0x28>
 8007956:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007958:	b01d      	add	sp, #116	; 0x74
 800795a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795e:	ab03      	add	r3, sp, #12
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	462a      	mov	r2, r5
 8007964:	4b05      	ldr	r3, [pc, #20]	; (800797c <_svfiprintf_r+0x1f4>)
 8007966:	a904      	add	r1, sp, #16
 8007968:	4638      	mov	r0, r7
 800796a:	f000 f879 	bl	8007a60 <_printf_i>
 800796e:	e7eb      	b.n	8007948 <_svfiprintf_r+0x1c0>
 8007970:	080082e4 	.word	0x080082e4
 8007974:	080082ee 	.word	0x080082ee
 8007978:	00000000 	.word	0x00000000
 800797c:	080076d5 	.word	0x080076d5
 8007980:	080082ea 	.word	0x080082ea

08007984 <_printf_common>:
 8007984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007988:	4616      	mov	r6, r2
 800798a:	4699      	mov	r9, r3
 800798c:	688a      	ldr	r2, [r1, #8]
 800798e:	690b      	ldr	r3, [r1, #16]
 8007990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007994:	4293      	cmp	r3, r2
 8007996:	bfb8      	it	lt
 8007998:	4613      	movlt	r3, r2
 800799a:	6033      	str	r3, [r6, #0]
 800799c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079a0:	4607      	mov	r7, r0
 80079a2:	460c      	mov	r4, r1
 80079a4:	b10a      	cbz	r2, 80079aa <_printf_common+0x26>
 80079a6:	3301      	adds	r3, #1
 80079a8:	6033      	str	r3, [r6, #0]
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	0699      	lsls	r1, r3, #26
 80079ae:	bf42      	ittt	mi
 80079b0:	6833      	ldrmi	r3, [r6, #0]
 80079b2:	3302      	addmi	r3, #2
 80079b4:	6033      	strmi	r3, [r6, #0]
 80079b6:	6825      	ldr	r5, [r4, #0]
 80079b8:	f015 0506 	ands.w	r5, r5, #6
 80079bc:	d106      	bne.n	80079cc <_printf_common+0x48>
 80079be:	f104 0a19 	add.w	sl, r4, #25
 80079c2:	68e3      	ldr	r3, [r4, #12]
 80079c4:	6832      	ldr	r2, [r6, #0]
 80079c6:	1a9b      	subs	r3, r3, r2
 80079c8:	42ab      	cmp	r3, r5
 80079ca:	dc26      	bgt.n	8007a1a <_printf_common+0x96>
 80079cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079d0:	1e13      	subs	r3, r2, #0
 80079d2:	6822      	ldr	r2, [r4, #0]
 80079d4:	bf18      	it	ne
 80079d6:	2301      	movne	r3, #1
 80079d8:	0692      	lsls	r2, r2, #26
 80079da:	d42b      	bmi.n	8007a34 <_printf_common+0xb0>
 80079dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079e0:	4649      	mov	r1, r9
 80079e2:	4638      	mov	r0, r7
 80079e4:	47c0      	blx	r8
 80079e6:	3001      	adds	r0, #1
 80079e8:	d01e      	beq.n	8007a28 <_printf_common+0xa4>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	6922      	ldr	r2, [r4, #16]
 80079ee:	f003 0306 	and.w	r3, r3, #6
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	bf02      	ittt	eq
 80079f6:	68e5      	ldreq	r5, [r4, #12]
 80079f8:	6833      	ldreq	r3, [r6, #0]
 80079fa:	1aed      	subeq	r5, r5, r3
 80079fc:	68a3      	ldr	r3, [r4, #8]
 80079fe:	bf0c      	ite	eq
 8007a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a04:	2500      	movne	r5, #0
 8007a06:	4293      	cmp	r3, r2
 8007a08:	bfc4      	itt	gt
 8007a0a:	1a9b      	subgt	r3, r3, r2
 8007a0c:	18ed      	addgt	r5, r5, r3
 8007a0e:	2600      	movs	r6, #0
 8007a10:	341a      	adds	r4, #26
 8007a12:	42b5      	cmp	r5, r6
 8007a14:	d11a      	bne.n	8007a4c <_printf_common+0xc8>
 8007a16:	2000      	movs	r0, #0
 8007a18:	e008      	b.n	8007a2c <_printf_common+0xa8>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	4652      	mov	r2, sl
 8007a1e:	4649      	mov	r1, r9
 8007a20:	4638      	mov	r0, r7
 8007a22:	47c0      	blx	r8
 8007a24:	3001      	adds	r0, #1
 8007a26:	d103      	bne.n	8007a30 <_printf_common+0xac>
 8007a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a30:	3501      	adds	r5, #1
 8007a32:	e7c6      	b.n	80079c2 <_printf_common+0x3e>
 8007a34:	18e1      	adds	r1, r4, r3
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	2030      	movs	r0, #48	; 0x30
 8007a3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a3e:	4422      	add	r2, r4
 8007a40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a48:	3302      	adds	r3, #2
 8007a4a:	e7c7      	b.n	80079dc <_printf_common+0x58>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	4622      	mov	r2, r4
 8007a50:	4649      	mov	r1, r9
 8007a52:	4638      	mov	r0, r7
 8007a54:	47c0      	blx	r8
 8007a56:	3001      	adds	r0, #1
 8007a58:	d0e6      	beq.n	8007a28 <_printf_common+0xa4>
 8007a5a:	3601      	adds	r6, #1
 8007a5c:	e7d9      	b.n	8007a12 <_printf_common+0x8e>
	...

08007a60 <_printf_i>:
 8007a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a64:	7e0f      	ldrb	r7, [r1, #24]
 8007a66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a68:	2f78      	cmp	r7, #120	; 0x78
 8007a6a:	4691      	mov	r9, r2
 8007a6c:	4680      	mov	r8, r0
 8007a6e:	460c      	mov	r4, r1
 8007a70:	469a      	mov	sl, r3
 8007a72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a76:	d807      	bhi.n	8007a88 <_printf_i+0x28>
 8007a78:	2f62      	cmp	r7, #98	; 0x62
 8007a7a:	d80a      	bhi.n	8007a92 <_printf_i+0x32>
 8007a7c:	2f00      	cmp	r7, #0
 8007a7e:	f000 80d4 	beq.w	8007c2a <_printf_i+0x1ca>
 8007a82:	2f58      	cmp	r7, #88	; 0x58
 8007a84:	f000 80c0 	beq.w	8007c08 <_printf_i+0x1a8>
 8007a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a90:	e03a      	b.n	8007b08 <_printf_i+0xa8>
 8007a92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a96:	2b15      	cmp	r3, #21
 8007a98:	d8f6      	bhi.n	8007a88 <_printf_i+0x28>
 8007a9a:	a101      	add	r1, pc, #4	; (adr r1, 8007aa0 <_printf_i+0x40>)
 8007a9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007aa0:	08007af9 	.word	0x08007af9
 8007aa4:	08007b0d 	.word	0x08007b0d
 8007aa8:	08007a89 	.word	0x08007a89
 8007aac:	08007a89 	.word	0x08007a89
 8007ab0:	08007a89 	.word	0x08007a89
 8007ab4:	08007a89 	.word	0x08007a89
 8007ab8:	08007b0d 	.word	0x08007b0d
 8007abc:	08007a89 	.word	0x08007a89
 8007ac0:	08007a89 	.word	0x08007a89
 8007ac4:	08007a89 	.word	0x08007a89
 8007ac8:	08007a89 	.word	0x08007a89
 8007acc:	08007c11 	.word	0x08007c11
 8007ad0:	08007b39 	.word	0x08007b39
 8007ad4:	08007bcb 	.word	0x08007bcb
 8007ad8:	08007a89 	.word	0x08007a89
 8007adc:	08007a89 	.word	0x08007a89
 8007ae0:	08007c33 	.word	0x08007c33
 8007ae4:	08007a89 	.word	0x08007a89
 8007ae8:	08007b39 	.word	0x08007b39
 8007aec:	08007a89 	.word	0x08007a89
 8007af0:	08007a89 	.word	0x08007a89
 8007af4:	08007bd3 	.word	0x08007bd3
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	1d1a      	adds	r2, r3, #4
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	602a      	str	r2, [r5, #0]
 8007b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e09f      	b.n	8007c4c <_printf_i+0x1ec>
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	682b      	ldr	r3, [r5, #0]
 8007b10:	0607      	lsls	r7, r0, #24
 8007b12:	f103 0104 	add.w	r1, r3, #4
 8007b16:	6029      	str	r1, [r5, #0]
 8007b18:	d501      	bpl.n	8007b1e <_printf_i+0xbe>
 8007b1a:	681e      	ldr	r6, [r3, #0]
 8007b1c:	e003      	b.n	8007b26 <_printf_i+0xc6>
 8007b1e:	0646      	lsls	r6, r0, #25
 8007b20:	d5fb      	bpl.n	8007b1a <_printf_i+0xba>
 8007b22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b26:	2e00      	cmp	r6, #0
 8007b28:	da03      	bge.n	8007b32 <_printf_i+0xd2>
 8007b2a:	232d      	movs	r3, #45	; 0x2d
 8007b2c:	4276      	negs	r6, r6
 8007b2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b32:	485a      	ldr	r0, [pc, #360]	; (8007c9c <_printf_i+0x23c>)
 8007b34:	230a      	movs	r3, #10
 8007b36:	e012      	b.n	8007b5e <_printf_i+0xfe>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	6820      	ldr	r0, [r4, #0]
 8007b3c:	1d19      	adds	r1, r3, #4
 8007b3e:	6029      	str	r1, [r5, #0]
 8007b40:	0605      	lsls	r5, r0, #24
 8007b42:	d501      	bpl.n	8007b48 <_printf_i+0xe8>
 8007b44:	681e      	ldr	r6, [r3, #0]
 8007b46:	e002      	b.n	8007b4e <_printf_i+0xee>
 8007b48:	0641      	lsls	r1, r0, #25
 8007b4a:	d5fb      	bpl.n	8007b44 <_printf_i+0xe4>
 8007b4c:	881e      	ldrh	r6, [r3, #0]
 8007b4e:	4853      	ldr	r0, [pc, #332]	; (8007c9c <_printf_i+0x23c>)
 8007b50:	2f6f      	cmp	r7, #111	; 0x6f
 8007b52:	bf0c      	ite	eq
 8007b54:	2308      	moveq	r3, #8
 8007b56:	230a      	movne	r3, #10
 8007b58:	2100      	movs	r1, #0
 8007b5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b5e:	6865      	ldr	r5, [r4, #4]
 8007b60:	60a5      	str	r5, [r4, #8]
 8007b62:	2d00      	cmp	r5, #0
 8007b64:	bfa2      	ittt	ge
 8007b66:	6821      	ldrge	r1, [r4, #0]
 8007b68:	f021 0104 	bicge.w	r1, r1, #4
 8007b6c:	6021      	strge	r1, [r4, #0]
 8007b6e:	b90e      	cbnz	r6, 8007b74 <_printf_i+0x114>
 8007b70:	2d00      	cmp	r5, #0
 8007b72:	d04b      	beq.n	8007c0c <_printf_i+0x1ac>
 8007b74:	4615      	mov	r5, r2
 8007b76:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b7a:	fb03 6711 	mls	r7, r3, r1, r6
 8007b7e:	5dc7      	ldrb	r7, [r0, r7]
 8007b80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b84:	4637      	mov	r7, r6
 8007b86:	42bb      	cmp	r3, r7
 8007b88:	460e      	mov	r6, r1
 8007b8a:	d9f4      	bls.n	8007b76 <_printf_i+0x116>
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d10b      	bne.n	8007ba8 <_printf_i+0x148>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	07de      	lsls	r6, r3, #31
 8007b94:	d508      	bpl.n	8007ba8 <_printf_i+0x148>
 8007b96:	6923      	ldr	r3, [r4, #16]
 8007b98:	6861      	ldr	r1, [r4, #4]
 8007b9a:	4299      	cmp	r1, r3
 8007b9c:	bfde      	ittt	le
 8007b9e:	2330      	movle	r3, #48	; 0x30
 8007ba0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ba4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007ba8:	1b52      	subs	r2, r2, r5
 8007baa:	6122      	str	r2, [r4, #16]
 8007bac:	f8cd a000 	str.w	sl, [sp]
 8007bb0:	464b      	mov	r3, r9
 8007bb2:	aa03      	add	r2, sp, #12
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	f7ff fee4 	bl	8007984 <_printf_common>
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d14a      	bne.n	8007c56 <_printf_i+0x1f6>
 8007bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bc4:	b004      	add	sp, #16
 8007bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	f043 0320 	orr.w	r3, r3, #32
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	4833      	ldr	r0, [pc, #204]	; (8007ca0 <_printf_i+0x240>)
 8007bd4:	2778      	movs	r7, #120	; 0x78
 8007bd6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	6829      	ldr	r1, [r5, #0]
 8007bde:	061f      	lsls	r7, r3, #24
 8007be0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007be4:	d402      	bmi.n	8007bec <_printf_i+0x18c>
 8007be6:	065f      	lsls	r7, r3, #25
 8007be8:	bf48      	it	mi
 8007bea:	b2b6      	uxthmi	r6, r6
 8007bec:	07df      	lsls	r7, r3, #31
 8007bee:	bf48      	it	mi
 8007bf0:	f043 0320 	orrmi.w	r3, r3, #32
 8007bf4:	6029      	str	r1, [r5, #0]
 8007bf6:	bf48      	it	mi
 8007bf8:	6023      	strmi	r3, [r4, #0]
 8007bfa:	b91e      	cbnz	r6, 8007c04 <_printf_i+0x1a4>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	f023 0320 	bic.w	r3, r3, #32
 8007c02:	6023      	str	r3, [r4, #0]
 8007c04:	2310      	movs	r3, #16
 8007c06:	e7a7      	b.n	8007b58 <_printf_i+0xf8>
 8007c08:	4824      	ldr	r0, [pc, #144]	; (8007c9c <_printf_i+0x23c>)
 8007c0a:	e7e4      	b.n	8007bd6 <_printf_i+0x176>
 8007c0c:	4615      	mov	r5, r2
 8007c0e:	e7bd      	b.n	8007b8c <_printf_i+0x12c>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	6826      	ldr	r6, [r4, #0]
 8007c14:	6961      	ldr	r1, [r4, #20]
 8007c16:	1d18      	adds	r0, r3, #4
 8007c18:	6028      	str	r0, [r5, #0]
 8007c1a:	0635      	lsls	r5, r6, #24
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	d501      	bpl.n	8007c24 <_printf_i+0x1c4>
 8007c20:	6019      	str	r1, [r3, #0]
 8007c22:	e002      	b.n	8007c2a <_printf_i+0x1ca>
 8007c24:	0670      	lsls	r0, r6, #25
 8007c26:	d5fb      	bpl.n	8007c20 <_printf_i+0x1c0>
 8007c28:	8019      	strh	r1, [r3, #0]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	6123      	str	r3, [r4, #16]
 8007c2e:	4615      	mov	r5, r2
 8007c30:	e7bc      	b.n	8007bac <_printf_i+0x14c>
 8007c32:	682b      	ldr	r3, [r5, #0]
 8007c34:	1d1a      	adds	r2, r3, #4
 8007c36:	602a      	str	r2, [r5, #0]
 8007c38:	681d      	ldr	r5, [r3, #0]
 8007c3a:	6862      	ldr	r2, [r4, #4]
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f7f8 faee 	bl	8000220 <memchr>
 8007c44:	b108      	cbz	r0, 8007c4a <_printf_i+0x1ea>
 8007c46:	1b40      	subs	r0, r0, r5
 8007c48:	6060      	str	r0, [r4, #4]
 8007c4a:	6863      	ldr	r3, [r4, #4]
 8007c4c:	6123      	str	r3, [r4, #16]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c54:	e7aa      	b.n	8007bac <_printf_i+0x14c>
 8007c56:	6923      	ldr	r3, [r4, #16]
 8007c58:	462a      	mov	r2, r5
 8007c5a:	4649      	mov	r1, r9
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	47d0      	blx	sl
 8007c60:	3001      	adds	r0, #1
 8007c62:	d0ad      	beq.n	8007bc0 <_printf_i+0x160>
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	079b      	lsls	r3, r3, #30
 8007c68:	d413      	bmi.n	8007c92 <_printf_i+0x232>
 8007c6a:	68e0      	ldr	r0, [r4, #12]
 8007c6c:	9b03      	ldr	r3, [sp, #12]
 8007c6e:	4298      	cmp	r0, r3
 8007c70:	bfb8      	it	lt
 8007c72:	4618      	movlt	r0, r3
 8007c74:	e7a6      	b.n	8007bc4 <_printf_i+0x164>
 8007c76:	2301      	movs	r3, #1
 8007c78:	4632      	mov	r2, r6
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	47d0      	blx	sl
 8007c80:	3001      	adds	r0, #1
 8007c82:	d09d      	beq.n	8007bc0 <_printf_i+0x160>
 8007c84:	3501      	adds	r5, #1
 8007c86:	68e3      	ldr	r3, [r4, #12]
 8007c88:	9903      	ldr	r1, [sp, #12]
 8007c8a:	1a5b      	subs	r3, r3, r1
 8007c8c:	42ab      	cmp	r3, r5
 8007c8e:	dcf2      	bgt.n	8007c76 <_printf_i+0x216>
 8007c90:	e7eb      	b.n	8007c6a <_printf_i+0x20a>
 8007c92:	2500      	movs	r5, #0
 8007c94:	f104 0619 	add.w	r6, r4, #25
 8007c98:	e7f5      	b.n	8007c86 <_printf_i+0x226>
 8007c9a:	bf00      	nop
 8007c9c:	080082f5 	.word	0x080082f5
 8007ca0:	08008306 	.word	0x08008306

08007ca4 <_realloc_r>:
 8007ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca8:	4680      	mov	r8, r0
 8007caa:	4614      	mov	r4, r2
 8007cac:	460e      	mov	r6, r1
 8007cae:	b921      	cbnz	r1, 8007cba <_realloc_r+0x16>
 8007cb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	f7ff bbc3 	b.w	8007440 <_malloc_r>
 8007cba:	b92a      	cbnz	r2, 8007cc8 <_realloc_r+0x24>
 8007cbc:	f7ff fcbe 	bl	800763c <_free_r>
 8007cc0:	4625      	mov	r5, r4
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc8:	f000 f835 	bl	8007d36 <_malloc_usable_size_r>
 8007ccc:	4284      	cmp	r4, r0
 8007cce:	4607      	mov	r7, r0
 8007cd0:	d802      	bhi.n	8007cd8 <_realloc_r+0x34>
 8007cd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cd6:	d812      	bhi.n	8007cfe <_realloc_r+0x5a>
 8007cd8:	4621      	mov	r1, r4
 8007cda:	4640      	mov	r0, r8
 8007cdc:	f7ff fbb0 	bl	8007440 <_malloc_r>
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d0ed      	beq.n	8007cc2 <_realloc_r+0x1e>
 8007ce6:	42bc      	cmp	r4, r7
 8007ce8:	4622      	mov	r2, r4
 8007cea:	4631      	mov	r1, r6
 8007cec:	bf28      	it	cs
 8007cee:	463a      	movcs	r2, r7
 8007cf0:	f7ff fc96 	bl	8007620 <memcpy>
 8007cf4:	4631      	mov	r1, r6
 8007cf6:	4640      	mov	r0, r8
 8007cf8:	f7ff fca0 	bl	800763c <_free_r>
 8007cfc:	e7e1      	b.n	8007cc2 <_realloc_r+0x1e>
 8007cfe:	4635      	mov	r5, r6
 8007d00:	e7df      	b.n	8007cc2 <_realloc_r+0x1e>

08007d02 <memmove>:
 8007d02:	4288      	cmp	r0, r1
 8007d04:	b510      	push	{r4, lr}
 8007d06:	eb01 0402 	add.w	r4, r1, r2
 8007d0a:	d902      	bls.n	8007d12 <memmove+0x10>
 8007d0c:	4284      	cmp	r4, r0
 8007d0e:	4623      	mov	r3, r4
 8007d10:	d807      	bhi.n	8007d22 <memmove+0x20>
 8007d12:	1e43      	subs	r3, r0, #1
 8007d14:	42a1      	cmp	r1, r4
 8007d16:	d008      	beq.n	8007d2a <memmove+0x28>
 8007d18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d1c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d20:	e7f8      	b.n	8007d14 <memmove+0x12>
 8007d22:	4402      	add	r2, r0
 8007d24:	4601      	mov	r1, r0
 8007d26:	428a      	cmp	r2, r1
 8007d28:	d100      	bne.n	8007d2c <memmove+0x2a>
 8007d2a:	bd10      	pop	{r4, pc}
 8007d2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d30:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d34:	e7f7      	b.n	8007d26 <memmove+0x24>

08007d36 <_malloc_usable_size_r>:
 8007d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d3a:	1f18      	subs	r0, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	bfbc      	itt	lt
 8007d40:	580b      	ldrlt	r3, [r1, r0]
 8007d42:	18c0      	addlt	r0, r0, r3
 8007d44:	4770      	bx	lr
	...

08007d48 <_init>:
 8007d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4a:	bf00      	nop
 8007d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4e:	bc08      	pop	{r3}
 8007d50:	469e      	mov	lr, r3
 8007d52:	4770      	bx	lr

08007d54 <_fini>:
 8007d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d56:	bf00      	nop
 8007d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5a:	bc08      	pop	{r3}
 8007d5c:	469e      	mov	lr, r3
 8007d5e:	4770      	bx	lr
